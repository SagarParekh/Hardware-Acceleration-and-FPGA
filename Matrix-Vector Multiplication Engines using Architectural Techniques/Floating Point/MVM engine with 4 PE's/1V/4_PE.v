// ********************************************************************
//
// Copyright (C) 1994-2016 Synopsys, Inc. All rights reserved. This Synopsys software and all associated documentation are proprietary to Synopsys, Inc. and may only be used pursuant to the terms and conditions of a written license agreement with Synopsys, Inc. All other use, reproduction, modification, or distribution of the Synopsys software or the associated documentation is strictly prohibited.

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler L-2016.03, Build 2009R, Feb 25 2016
// Date written:             Sat Feb 24 22:07:12 2018

// ********************************************************************

// Generated from /afs/asu.edu/users/s/j/p/sjparekh/asap7_sagar/FPGA/HW2/Question_3.slx Version 1.210 Last modified date Sat Feb 24 21:58:20 2018
module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input x2_sel, // ufix1
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [4:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [3:0] N_5;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1426_1_1810;  
wire [0:0] N_GlobalEnable1_0_3046;  
wire [3:0] N_x1_0_3047;  
wire [0:0] N_x1_sel_0_3048;  
wire [4:0] N_x2_0_3049;  
wire [0:0] N_x2_sel_0_3050;  
wire [4:0] N_y_1_3051;  
wire [0:0] N_y_sel_1_3052;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1426_1_1810 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg2_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [2:0] x1 // ufix3_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [2:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1424_1_1808;  
wire [0:0] N_GlobalEnable1_0_3060;  
wire [2:0] N_x1_0_3061;  
wire [0:0] N_x1_sel_0_3062;  
wire [3:0] N_x2_0_3063;  
wire [0:0] N_x2_sel_0_3064;  
wire [3:0] N_y_1_3065;  
wire [0:0] N_y_sel_1_3066;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1424_1_1808 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [3:0] med  [1:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input x2_sel, // ufix1
  input [5:0] x2, // ufix6_En0
  input x1_sel, // ufix1
  input [5:0] x1 // ufix6_En0
);
wire [5:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [5:0] N_7;  
wire [5:0] N_5;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1422_1_1806;  
wire [0:0] N_GlobalEnable1_0_3074;  
wire [5:0] N_x1_0_3075;  
wire [0:0] N_x1_sel_0_3076;  
wire [5:0] N_x2_0_3077;  
wire [0:0] N_x2_sel_0_3078;  
wire [5:0] N_y_1_3079;  
wire [0:0] N_y_sel_1_3080;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1422_1_1806 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input x2_sel, // ufix1
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [4:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [4:0] N_5;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1420_1_1804;  
wire [0:0] N_GlobalEnable1_0_3088;  
wire [4:0] N_x1_0_3089;  
wire [0:0] N_x1_sel_0_3090;  
wire [4:0] N_x2_0_3091;  
wire [0:0] N_x2_sel_0_3092;  
wire [4:0] N_y_1_3093;  
wire [0:0] N_y_sel_1_3094;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1420_1_1804 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [3:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1419_1_1803;  
wire [0:0] N_GlobalEnable1_0_3095;  
wire [3:0] N_x1_0_3096;  
wire [0:0] N_x1_sel_0_3097;  
wire [3:0] N_x2_0_3098;  
wire [0:0] N_x2_sel_0_3099;  
wire [3:0] N_y_1_3100;  
wire [0:0] N_y_sel_1_3101;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1419_1_1803 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input x2_sel, // ufix1
  input [2:0] x2, // ufix3_En0
  input x1_sel, // ufix1
  input [1:0] x1 // ufix2_En0
);
wire [2:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [2:0] N_7;  
wire [1:0] N_5;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1418_1_1802;  
wire [0:0] N_GlobalEnable1_0_3102;  
wire [1:0] N_x1_0_3103;  
wire [0:0] N_x1_sel_0_3104;  
wire [2:0] N_x2_0_3105;  
wire [0:0] N_x2_sel_0_3106;  
wire [2:0] N_y_1_3107;  
wire [0:0] N_y_sel_1_3108;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1418_1_1802 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [2:0] med  [1:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [1:0] y, // ufix2_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [1:0] N_4;  
wire [0:0] N_3;  
wire [1:0] N_6;  
wire [1:0] N_7;  
wire [0:0] N_8;  
wire [0:0] N_9;  
wire [0:0] N_1;  
wire [1:0] N_2;  
wire [3:0] N_sel_0_3109;  
wire [1:0] N_y_1_3110;  
wire [0:0] N_y_sel_1_3111;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_9 = 1'b0;
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [1:0] med  [15:0];
    reg [1:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 2'b11;
assign N_7 = 2'b10;
assign N_8 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP10 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_3112;  
wire [5:0] N_y_1_3113;  
wire [0:0] N_y_sel_1_3114;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b100111;
assign N_7 = 6'b100110;
assign N_8 = 6'b100101;
assign N_9 = 6'b100100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP11 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_3115;  
wire [5:0] N_y_1_3116;  
wire [0:0] N_y_sel_1_3117;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b101011;
assign N_7 = 6'b101010;
assign N_8 = 6'b101001;
assign N_9 = 6'b101000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP12 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_3118;  
wire [5:0] N_y_1_3119;  
wire [0:0] N_y_sel_1_3120;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b101111;
assign N_7 = 6'b101110;
assign N_8 = 6'b101101;
assign N_9 = 6'b101100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP13 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [5:0] N_4;  
wire [3:0] N_5;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_3121;  
wire [5:0] N_y_1_3122;  
wire GlobalResetSel;
assign y = N_2;
  assign N_5 = sel;
    assign N_2 = N_4;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b110011;
assign N_7 = 6'b110010;
assign N_8 = 6'b110001;
assign N_9 = 6'b110000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [2:0] N_4;  
wire [0:0] N_3;  
wire [2:0] N_6;  
wire [2:0] N_7;  
wire [2:0] N_8;  
wire [2:0] N_9;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [3:0] N_sel_0_3123;  
wire [2:0] N_y_1_3124;  
wire [0:0] N_y_sel_1_3125;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [2:0] med  [15:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 3'b111;
assign N_7 = 3'b110;
assign N_8 = 3'b101;
assign N_9 = 3'b100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_3126;  
wire [3:0] N_y_1_3127;  
wire [0:0] N_y_sel_1_3128;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1011;
assign N_7 = 4'b1010;
assign N_8 = 4'b1001;
assign N_9 = 4'b1000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_3129;  
wire [3:0] N_y_1_3130;  
wire [0:0] N_y_sel_1_3131;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1111;
assign N_7 = 4'b1110;
assign N_8 = 4'b1101;
assign N_9 = 4'b1100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_3132;  
wire [4:0] N_y_1_3133;  
wire [0:0] N_y_sel_1_3134;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10011;
assign N_7 = 5'b10010;
assign N_8 = 5'b10001;
assign N_9 = 5'b10000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP6 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_3135;  
wire [4:0] N_y_1_3136;  
wire [0:0] N_y_sel_1_3137;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10111;
assign N_7 = 5'b10110;
assign N_8 = 5'b10101;
assign N_9 = 5'b10100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP7 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_3138;  
wire [4:0] N_y_1_3139;  
wire [0:0] N_y_sel_1_3140;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b11011;
assign N_7 = 5'b11010;
assign N_8 = 5'b11001;
assign N_9 = 5'b11000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP8 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_3141;  
wire [4:0] N_y_1_3142;  
wire [0:0] N_y_sel_1_3143;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b11111;
assign N_7 = 5'b11110;
assign N_8 = 5'b11101;
assign N_9 = 5'b11100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP9 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_3144;  
wire [5:0] N_y_1_3145;  
wire [0:0] N_y_sel_1_3146;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b100011;
assign N_7 = 6'b100010;
assign N_8 = 6'b100001;
assign N_9 = 6'b100000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPodd (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [5:0] x, // ufix6_En0
  input msb // ufix1
);
wire [5:0] N_7;  
wire [0:0] N_3;  
wire [6:0] N_6;  
wire [0:0] N_5;  
wire [6:0] N_4;  
wire [0:0] N_2;  
wire [6:0] N_1;  
wire [0:0] N_msb_0_3147;  
wire [5:0] N_x_0_3148;  
wire [6:0] N_y_1_3149;  
wire GlobalResetSel;
assign y = N_1;
  assign N_7 = x;
  assign N_5 = msb;
  generate
  begin: Add_block
    wire enab;
    wire [6:0] tmpOut;
    wire  [6:0] tmp_N_7_0;
    wire  [6:0] tmp_N_3_1;
    wire [6:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_7_0 = ($unsigned(N_7) << 0);
    assign tmp_N_3_1 = ($unsigned(N_3) << 0);
    assign  tmpOutPre =   tmp_N_7_0 + tmp_N_3_1;
    assign tmpOut = tmpOutPre;
    assign N_4 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
assign N_2 = 1'b0;
    assign N_1 = N_6;
  generate
  begin: Mux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $unsigned(N_2) ;

    always@(*)
    begin
      if(N_5[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_3 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [5:0] x2, // ufix6_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [5:0] N_6;  
wire [0:0] N_8;  
wire [5:0] N_7;  
wire [4:0] N_5;  
wire [5:0] N_2;  
wire [4:0] N_x1_0_3150;  
wire [0:0] N_x1_sel_0_3151;  
wire [5:0] N_x2_0_3152;  
wire [5:0] N_y_1_3153;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [5:0] x2, // ufix6_En0
  input x1_sel, // ufix1
  input [5:0] x1 // ufix6_En0
);
wire [5:0] N_6;  
wire [0:0] N_8;  
wire [5:0] N_7;  
wire [5:0] N_5;  
wire [5:0] N_2;  
wire [5:0] N_x1_0_3158;  
wire [0:0] N_x1_sel_0_3159;  
wire [5:0] N_x2_0_3160;  
wire [5:0] N_y_1_3161;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1417_1_1801;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_3162;  
wire [52:0] N_x_0_3163;  
wire [6:0] N_y_1_3164;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1417_1_1801 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem1_Subsystem_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1431_1_1815;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_3329;  
wire [52:0] N_x_0_3330;  
wire [6:0] N_y_1_3331;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1431_1_1815 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem2_Subsystem_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1445_1_1829;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_3496;  
wire [52:0] N_x_0_3497;  
wire [6:0] N_y_1_3498;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1445_1_1829 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem3_Subsystem_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1459_1_1843;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_3663;  
wire [52:0] N_x_0_3664;  
wire [6:0] N_y_1_3665;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1459_1_1843 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Subsystem_Subsystem_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [63:0] N_3;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1416_1_1800;  
wire [0:0] N_GlobalEnable1_0_3165;  
wire [63:0] N_x_0_3166;  
wire [63:0] N_y_0_3167;  
wire [63:0] N_z_1_3168;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1416_1_1800 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_3[52];
    assign N_75[1] = N_3[53];
    assign N_75[2] = N_3[54];
    assign N_75[3] = N_3[55];
    assign N_75[4] = N_3[56];
    assign N_75[5] = N_3[57];
    assign N_75[6] = N_3[58];
    assign N_75[7] = N_3[59];
    assign N_75[8] = N_3[60];
    assign N_75[9] = N_3[61];
    assign N_75[10] = N_3[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_3[0];
    assign N_77[1] = N_3[1];
    assign N_77[2] = N_3[2];
    assign N_77[3] = N_3[3];
    assign N_77[4] = N_3[4];
    assign N_77[5] = N_3[5];
    assign N_77[6] = N_3[6];
    assign N_77[7] = N_3[7];
    assign N_77[8] = N_3[8];
    assign N_77[9] = N_3[9];
    assign N_77[10] = N_3[10];
    assign N_77[11] = N_3[11];
    assign N_77[12] = N_3[12];
    assign N_77[13] = N_3[13];
    assign N_77[14] = N_3[14];
    assign N_77[15] = N_3[15];
    assign N_77[16] = N_3[16];
    assign N_77[17] = N_3[17];
    assign N_77[18] = N_3[18];
    assign N_77[19] = N_3[19];
    assign N_77[20] = N_3[20];
    assign N_77[21] = N_3[21];
    assign N_77[22] = N_3[22];
    assign N_77[23] = N_3[23];
    assign N_77[24] = N_3[24];
    assign N_77[25] = N_3[25];
    assign N_77[26] = N_3[26];
    assign N_77[27] = N_3[27];
    assign N_77[28] = N_3[28];
    assign N_77[29] = N_3[29];
    assign N_77[30] = N_3[30];
    assign N_77[31] = N_3[31];
    assign N_77[32] = N_3[32];
    assign N_77[33] = N_3[33];
    assign N_77[34] = N_3[34];
    assign N_77[35] = N_3[35];
    assign N_77[36] = N_3[36];
    assign N_77[37] = N_3[37];
    assign N_77[38] = N_3[38];
    assign N_77[39] = N_3[39];
    assign N_77[40] = N_3[40];
    assign N_77[41] = N_3[41];
    assign N_77[42] = N_3[42];
    assign N_77[43] = N_3[43];
    assign N_77[44] = N_3[44];
    assign N_77[45] = N_3[45];
    assign N_77[46] = N_3[46];
    assign N_77[47] = N_3[47];
    assign N_77[48] = N_3[48];
    assign N_77[49] = N_3[49];
    assign N_77[50] = N_3[50];
    assign N_77[51] = N_3[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Subsystem_Subsystem_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1427_1_1811;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_3169;  
wire [63:0] N_x_0_3170;  
wire [63:0] N_y_0_3171;  
wire [63:0] N_z_1_3172;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1427_1_1811 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem1_Subsystem_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [63:0] N_3;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1430_1_1814;  
wire [0:0] N_GlobalEnable1_0_3332;  
wire [63:0] N_x_0_3333;  
wire [63:0] N_y_0_3334;  
wire [63:0] N_z_1_3335;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1430_1_1814 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_3[52];
    assign N_75[1] = N_3[53];
    assign N_75[2] = N_3[54];
    assign N_75[3] = N_3[55];
    assign N_75[4] = N_3[56];
    assign N_75[5] = N_3[57];
    assign N_75[6] = N_3[58];
    assign N_75[7] = N_3[59];
    assign N_75[8] = N_3[60];
    assign N_75[9] = N_3[61];
    assign N_75[10] = N_3[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_3[0];
    assign N_77[1] = N_3[1];
    assign N_77[2] = N_3[2];
    assign N_77[3] = N_3[3];
    assign N_77[4] = N_3[4];
    assign N_77[5] = N_3[5];
    assign N_77[6] = N_3[6];
    assign N_77[7] = N_3[7];
    assign N_77[8] = N_3[8];
    assign N_77[9] = N_3[9];
    assign N_77[10] = N_3[10];
    assign N_77[11] = N_3[11];
    assign N_77[12] = N_3[12];
    assign N_77[13] = N_3[13];
    assign N_77[14] = N_3[14];
    assign N_77[15] = N_3[15];
    assign N_77[16] = N_3[16];
    assign N_77[17] = N_3[17];
    assign N_77[18] = N_3[18];
    assign N_77[19] = N_3[19];
    assign N_77[20] = N_3[20];
    assign N_77[21] = N_3[21];
    assign N_77[22] = N_3[22];
    assign N_77[23] = N_3[23];
    assign N_77[24] = N_3[24];
    assign N_77[25] = N_3[25];
    assign N_77[26] = N_3[26];
    assign N_77[27] = N_3[27];
    assign N_77[28] = N_3[28];
    assign N_77[29] = N_3[29];
    assign N_77[30] = N_3[30];
    assign N_77[31] = N_3[31];
    assign N_77[32] = N_3[32];
    assign N_77[33] = N_3[33];
    assign N_77[34] = N_3[34];
    assign N_77[35] = N_3[35];
    assign N_77[36] = N_3[36];
    assign N_77[37] = N_3[37];
    assign N_77[38] = N_3[38];
    assign N_77[39] = N_3[39];
    assign N_77[40] = N_3[40];
    assign N_77[41] = N_3[41];
    assign N_77[42] = N_3[42];
    assign N_77[43] = N_3[43];
    assign N_77[44] = N_3[44];
    assign N_77[45] = N_3[45];
    assign N_77[46] = N_3[46];
    assign N_77[47] = N_3[47];
    assign N_77[48] = N_3[48];
    assign N_77[49] = N_3[49];
    assign N_77[50] = N_3[50];
    assign N_77[51] = N_3[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Subsystem1_Subsystem_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem1_Subsystem_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1441_1_1825;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_3336;  
wire [63:0] N_x_0_3337;  
wire [63:0] N_y_0_3338;  
wire [63:0] N_z_1_3339;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1441_1_1825 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem2_Subsystem_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [63:0] N_3;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1444_1_1828;  
wire [0:0] N_GlobalEnable1_0_3499;  
wire [63:0] N_x_0_3500;  
wire [63:0] N_y_0_3501;  
wire [63:0] N_z_1_3502;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1444_1_1828 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_3[52];
    assign N_75[1] = N_3[53];
    assign N_75[2] = N_3[54];
    assign N_75[3] = N_3[55];
    assign N_75[4] = N_3[56];
    assign N_75[5] = N_3[57];
    assign N_75[6] = N_3[58];
    assign N_75[7] = N_3[59];
    assign N_75[8] = N_3[60];
    assign N_75[9] = N_3[61];
    assign N_75[10] = N_3[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_3[0];
    assign N_77[1] = N_3[1];
    assign N_77[2] = N_3[2];
    assign N_77[3] = N_3[3];
    assign N_77[4] = N_3[4];
    assign N_77[5] = N_3[5];
    assign N_77[6] = N_3[6];
    assign N_77[7] = N_3[7];
    assign N_77[8] = N_3[8];
    assign N_77[9] = N_3[9];
    assign N_77[10] = N_3[10];
    assign N_77[11] = N_3[11];
    assign N_77[12] = N_3[12];
    assign N_77[13] = N_3[13];
    assign N_77[14] = N_3[14];
    assign N_77[15] = N_3[15];
    assign N_77[16] = N_3[16];
    assign N_77[17] = N_3[17];
    assign N_77[18] = N_3[18];
    assign N_77[19] = N_3[19];
    assign N_77[20] = N_3[20];
    assign N_77[21] = N_3[21];
    assign N_77[22] = N_3[22];
    assign N_77[23] = N_3[23];
    assign N_77[24] = N_3[24];
    assign N_77[25] = N_3[25];
    assign N_77[26] = N_3[26];
    assign N_77[27] = N_3[27];
    assign N_77[28] = N_3[28];
    assign N_77[29] = N_3[29];
    assign N_77[30] = N_3[30];
    assign N_77[31] = N_3[31];
    assign N_77[32] = N_3[32];
    assign N_77[33] = N_3[33];
    assign N_77[34] = N_3[34];
    assign N_77[35] = N_3[35];
    assign N_77[36] = N_3[36];
    assign N_77[37] = N_3[37];
    assign N_77[38] = N_3[38];
    assign N_77[39] = N_3[39];
    assign N_77[40] = N_3[40];
    assign N_77[41] = N_3[41];
    assign N_77[42] = N_3[42];
    assign N_77[43] = N_3[43];
    assign N_77[44] = N_3[44];
    assign N_77[45] = N_3[45];
    assign N_77[46] = N_3[46];
    assign N_77[47] = N_3[47];
    assign N_77[48] = N_3[48];
    assign N_77[49] = N_3[49];
    assign N_77[50] = N_3[50];
    assign N_77[51] = N_3[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Subsystem2_Subsystem_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem2_Subsystem_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1455_1_1839;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_3503;  
wire [63:0] N_x_0_3504;  
wire [63:0] N_y_0_3505;  
wire [63:0] N_z_1_3506;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1455_1_1839 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem3_Subsystem_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [63:0] N_3;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1458_1_1842;  
wire [0:0] N_GlobalEnable1_0_3666;  
wire [63:0] N_x_0_3667;  
wire [63:0] N_y_0_3668;  
wire [63:0] N_z_1_3669;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1458_1_1842 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_3[52];
    assign N_75[1] = N_3[53];
    assign N_75[2] = N_3[54];
    assign N_75[3] = N_3[55];
    assign N_75[4] = N_3[56];
    assign N_75[5] = N_3[57];
    assign N_75[6] = N_3[58];
    assign N_75[7] = N_3[59];
    assign N_75[8] = N_3[60];
    assign N_75[9] = N_3[61];
    assign N_75[10] = N_3[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_3[0];
    assign N_77[1] = N_3[1];
    assign N_77[2] = N_3[2];
    assign N_77[3] = N_3[3];
    assign N_77[4] = N_3[4];
    assign N_77[5] = N_3[5];
    assign N_77[6] = N_3[6];
    assign N_77[7] = N_3[7];
    assign N_77[8] = N_3[8];
    assign N_77[9] = N_3[9];
    assign N_77[10] = N_3[10];
    assign N_77[11] = N_3[11];
    assign N_77[12] = N_3[12];
    assign N_77[13] = N_3[13];
    assign N_77[14] = N_3[14];
    assign N_77[15] = N_3[15];
    assign N_77[16] = N_3[16];
    assign N_77[17] = N_3[17];
    assign N_77[18] = N_3[18];
    assign N_77[19] = N_3[19];
    assign N_77[20] = N_3[20];
    assign N_77[21] = N_3[21];
    assign N_77[22] = N_3[22];
    assign N_77[23] = N_3[23];
    assign N_77[24] = N_3[24];
    assign N_77[25] = N_3[25];
    assign N_77[26] = N_3[26];
    assign N_77[27] = N_3[27];
    assign N_77[28] = N_3[28];
    assign N_77[29] = N_3[29];
    assign N_77[30] = N_3[30];
    assign N_77[31] = N_3[31];
    assign N_77[32] = N_3[32];
    assign N_77[33] = N_3[33];
    assign N_77[34] = N_3[34];
    assign N_77[35] = N_3[35];
    assign N_77[36] = N_3[36];
    assign N_77[37] = N_3[37];
    assign N_77[38] = N_3[38];
    assign N_77[39] = N_3[39];
    assign N_77[40] = N_3[40];
    assign N_77[41] = N_3[41];
    assign N_77[42] = N_3[42];
    assign N_77[43] = N_3[43];
    assign N_77[44] = N_3[44];
    assign N_77[45] = N_3[45];
    assign N_77[46] = N_3[46];
    assign N_77[47] = N_3[47];
    assign N_77[48] = N_3[48];
    assign N_77[49] = N_3[49];
    assign N_77[50] = N_3[50];
    assign N_77[51] = N_3[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Subsystem3_Subsystem_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem3_Subsystem_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1469_1_1853;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_3670;  
wire [63:0] N_x_0_3671;  
wire [63:0] N_y_0_3672;  
wire [63:0] N_z_1_3673;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1469_1_1853 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem_Subsystem (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_4;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1415_1_1799;  
wire [63:0] N_8;  
wire [63:0] N_6;  
wire [63:0] N_2;  
wire [63:0] N_3;  
wire [0:0] N_GlobalEnable1_0_3173;  
wire [63:0] N_x_i_0_3174;  
wire [63:0] N_a_ij_0_3175;  
wire [63:0] N_Out1_1_3176;  
wire GlobalResetSel;
assign Out1 = N_4;
  assign N_3 = a_ij;
  assign N_2 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1415_1_1799 = GlobalEnable1;
    synDelayWithEnable #( .bitwidth(64), .preferRAMImpl(2), .delaylength(7) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_4), .outp(N_8) );
    Subsystem_Subsystem_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_8),
      .y(N_6),
      .z(N_4)    );
    Subsystem_Subsystem_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_2),
      .y(N_3),
      .z(N_6)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem1_Subsystem (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_4;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1429_1_1813;  
wire [63:0] N_8;  
wire [63:0] N_6;  
wire [63:0] N_2;  
wire [63:0] N_3;  
wire [0:0] N_GlobalEnable1_0_3340;  
wire [63:0] N_x_i_0_3341;  
wire [63:0] N_a_ij_0_3342;  
wire [63:0] N_Out1_1_3343;  
wire GlobalResetSel;
assign Out1 = N_4;
  assign N_3 = a_ij;
  assign N_2 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1429_1_1813 = GlobalEnable1;
    synDelayWithEnable #( .bitwidth(64), .preferRAMImpl(2), .delaylength(7) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_4), .outp(N_8) );
    Subsystem1_Subsystem_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_8),
      .y(N_6),
      .z(N_4)    );
    Subsystem1_Subsystem_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_2),
      .y(N_3),
      .z(N_6)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem2_Subsystem (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_4;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1443_1_1827;  
wire [63:0] N_8;  
wire [63:0] N_6;  
wire [63:0] N_2;  
wire [63:0] N_3;  
wire [0:0] N_GlobalEnable1_0_3507;  
wire [63:0] N_x_i_0_3508;  
wire [63:0] N_a_ij_0_3509;  
wire [63:0] N_Out1_1_3510;  
wire GlobalResetSel;
assign Out1 = N_4;
  assign N_3 = a_ij;
  assign N_2 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1443_1_1827 = GlobalEnable1;
    synDelayWithEnable #( .bitwidth(64), .preferRAMImpl(2), .delaylength(7) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_4), .outp(N_8) );
    Subsystem2_Subsystem_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_8),
      .y(N_6),
      .z(N_4)    );
    Subsystem2_Subsystem_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_2),
      .y(N_3),
      .z(N_6)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem3_Subsystem (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_4;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1457_1_1841;  
wire [63:0] N_8;  
wire [63:0] N_6;  
wire [63:0] N_2;  
wire [63:0] N_3;  
wire [0:0] N_GlobalEnable1_0_3674;  
wire [63:0] N_x_i_0_3675;  
wire [63:0] N_a_ij_0_3676;  
wire [63:0] N_Out1_1_3677;  
wire GlobalResetSel;
assign Out1 = N_4;
  assign N_3 = a_ij;
  assign N_2 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1457_1_1841 = GlobalEnable1;
    synDelayWithEnable #( .bitwidth(64), .preferRAMImpl(2), .delaylength(7) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_4), .outp(N_8) );
    Subsystem3_Subsystem_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_8),
      .y(N_6),
      .z(N_4)    );
    Subsystem3_Subsystem_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_2),
      .y(N_3),
      .z(N_6)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Port_In1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y, // ufix64_En0
  input [63:0] porty // ufix64_En0
);
wire [63:0] N_1;  
wire [63:0] N_porty_0_2784;  
wire [63:0] N_y_1_2785;  
wire GlobalResetSel;
assign y = N_1;
  assign N_1 = porty;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Port_Out (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] portx, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [63:0] N_3;  
wire [63:0] N_x_0_2914;  
wire [63:0] N_portx_1_2915;  
wire GlobalResetSel;
assign portx = N_3;
  assign N_3 = x;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Sequence_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [3:0] inp;
output [3:0] outp;
wire [3:0] Sequence_ROM_CT [0:15];
wire rstSig;
assign rstSig = rst;
wire [3:0] outBuf;
reg  [3:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
  assign outBuf = romReg;
assign  outp=outBuf;
  generate
  begin: gen_Sequence_ROM
    assign Sequence_ROM_CT[0]=4'b0000;
    assign Sequence_ROM_CT[1]=4'b0001;
    assign Sequence_ROM_CT[2]=4'b0010;
    assign Sequence_ROM_CT[3]=4'b0011;
    assign Sequence_ROM_CT[4]=4'b0100;
    assign Sequence_ROM_CT[5]=4'b0101;
    assign Sequence_ROM_CT[6]=4'b0110;
    assign Sequence_ROM_CT[7]=4'b0111;
    assign Sequence_ROM_CT[8]=4'b1000;
    assign Sequence_ROM_CT[9]=4'b1001;
    assign Sequence_ROM_CT[10]=4'b1010;
    assign Sequence_ROM_CT[11]=4'b1011;
    assign Sequence_ROM_CT[12]=4'b1100;
    assign Sequence_ROM_CT[13]=4'b1101;
    assign Sequence_ROM_CT[14]=4'b1110;
    assign Sequence_ROM_CT[15]=4'b1111;
  end //gen_Sequence_ROM
  endgenerate
  always @(posedge clk or posedge   rstSig)
  begin: Sequence_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 4'b0;
     end
      else if(en) begin
        romReg <= Sequence_ROM_CT[inp];
  end // if en
  end // Sequence_ROM_proc
endmodule

//----------------------------------------------------

module Sequence (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [3:0] seq // ufix4_En0
);
wire [3:0] N_2;  
wire [3:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1412_1_1796;  
wire [0:0] N_GlobalEnable1_0_3042;  
wire [3:0] N_seq_1_3043;  
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1412_1_1796 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [3:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen1412_1_1796[0];
    assign inbuf=N_1[3:0];
    Sequence_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen1412_1_1796[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(15),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Sequence1_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [3:0] inp;
output [3:0] outp;
wire [3:0] Sequence1_ROM_CT [0:15];
wire rstSig;
assign rstSig = rst;
wire [3:0] outBuf;
reg  [3:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
  assign outBuf = romReg;
assign  outp=outBuf;
  generate
  begin: gen_Sequence1_ROM
    assign Sequence1_ROM_CT[0]=4'b0100;
    assign Sequence1_ROM_CT[1]=4'b0101;
    assign Sequence1_ROM_CT[2]=4'b0110;
    assign Sequence1_ROM_CT[3]=4'b0111;
    assign Sequence1_ROM_CT[4]=4'b1000;
    assign Sequence1_ROM_CT[5]=4'b1001;
    assign Sequence1_ROM_CT[6]=4'b1010;
    assign Sequence1_ROM_CT[7]=4'b1011;
    assign Sequence1_ROM_CT[8]=4'b1100;
    assign Sequence1_ROM_CT[9]=4'b1101;
    assign Sequence1_ROM_CT[10]=4'b1110;
    assign Sequence1_ROM_CT[11]=4'b1111;
    assign Sequence1_ROM_CT[12]=4'b0000;
    assign Sequence1_ROM_CT[13]=4'b0001;
    assign Sequence1_ROM_CT[14]=4'b0010;
    assign Sequence1_ROM_CT[15]=4'b0011;
  end //gen_Sequence1_ROM
  endgenerate
  always @(posedge clk or posedge   rstSig)
  begin: Sequence1_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 4'b0;
     end
      else if(en) begin
        romReg <= Sequence1_ROM_CT[inp];
  end // if en
  end // Sequence1_ROM_proc
endmodule

//----------------------------------------------------

module Sequence1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [3:0] seq // ufix4_En0
);
wire [3:0] N_2;  
wire [3:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1413_1_1797;  
wire [0:0] N_GlobalEnable1_0_3044;  
wire [3:0] N_seq_1_3045;  
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1413_1_1797 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [3:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen1413_1_1797[0];
    assign inbuf=N_1[3:0];
    Sequence1_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen1413_1_1797[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(15),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out16, // ufix64_En0
  output [63:0] Out15, // ufix64_En0
  output [63:0] Out14, // ufix64_En0
  output [63:0] Out13, // ufix64_En0
  output [63:0] Out12, // ufix64_En0
  output [63:0] Out11, // ufix64_En0
  output [63:0] Out10, // ufix64_En0
  output [63:0] Out9, // ufix64_En0
  output [63:0] Out8, // ufix64_En0
  output [63:0] Out7, // ufix64_En0
  output [63:0] Out6, // ufix64_En0
  output [63:0] Out5, // ufix64_En0
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In19, // ufix64_En0
  input [63:0] In18, // ufix64_En0
  input [63:0] In17, // ufix64_En0
  input [63:0] In16, // ufix64_En0
  input [63:0] In15, // ufix64_En0
  input [63:0] In14, // ufix64_En0
  input [63:0] In13, // ufix64_En0
  input [63:0] In12, // ufix64_En0
  input [63:0] In11, // ufix64_En0
  input [63:0] In10, // ufix64_En0
  input [63:0] In9, // ufix64_En0
  input [63:0] In8, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [3:0] In2, // ufix4_En0
  input [3:0] In1 // ufix4_En0
);
wire [3:0] N_19;  
wire [63:0] N_20;  
wire [3:0] N_18;  
wire [63:0] N_16;  
wire [63:0] N_15;  
wire [63:0] N_14;  
wire [63:0] N_13;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [63:0] N_10;  
wire [63:0] N_9;  
wire [63:0] N_8;  
wire [63:0] N_7;  
wire [63:0] N_6;  
wire [63:0] N_5;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [63:0] N_27;  
wire [63:0] N_26;  
wire [63:0] N_25;  
wire [63:0] N_22;  
wire [63:0] N_23;  
wire [63:0] N_24;  
wire [63:0] N_28;  
wire [63:0] N_37;  
wire [63:0] N_36;  
wire [63:0] N_35;  
wire [63:0] N_34;  
wire [63:0] N_33;  
wire [63:0] N_32;  
wire [63:0] N_30;  
wire [63:0] N_31;  
wire [63:0] N_29;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1414_1_1798;  
wire [63:0] N_17;  
wire [63:0] N_21;  
wire [0:0] N_GlobalEnable1_0_3177;  
wire [3:0] N_In1_0_3178;  
wire [3:0] N_In2_0_3179;  
wire [63:0] N_x_0_3180;  
wire [63:0] N_In4_0_3181;  
wire [63:0] N_In5_0_3182;  
wire [63:0] N_In6_0_3183;  
wire [63:0] N_In7_0_3184;  
wire [63:0] N_In8_0_3185;  
wire [63:0] N_In9_0_3186;  
wire [63:0] N_In10_0_3187;  
wire [63:0] N_In11_0_3188;  
wire [63:0] N_In12_0_3189;  
wire [63:0] N_In13_0_3190;  
wire [63:0] N_In14_0_3191;  
wire [63:0] N_In15_0_3192;  
wire [63:0] N_In16_0_3193;  
wire [63:0] N_In17_0_3194;  
wire [63:0] N_In18_0_3195;  
wire [63:0] N_In19_0_3196;  
wire [63:0] N_Out1_1_3197;  
wire [63:0] N_Out2_1_3198;  
wire [63:0] N_Out3_1_3199;  
wire [63:0] N_Out4_1_3200;  
wire [63:0] N_Out5_1_3201;  
wire [63:0] N_Out6_1_3202;  
wire [63:0] N_Out7_1_3203;  
wire [63:0] N_Out8_1_3204;  
wire [63:0] N_Out9_1_3205;  
wire [63:0] N_Out10_1_3206;  
wire [63:0] N_Out11_1_3207;  
wire [63:0] N_Out12_1_3208;  
wire [63:0] N_Out13_1_3209;  
wire [63:0] N_Out14_1_3210;  
wire [63:0] N_Out15_1_3211;  
wire [63:0] N_Out16_1_3212;  
wire GlobalResetSel;
assign Out16 = N_27;
assign Out15 = N_26;
assign Out14 = N_25;
assign Out13 = N_22;
assign Out12 = N_23;
assign Out11 = N_24;
assign Out10 = N_28;
assign Out9 = N_37;
assign Out8 = N_36;
assign Out7 = N_35;
assign Out6 = N_34;
assign Out5 = N_33;
assign Out4 = N_32;
assign Out3 = N_30;
assign Out2 = N_31;
assign Out1 = N_29;
  assign N_1 = In19;
  assign N_2 = In18;
  assign N_3 = In17;
  assign N_4 = In16;
  assign N_5 = In15;
  assign N_6 = In14;
  assign N_7 = In13;
  assign N_8 = In12;
  assign N_9 = In11;
  assign N_10 = In10;
  assign N_11 = In9;
  assign N_12 = In8;
  assign N_13 = In7;
  assign N_14 = In6;
  assign N_15 = In5;
  assign N_16 = In4;
  assign N_17 = x;
  assign N_18 = In2;
  assign N_19 = In1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1414_1_1798 = GlobalEnable1;
  //start Demux
assign N_29 = $unsigned(N_19[3:0])==0 ? N_20 : 0;
assign N_31 = $unsigned(N_19[3:0])==1 ? N_20 : 0;
assign N_30 = $unsigned(N_19[3:0])==2 ? N_20 : 0;
assign N_32 = $unsigned(N_19[3:0])==3 ? N_20 : 0;
assign N_33 = $unsigned(N_19[3:0])==4 ? N_20 : 0;
assign N_34 = $unsigned(N_19[3:0])==5 ? N_20 : 0;
assign N_35 = $unsigned(N_19[3:0])==6 ? N_20 : 0;
assign N_36 = $unsigned(N_19[3:0])==7 ? N_20 : 0;
assign N_37 = $unsigned(N_19[3:0])==8 ? N_20 : 0;
assign N_28 = $unsigned(N_19[3:0])==9 ? N_20 : 0;
assign N_24 = $unsigned(N_19[3:0])==10 ? N_20 : 0;
assign N_23 = $unsigned(N_19[3:0])==11 ? N_20 : 0;
assign N_22 = $unsigned(N_19[3:0])==12 ? N_20 : 0;
assign N_25 = $unsigned(N_19[3:0])==13 ? N_20 : 0;
assign N_26 = $unsigned(N_19[3:0])==14 ? N_20 : 0;
assign N_27 = $unsigned(N_19[3:0])==15 ? N_20 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [15:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_16) ;
    assign med[1] = $unsigned(N_15) ;
    assign med[2] = $unsigned(N_14) ;
    assign med[3] = $unsigned(N_13) ;
    assign med[4] = $unsigned(N_12) ;
    assign med[5] = $unsigned(N_11) ;
    assign med[6] = $unsigned(N_10) ;
    assign med[7] = $unsigned(N_9) ;
    assign med[8] = $unsigned(N_8) ;
    assign med[9] = $unsigned(N_7) ;
    assign med[10] = $unsigned(N_6) ;
    assign med[11] = $unsigned(N_5) ;
    assign med[12] = $unsigned(N_4) ;
    assign med[13] = $unsigned(N_3) ;
    assign med[14] = $unsigned(N_2) ;
    assign med[15] = $unsigned(N_1) ;

    always@(*)
    begin
      if(N_18[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_18[3:0]];
    end

    assign N_21 = tmpOut;
  end // Mux_Block
  endgenerate
    Subsystem_Subsystem  mySubsystem (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_17),
      .a_ij(N_21),
      .Out1(N_20)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out16, // ufix64_En0
  output [63:0] Out15, // ufix64_En0
  output [63:0] Out14, // ufix64_En0
  output [63:0] Out13, // ufix64_En0
  output [63:0] Out12, // ufix64_En0
  output [63:0] Out11, // ufix64_En0
  output [63:0] Out10, // ufix64_En0
  output [63:0] Out9, // ufix64_En0
  output [63:0] Out8, // ufix64_En0
  output [63:0] Out7, // ufix64_En0
  output [63:0] Out6, // ufix64_En0
  output [63:0] Out5, // ufix64_En0
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In19, // ufix64_En0
  input [63:0] In18, // ufix64_En0
  input [63:0] In17, // ufix64_En0
  input [63:0] In16, // ufix64_En0
  input [63:0] In15, // ufix64_En0
  input [63:0] In14, // ufix64_En0
  input [63:0] In13, // ufix64_En0
  input [63:0] In12, // ufix64_En0
  input [63:0] In11, // ufix64_En0
  input [63:0] In10, // ufix64_En0
  input [63:0] In9, // ufix64_En0
  input [63:0] In8, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [3:0] In2, // ufix4_En0
  input [3:0] In1 // ufix4_En0
);
wire [3:0] N_19;  
wire [63:0] N_20;  
wire [3:0] N_18;  
wire [63:0] N_16;  
wire [63:0] N_15;  
wire [63:0] N_14;  
wire [63:0] N_13;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [63:0] N_10;  
wire [63:0] N_9;  
wire [63:0] N_8;  
wire [63:0] N_7;  
wire [63:0] N_6;  
wire [63:0] N_5;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [63:0] N_27;  
wire [63:0] N_26;  
wire [63:0] N_25;  
wire [63:0] N_22;  
wire [63:0] N_23;  
wire [63:0] N_24;  
wire [63:0] N_28;  
wire [63:0] N_37;  
wire [63:0] N_36;  
wire [63:0] N_35;  
wire [63:0] N_34;  
wire [63:0] N_33;  
wire [63:0] N_32;  
wire [63:0] N_30;  
wire [63:0] N_31;  
wire [63:0] N_29;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1428_1_1812;  
wire [63:0] N_17;  
wire [63:0] N_21;  
wire [0:0] N_GlobalEnable1_0_3344;  
wire [3:0] N_In1_0_3345;  
wire [3:0] N_In2_0_3346;  
wire [63:0] N_x_0_3347;  
wire [63:0] N_In4_0_3348;  
wire [63:0] N_In5_0_3349;  
wire [63:0] N_In6_0_3350;  
wire [63:0] N_In7_0_3351;  
wire [63:0] N_In8_0_3352;  
wire [63:0] N_In9_0_3353;  
wire [63:0] N_In10_0_3354;  
wire [63:0] N_In11_0_3355;  
wire [63:0] N_In12_0_3356;  
wire [63:0] N_In13_0_3357;  
wire [63:0] N_In14_0_3358;  
wire [63:0] N_In15_0_3359;  
wire [63:0] N_In16_0_3360;  
wire [63:0] N_In17_0_3361;  
wire [63:0] N_In18_0_3362;  
wire [63:0] N_In19_0_3363;  
wire [63:0] N_Out1_1_3364;  
wire [63:0] N_Out2_1_3365;  
wire [63:0] N_Out3_1_3366;  
wire [63:0] N_Out4_1_3367;  
wire [63:0] N_Out5_1_3368;  
wire [63:0] N_Out6_1_3369;  
wire [63:0] N_Out7_1_3370;  
wire [63:0] N_Out8_1_3371;  
wire [63:0] N_Out9_1_3372;  
wire [63:0] N_Out10_1_3373;  
wire [63:0] N_Out11_1_3374;  
wire [63:0] N_Out12_1_3375;  
wire [63:0] N_Out13_1_3376;  
wire [63:0] N_Out14_1_3377;  
wire [63:0] N_Out15_1_3378;  
wire [63:0] N_Out16_1_3379;  
wire GlobalResetSel;
assign Out16 = N_27;
assign Out15 = N_26;
assign Out14 = N_25;
assign Out13 = N_22;
assign Out12 = N_23;
assign Out11 = N_24;
assign Out10 = N_28;
assign Out9 = N_37;
assign Out8 = N_36;
assign Out7 = N_35;
assign Out6 = N_34;
assign Out5 = N_33;
assign Out4 = N_32;
assign Out3 = N_30;
assign Out2 = N_31;
assign Out1 = N_29;
  assign N_1 = In19;
  assign N_2 = In18;
  assign N_3 = In17;
  assign N_4 = In16;
  assign N_5 = In15;
  assign N_6 = In14;
  assign N_7 = In13;
  assign N_8 = In12;
  assign N_9 = In11;
  assign N_10 = In10;
  assign N_11 = In9;
  assign N_12 = In8;
  assign N_13 = In7;
  assign N_14 = In6;
  assign N_15 = In5;
  assign N_16 = In4;
  assign N_17 = x;
  assign N_18 = In2;
  assign N_19 = In1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1428_1_1812 = GlobalEnable1;
  //start Demux
assign N_29 = $unsigned(N_19[3:0])==0 ? N_20 : 0;
assign N_31 = $unsigned(N_19[3:0])==1 ? N_20 : 0;
assign N_30 = $unsigned(N_19[3:0])==2 ? N_20 : 0;
assign N_32 = $unsigned(N_19[3:0])==3 ? N_20 : 0;
assign N_33 = $unsigned(N_19[3:0])==4 ? N_20 : 0;
assign N_34 = $unsigned(N_19[3:0])==5 ? N_20 : 0;
assign N_35 = $unsigned(N_19[3:0])==6 ? N_20 : 0;
assign N_36 = $unsigned(N_19[3:0])==7 ? N_20 : 0;
assign N_37 = $unsigned(N_19[3:0])==8 ? N_20 : 0;
assign N_28 = $unsigned(N_19[3:0])==9 ? N_20 : 0;
assign N_24 = $unsigned(N_19[3:0])==10 ? N_20 : 0;
assign N_23 = $unsigned(N_19[3:0])==11 ? N_20 : 0;
assign N_22 = $unsigned(N_19[3:0])==12 ? N_20 : 0;
assign N_25 = $unsigned(N_19[3:0])==13 ? N_20 : 0;
assign N_26 = $unsigned(N_19[3:0])==14 ? N_20 : 0;
assign N_27 = $unsigned(N_19[3:0])==15 ? N_20 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [15:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_16) ;
    assign med[1] = $unsigned(N_15) ;
    assign med[2] = $unsigned(N_14) ;
    assign med[3] = $unsigned(N_13) ;
    assign med[4] = $unsigned(N_12) ;
    assign med[5] = $unsigned(N_11) ;
    assign med[6] = $unsigned(N_10) ;
    assign med[7] = $unsigned(N_9) ;
    assign med[8] = $unsigned(N_8) ;
    assign med[9] = $unsigned(N_7) ;
    assign med[10] = $unsigned(N_6) ;
    assign med[11] = $unsigned(N_5) ;
    assign med[12] = $unsigned(N_4) ;
    assign med[13] = $unsigned(N_3) ;
    assign med[14] = $unsigned(N_2) ;
    assign med[15] = $unsigned(N_1) ;

    always@(*)
    begin
      if(N_18[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_18[3:0]];
    end

    assign N_21 = tmpOut;
  end // Mux_Block
  endgenerate
    Subsystem1_Subsystem  mySubsystem (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_17),
      .a_ij(N_21),
      .Out1(N_20)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out16, // ufix64_En0
  output [63:0] Out15, // ufix64_En0
  output [63:0] Out14, // ufix64_En0
  output [63:0] Out13, // ufix64_En0
  output [63:0] Out12, // ufix64_En0
  output [63:0] Out11, // ufix64_En0
  output [63:0] Out10, // ufix64_En0
  output [63:0] Out9, // ufix64_En0
  output [63:0] Out8, // ufix64_En0
  output [63:0] Out7, // ufix64_En0
  output [63:0] Out6, // ufix64_En0
  output [63:0] Out5, // ufix64_En0
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In19, // ufix64_En0
  input [63:0] In18, // ufix64_En0
  input [63:0] In17, // ufix64_En0
  input [63:0] In16, // ufix64_En0
  input [63:0] In15, // ufix64_En0
  input [63:0] In14, // ufix64_En0
  input [63:0] In13, // ufix64_En0
  input [63:0] In12, // ufix64_En0
  input [63:0] In11, // ufix64_En0
  input [63:0] In10, // ufix64_En0
  input [63:0] In9, // ufix64_En0
  input [63:0] In8, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [3:0] In2, // ufix4_En0
  input [3:0] In1 // ufix4_En0
);
wire [3:0] N_19;  
wire [63:0] N_20;  
wire [3:0] N_18;  
wire [63:0] N_16;  
wire [63:0] N_15;  
wire [63:0] N_14;  
wire [63:0] N_13;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [63:0] N_10;  
wire [63:0] N_9;  
wire [63:0] N_8;  
wire [63:0] N_7;  
wire [63:0] N_6;  
wire [63:0] N_5;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [63:0] N_27;  
wire [63:0] N_26;  
wire [63:0] N_25;  
wire [63:0] N_22;  
wire [63:0] N_23;  
wire [63:0] N_24;  
wire [63:0] N_28;  
wire [63:0] N_37;  
wire [63:0] N_36;  
wire [63:0] N_35;  
wire [63:0] N_34;  
wire [63:0] N_33;  
wire [63:0] N_32;  
wire [63:0] N_30;  
wire [63:0] N_31;  
wire [63:0] N_29;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1442_1_1826;  
wire [63:0] N_17;  
wire [63:0] N_21;  
wire [0:0] N_GlobalEnable1_0_3511;  
wire [3:0] N_In1_0_3512;  
wire [3:0] N_In2_0_3513;  
wire [63:0] N_x_0_3514;  
wire [63:0] N_In4_0_3515;  
wire [63:0] N_In5_0_3516;  
wire [63:0] N_In6_0_3517;  
wire [63:0] N_In7_0_3518;  
wire [63:0] N_In8_0_3519;  
wire [63:0] N_In9_0_3520;  
wire [63:0] N_In10_0_3521;  
wire [63:0] N_In11_0_3522;  
wire [63:0] N_In12_0_3523;  
wire [63:0] N_In13_0_3524;  
wire [63:0] N_In14_0_3525;  
wire [63:0] N_In15_0_3526;  
wire [63:0] N_In16_0_3527;  
wire [63:0] N_In17_0_3528;  
wire [63:0] N_In18_0_3529;  
wire [63:0] N_In19_0_3530;  
wire [63:0] N_Out1_1_3531;  
wire [63:0] N_Out2_1_3532;  
wire [63:0] N_Out3_1_3533;  
wire [63:0] N_Out4_1_3534;  
wire [63:0] N_Out5_1_3535;  
wire [63:0] N_Out6_1_3536;  
wire [63:0] N_Out7_1_3537;  
wire [63:0] N_Out8_1_3538;  
wire [63:0] N_Out9_1_3539;  
wire [63:0] N_Out10_1_3540;  
wire [63:0] N_Out11_1_3541;  
wire [63:0] N_Out12_1_3542;  
wire [63:0] N_Out13_1_3543;  
wire [63:0] N_Out14_1_3544;  
wire [63:0] N_Out15_1_3545;  
wire [63:0] N_Out16_1_3546;  
wire GlobalResetSel;
assign Out16 = N_27;
assign Out15 = N_26;
assign Out14 = N_25;
assign Out13 = N_22;
assign Out12 = N_23;
assign Out11 = N_24;
assign Out10 = N_28;
assign Out9 = N_37;
assign Out8 = N_36;
assign Out7 = N_35;
assign Out6 = N_34;
assign Out5 = N_33;
assign Out4 = N_32;
assign Out3 = N_30;
assign Out2 = N_31;
assign Out1 = N_29;
  assign N_1 = In19;
  assign N_2 = In18;
  assign N_3 = In17;
  assign N_4 = In16;
  assign N_5 = In15;
  assign N_6 = In14;
  assign N_7 = In13;
  assign N_8 = In12;
  assign N_9 = In11;
  assign N_10 = In10;
  assign N_11 = In9;
  assign N_12 = In8;
  assign N_13 = In7;
  assign N_14 = In6;
  assign N_15 = In5;
  assign N_16 = In4;
  assign N_17 = x;
  assign N_18 = In2;
  assign N_19 = In1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1442_1_1826 = GlobalEnable1;
  //start Demux
assign N_29 = $unsigned(N_19[3:0])==0 ? N_20 : 0;
assign N_31 = $unsigned(N_19[3:0])==1 ? N_20 : 0;
assign N_30 = $unsigned(N_19[3:0])==2 ? N_20 : 0;
assign N_32 = $unsigned(N_19[3:0])==3 ? N_20 : 0;
assign N_33 = $unsigned(N_19[3:0])==4 ? N_20 : 0;
assign N_34 = $unsigned(N_19[3:0])==5 ? N_20 : 0;
assign N_35 = $unsigned(N_19[3:0])==6 ? N_20 : 0;
assign N_36 = $unsigned(N_19[3:0])==7 ? N_20 : 0;
assign N_37 = $unsigned(N_19[3:0])==8 ? N_20 : 0;
assign N_28 = $unsigned(N_19[3:0])==9 ? N_20 : 0;
assign N_24 = $unsigned(N_19[3:0])==10 ? N_20 : 0;
assign N_23 = $unsigned(N_19[3:0])==11 ? N_20 : 0;
assign N_22 = $unsigned(N_19[3:0])==12 ? N_20 : 0;
assign N_25 = $unsigned(N_19[3:0])==13 ? N_20 : 0;
assign N_26 = $unsigned(N_19[3:0])==14 ? N_20 : 0;
assign N_27 = $unsigned(N_19[3:0])==15 ? N_20 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [15:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_16) ;
    assign med[1] = $unsigned(N_15) ;
    assign med[2] = $unsigned(N_14) ;
    assign med[3] = $unsigned(N_13) ;
    assign med[4] = $unsigned(N_12) ;
    assign med[5] = $unsigned(N_11) ;
    assign med[6] = $unsigned(N_10) ;
    assign med[7] = $unsigned(N_9) ;
    assign med[8] = $unsigned(N_8) ;
    assign med[9] = $unsigned(N_7) ;
    assign med[10] = $unsigned(N_6) ;
    assign med[11] = $unsigned(N_5) ;
    assign med[12] = $unsigned(N_4) ;
    assign med[13] = $unsigned(N_3) ;
    assign med[14] = $unsigned(N_2) ;
    assign med[15] = $unsigned(N_1) ;

    always@(*)
    begin
      if(N_18[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_18[3:0]];
    end

    assign N_21 = tmpOut;
  end // Mux_Block
  endgenerate
    Subsystem2_Subsystem  mySubsystem (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_17),
      .a_ij(N_21),
      .Out1(N_20)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out16, // ufix64_En0
  output [63:0] Out15, // ufix64_En0
  output [63:0] Out14, // ufix64_En0
  output [63:0] Out13, // ufix64_En0
  output [63:0] Out12, // ufix64_En0
  output [63:0] Out11, // ufix64_En0
  output [63:0] Out10, // ufix64_En0
  output [63:0] Out9, // ufix64_En0
  output [63:0] Out8, // ufix64_En0
  output [63:0] Out7, // ufix64_En0
  output [63:0] Out6, // ufix64_En0
  output [63:0] Out5, // ufix64_En0
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In19, // ufix64_En0
  input [63:0] In18, // ufix64_En0
  input [63:0] In17, // ufix64_En0
  input [63:0] In16, // ufix64_En0
  input [63:0] In15, // ufix64_En0
  input [63:0] In14, // ufix64_En0
  input [63:0] In13, // ufix64_En0
  input [63:0] In12, // ufix64_En0
  input [63:0] In11, // ufix64_En0
  input [63:0] In10, // ufix64_En0
  input [63:0] In9, // ufix64_En0
  input [63:0] In8, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [3:0] In2, // ufix4_En0
  input [3:0] In1 // ufix4_En0
);
wire [3:0] N_19;  
wire [63:0] N_20;  
wire [3:0] N_18;  
wire [63:0] N_16;  
wire [63:0] N_15;  
wire [63:0] N_14;  
wire [63:0] N_13;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [63:0] N_10;  
wire [63:0] N_9;  
wire [63:0] N_8;  
wire [63:0] N_7;  
wire [63:0] N_6;  
wire [63:0] N_5;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [63:0] N_27;  
wire [63:0] N_26;  
wire [63:0] N_25;  
wire [63:0] N_22;  
wire [63:0] N_23;  
wire [63:0] N_24;  
wire [63:0] N_28;  
wire [63:0] N_37;  
wire [63:0] N_36;  
wire [63:0] N_35;  
wire [63:0] N_34;  
wire [63:0] N_33;  
wire [63:0] N_32;  
wire [63:0] N_30;  
wire [63:0] N_31;  
wire [63:0] N_29;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen1456_1_1840;  
wire [63:0] N_17;  
wire [63:0] N_21;  
wire [0:0] N_GlobalEnable1_0_3678;  
wire [3:0] N_In1_0_3679;  
wire [3:0] N_In2_0_3680;  
wire [63:0] N_x_0_3681;  
wire [63:0] N_In4_0_3682;  
wire [63:0] N_In5_0_3683;  
wire [63:0] N_In6_0_3684;  
wire [63:0] N_In7_0_3685;  
wire [63:0] N_In8_0_3686;  
wire [63:0] N_In9_0_3687;  
wire [63:0] N_In10_0_3688;  
wire [63:0] N_In11_0_3689;  
wire [63:0] N_In12_0_3690;  
wire [63:0] N_In13_0_3691;  
wire [63:0] N_In14_0_3692;  
wire [63:0] N_In15_0_3693;  
wire [63:0] N_In16_0_3694;  
wire [63:0] N_In17_0_3695;  
wire [63:0] N_In18_0_3696;  
wire [63:0] N_In19_0_3697;  
wire [63:0] N_Out1_1_3698;  
wire [63:0] N_Out2_1_3699;  
wire [63:0] N_Out3_1_3700;  
wire [63:0] N_Out4_1_3701;  
wire [63:0] N_Out5_1_3702;  
wire [63:0] N_Out6_1_3703;  
wire [63:0] N_Out7_1_3704;  
wire [63:0] N_Out8_1_3705;  
wire [63:0] N_Out9_1_3706;  
wire [63:0] N_Out10_1_3707;  
wire [63:0] N_Out11_1_3708;  
wire [63:0] N_Out12_1_3709;  
wire [63:0] N_Out13_1_3710;  
wire [63:0] N_Out14_1_3711;  
wire [63:0] N_Out15_1_3712;  
wire [63:0] N_Out16_1_3713;  
wire GlobalResetSel;
assign Out16 = N_27;
assign Out15 = N_26;
assign Out14 = N_25;
assign Out13 = N_22;
assign Out12 = N_23;
assign Out11 = N_24;
assign Out10 = N_28;
assign Out9 = N_37;
assign Out8 = N_36;
assign Out7 = N_35;
assign Out6 = N_34;
assign Out5 = N_33;
assign Out4 = N_32;
assign Out3 = N_30;
assign Out2 = N_31;
assign Out1 = N_29;
  assign N_1 = In19;
  assign N_2 = In18;
  assign N_3 = In17;
  assign N_4 = In16;
  assign N_5 = In15;
  assign N_6 = In14;
  assign N_7 = In13;
  assign N_8 = In12;
  assign N_9 = In11;
  assign N_10 = In10;
  assign N_11 = In9;
  assign N_12 = In8;
  assign N_13 = In7;
  assign N_14 = In6;
  assign N_15 = In5;
  assign N_16 = In4;
  assign N_17 = x;
  assign N_18 = In2;
  assign N_19 = In1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen1456_1_1840 = GlobalEnable1;
  //start Demux
assign N_29 = $unsigned(N_19[3:0])==0 ? N_20 : 0;
assign N_31 = $unsigned(N_19[3:0])==1 ? N_20 : 0;
assign N_30 = $unsigned(N_19[3:0])==2 ? N_20 : 0;
assign N_32 = $unsigned(N_19[3:0])==3 ? N_20 : 0;
assign N_33 = $unsigned(N_19[3:0])==4 ? N_20 : 0;
assign N_34 = $unsigned(N_19[3:0])==5 ? N_20 : 0;
assign N_35 = $unsigned(N_19[3:0])==6 ? N_20 : 0;
assign N_36 = $unsigned(N_19[3:0])==7 ? N_20 : 0;
assign N_37 = $unsigned(N_19[3:0])==8 ? N_20 : 0;
assign N_28 = $unsigned(N_19[3:0])==9 ? N_20 : 0;
assign N_24 = $unsigned(N_19[3:0])==10 ? N_20 : 0;
assign N_23 = $unsigned(N_19[3:0])==11 ? N_20 : 0;
assign N_22 = $unsigned(N_19[3:0])==12 ? N_20 : 0;
assign N_25 = $unsigned(N_19[3:0])==13 ? N_20 : 0;
assign N_26 = $unsigned(N_19[3:0])==14 ? N_20 : 0;
assign N_27 = $unsigned(N_19[3:0])==15 ? N_20 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [15:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_16) ;
    assign med[1] = $unsigned(N_15) ;
    assign med[2] = $unsigned(N_14) ;
    assign med[3] = $unsigned(N_13) ;
    assign med[4] = $unsigned(N_12) ;
    assign med[5] = $unsigned(N_11) ;
    assign med[6] = $unsigned(N_10) ;
    assign med[7] = $unsigned(N_9) ;
    assign med[8] = $unsigned(N_8) ;
    assign med[9] = $unsigned(N_7) ;
    assign med[10] = $unsigned(N_6) ;
    assign med[11] = $unsigned(N_5) ;
    assign med[12] = $unsigned(N_4) ;
    assign med[13] = $unsigned(N_3) ;
    assign med[14] = $unsigned(N_2) ;
    assign med[15] = $unsigned(N_1) ;

    always@(*)
    begin
      if(N_18[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_18[3:0]];
    end

    assign N_21 = tmpOut;
  end // Mux_Block
  endgenerate
    Subsystem3_Subsystem  mySubsystem (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_17),
      .a_ij(N_21),
      .Out1(N_20)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module Question_3 (
  input clk,
  input GlobalReset,
  input [63:0] FP_Port_In1_porty, // ufix64_En0
  input [63:0] FP_Port_In10_porty, // ufix64_En0
  input [63:0] FP_Port_In11_porty, // ufix64_En0
  input [63:0] FP_Port_In12_porty, // ufix64_En0
  input [63:0] FP_Port_In13_porty, // ufix64_En0
  input [63:0] FP_Port_In14_porty, // ufix64_En0
  input [63:0] FP_Port_In15_porty, // ufix64_En0
  input [63:0] FP_Port_In16_porty, // ufix64_En0
  input [63:0] FP_Port_In18_porty, // ufix64_En0
  input [63:0] FP_Port_In19_porty, // ufix64_En0
  input [63:0] FP_Port_In2_porty, // ufix64_En0
  input [63:0] FP_Port_In20_porty, // ufix64_En0
  input [63:0] FP_Port_In21_porty, // ufix64_En0
  input [63:0] FP_Port_In22_porty, // ufix64_En0
  input [63:0] FP_Port_In23_porty, // ufix64_En0
  input [63:0] FP_Port_In24_porty, // ufix64_En0
  input [63:0] FP_Port_In25_porty, // ufix64_En0
  input [63:0] FP_Port_In26_porty, // ufix64_En0
  input [63:0] FP_Port_In27_porty, // ufix64_En0
  input [63:0] FP_Port_In28_porty, // ufix64_En0
  input [63:0] FP_Port_In29_porty, // ufix64_En0
  input [63:0] FP_Port_In3_porty, // ufix64_En0
  input [63:0] FP_Port_In30_porty, // ufix64_En0
  input [63:0] FP_Port_In31_porty, // ufix64_En0
  input [63:0] FP_Port_In32_porty, // ufix64_En0
  input [63:0] FP_Port_In33_porty, // ufix64_En0
  input [63:0] FP_Port_In35_porty, // ufix64_En0
  input [63:0] FP_Port_In36_porty, // ufix64_En0
  input [63:0] FP_Port_In37_porty, // ufix64_En0
  input [63:0] FP_Port_In38_porty, // ufix64_En0
  input [63:0] FP_Port_In39_porty, // ufix64_En0
  input [63:0] FP_Port_In4_porty, // ufix64_En0
  input [63:0] FP_Port_In40_porty, // ufix64_En0
  input [63:0] FP_Port_In41_porty, // ufix64_En0
  input [63:0] FP_Port_In42_porty, // ufix64_En0
  input [63:0] FP_Port_In43_porty, // ufix64_En0
  input [63:0] FP_Port_In44_porty, // ufix64_En0
  input [63:0] FP_Port_In45_porty, // ufix64_En0
  input [63:0] FP_Port_In46_porty, // ufix64_En0
  input [63:0] FP_Port_In47_porty, // ufix64_En0
  input [63:0] FP_Port_In48_porty, // ufix64_En0
  input [63:0] FP_Port_In49_porty, // ufix64_En0
  input [63:0] FP_Port_In5_porty, // ufix64_En0
  input [63:0] FP_Port_In50_porty, // ufix64_En0
  input [63:0] FP_Port_In52_porty, // ufix64_En0
  input [63:0] FP_Port_In53_porty, // ufix64_En0
  input [63:0] FP_Port_In54_porty, // ufix64_En0
  input [63:0] FP_Port_In55_porty, // ufix64_En0
  input [63:0] FP_Port_In56_porty, // ufix64_En0
  input [63:0] FP_Port_In57_porty, // ufix64_En0
  input [63:0] FP_Port_In58_porty, // ufix64_En0
  input [63:0] FP_Port_In59_porty, // ufix64_En0
  input [63:0] FP_Port_In6_porty, // ufix64_En0
  input [63:0] FP_Port_In60_porty, // ufix64_En0
  input [63:0] FP_Port_In61_porty, // ufix64_En0
  input [63:0] FP_Port_In62_porty, // ufix64_En0
  input [63:0] FP_Port_In63_porty, // ufix64_En0
  input [63:0] FP_Port_In64_porty, // ufix64_En0
  input [63:0] FP_Port_In65_porty, // ufix64_En0
  input [63:0] FP_Port_In66_porty, // ufix64_En0
  input [63:0] FP_Port_In67_porty, // ufix64_En0
  input [63:0] FP_Port_In68_porty, // ufix64_En0
  input [63:0] FP_Port_In7_porty, // ufix64_En0
  input [63:0] FP_Port_In8_porty, // ufix64_En0
  input [63:0] FP_Port_In9_porty, // ufix64_En0
  output [63:0] FP_Port_Out_portx, // ufix64_En0
  output [63:0] FP_Port_Out1_portx, // ufix64_En0
  output [63:0] FP_Port_Out10_portx, // ufix64_En0
  output [63:0] FP_Port_Out11_portx, // ufix64_En0
  output [63:0] FP_Port_Out12_portx, // ufix64_En0
  output [63:0] FP_Port_Out13_portx, // ufix64_En0
  output [63:0] FP_Port_Out14_portx, // ufix64_En0
  output [63:0] FP_Port_Out15_portx, // ufix64_En0
  output [63:0] FP_Port_Out16_portx, // ufix64_En0
  output [63:0] FP_Port_Out17_portx, // ufix64_En0
  output [63:0] FP_Port_Out18_portx, // ufix64_En0
  output [63:0] FP_Port_Out19_portx, // ufix64_En0
  output [63:0] FP_Port_Out2_portx, // ufix64_En0
  output [63:0] FP_Port_Out20_portx, // ufix64_En0
  output [63:0] FP_Port_Out21_portx, // ufix64_En0
  output [63:0] FP_Port_Out22_portx, // ufix64_En0
  output [63:0] FP_Port_Out23_portx, // ufix64_En0
  output [63:0] FP_Port_Out24_portx, // ufix64_En0
  output [63:0] FP_Port_Out25_portx, // ufix64_En0
  output [63:0] FP_Port_Out26_portx, // ufix64_En0
  output [63:0] FP_Port_Out27_portx, // ufix64_En0
  output [63:0] FP_Port_Out28_portx, // ufix64_En0
  output [63:0] FP_Port_Out29_portx, // ufix64_En0
  output [63:0] FP_Port_Out3_portx, // ufix64_En0
  output [63:0] FP_Port_Out30_portx, // ufix64_En0
  output [63:0] FP_Port_Out31_portx, // ufix64_En0
  output [63:0] FP_Port_Out32_portx, // ufix64_En0
  output [63:0] FP_Port_Out33_portx, // ufix64_En0
  output [63:0] FP_Port_Out34_portx, // ufix64_En0
  output [63:0] FP_Port_Out35_portx, // ufix64_En0
  output [63:0] FP_Port_Out36_portx, // ufix64_En0
  output [63:0] FP_Port_Out37_portx, // ufix64_En0
  output [63:0] FP_Port_Out38_portx, // ufix64_En0
  output [63:0] FP_Port_Out39_portx, // ufix64_En0
  output [63:0] FP_Port_Out4_portx, // ufix64_En0
  output [63:0] FP_Port_Out40_portx, // ufix64_En0
  output [63:0] FP_Port_Out41_portx, // ufix64_En0
  output [63:0] FP_Port_Out42_portx, // ufix64_En0
  output [63:0] FP_Port_Out43_portx, // ufix64_En0
  output [63:0] FP_Port_Out44_portx, // ufix64_En0
  output [63:0] FP_Port_Out45_portx, // ufix64_En0
  output [63:0] FP_Port_Out46_portx, // ufix64_En0
  output [63:0] FP_Port_Out47_portx, // ufix64_En0
  output [63:0] FP_Port_Out48_portx, // ufix64_En0
  output [63:0] FP_Port_Out49_portx, // ufix64_En0
  output [63:0] FP_Port_Out5_portx, // ufix64_En0
  output [63:0] FP_Port_Out50_portx, // ufix64_En0
  output [63:0] FP_Port_Out51_portx, // ufix64_En0
  output [63:0] FP_Port_Out52_portx, // ufix64_En0
  output [63:0] FP_Port_Out53_portx, // ufix64_En0
  output [63:0] FP_Port_Out54_portx, // ufix64_En0
  output [63:0] FP_Port_Out55_portx, // ufix64_En0
  output [63:0] FP_Port_Out56_portx, // ufix64_En0
  output [63:0] FP_Port_Out57_portx, // ufix64_En0
  output [63:0] FP_Port_Out58_portx, // ufix64_En0
  output [63:0] FP_Port_Out59_portx, // ufix64_En0
  output [63:0] FP_Port_Out6_portx, // ufix64_En0
  output [63:0] FP_Port_Out60_portx, // ufix64_En0
  output [63:0] FP_Port_Out61_portx, // ufix64_En0
  output [63:0] FP_Port_Out62_portx, // ufix64_En0
  output [63:0] FP_Port_Out63_portx, // ufix64_En0
  output [63:0] FP_Port_Out7_portx, // ufix64_En0
  output [63:0] FP_Port_Out8_portx, // ufix64_En0
  output [63:0] FP_Port_Out9_portx // ufix64_En0
//@
);
//@

wire [63:0] FP_Port_In9_N_porty_1_1020;  
wire [63:0] FP_Port_In8_N_porty_1_1026;  
wire [63:0] FP_Port_In7_N_porty_1_1032;  
wire [63:0] FP_Port_In68_N_porty_1_1038;  
wire [63:0] FP_Port_In67_N_porty_1_1044;  
wire [63:0] FP_Port_In66_N_porty_1_1050;  
wire [63:0] FP_Port_In65_N_porty_1_1056;  
wire [63:0] FP_Port_In64_N_porty_1_1062;  
wire [63:0] FP_Port_In63_N_porty_1_1068;  
wire [63:0] FP_Port_In62_N_porty_1_1074;  
wire [63:0] FP_Port_In61_N_porty_1_1080;  
wire [63:0] FP_Port_In60_N_porty_1_1086;  
wire [63:0] FP_Port_In6_N_porty_1_1092;  
wire [63:0] FP_Port_In59_N_porty_1_1098;  
wire [63:0] FP_Port_In58_N_porty_1_1104;  
wire [63:0] FP_Port_In57_N_porty_1_1110;  
wire [63:0] FP_Port_In56_N_porty_1_1116;  
wire [63:0] FP_Port_In55_N_porty_1_1122;  
wire [63:0] FP_Port_In54_N_porty_1_1128;  
wire [63:0] FP_Port_In53_N_porty_1_1134;  
wire [63:0] FP_Port_In52_N_porty_1_1140;  
wire [63:0] FP_Port_In50_N_porty_1_1146;  
wire [63:0] FP_Port_In5_N_porty_1_1152;  
wire [63:0] FP_Port_In49_N_porty_1_1158;  
wire [63:0] FP_Port_In48_N_porty_1_1164;  
wire [63:0] FP_Port_In47_N_porty_1_1170;  
wire [63:0] FP_Port_In46_N_porty_1_1176;  
wire [63:0] FP_Port_In45_N_porty_1_1182;  
wire [63:0] FP_Port_In44_N_porty_1_1188;  
wire [63:0] FP_Port_In43_N_porty_1_1194;  
wire [63:0] FP_Port_In42_N_porty_1_1200;  
wire [63:0] FP_Port_In41_N_porty_1_1206;  
wire [63:0] FP_Port_In40_N_porty_1_1212;  
wire [63:0] FP_Port_In4_N_porty_1_1218;  
wire [63:0] FP_Port_In39_N_porty_1_1224;  
wire [63:0] FP_Port_In38_N_porty_1_1230;  
wire [63:0] FP_Port_In37_N_porty_1_1236;  
wire [63:0] FP_Port_In36_N_porty_1_1242;  
wire [63:0] FP_Port_In35_N_porty_1_1248;  
wire [63:0] FP_Port_In33_N_porty_1_1254;  
wire [63:0] FP_Port_In32_N_porty_1_1260;  
wire [63:0] FP_Port_In31_N_porty_1_1266;  
wire [63:0] FP_Port_In30_N_porty_1_1272;  
wire [63:0] FP_Port_In3_N_porty_1_1278;  
wire [63:0] FP_Port_In29_N_porty_1_1284;  
wire [63:0] FP_Port_In28_N_porty_1_1290;  
wire [63:0] FP_Port_In27_N_porty_1_1296;  
wire [63:0] FP_Port_In26_N_porty_1_1302;  
wire [63:0] FP_Port_In25_N_porty_1_1308;  
wire [63:0] FP_Port_In24_N_porty_1_1314;  
wire [63:0] FP_Port_In23_N_porty_1_1320;  
wire [63:0] FP_Port_In22_N_porty_1_1326;  
wire [63:0] FP_Port_In21_N_porty_1_1332;  
wire [63:0] FP_Port_In20_N_porty_1_1338;  
wire [63:0] FP_Port_In2_N_porty_1_1344;  
wire [63:0] FP_Port_In19_N_porty_1_1350;  
wire [63:0] FP_Port_In18_N_porty_1_1356;  
wire [63:0] FP_Port_In16_N_porty_1_1362;  
wire [63:0] FP_Port_In15_N_porty_1_1368;  
wire [63:0] FP_Port_In14_N_porty_1_1374;  
wire [63:0] FP_Port_In13_N_porty_1_1380;  
wire [63:0] FP_Port_In12_N_porty_1_1386;  
wire [63:0] FP_Port_In11_N_porty_1_1392;  
wire [63:0] FP_Port_In10_N_porty_1_1398;  
wire [63:0] FP_Port_In1_N_porty_1_1404;  
wire [0:0] GlobalEnableSignal1;  
wire [63:0] N_161;  
wire [63:0] N_162;  
wire [63:0] N_163;  
wire [63:0] N_164;  
wire [63:0] N_173;  
wire [63:0] N_172;  
wire [63:0] N_171;  
wire [63:0] N_170;  
wire [63:0] N_169;  
wire [63:0] N_168;  
wire [63:0] N_165;  
wire [63:0] N_166;  
wire [63:0] N_167;  
wire [63:0] N_176;  
wire [63:0] N_175;  
wire [63:0] N_174;  
wire [63:0] N_113;  
wire [63:0] N_114;  
wire [63:0] N_115;  
wire [63:0] N_116;  
wire [63:0] N_125;  
wire [63:0] N_124;  
wire [63:0] N_123;  
wire [63:0] N_122;  
wire [63:0] N_121;  
wire [63:0] N_120;  
wire [63:0] N_117;  
wire [63:0] N_118;  
wire [63:0] N_119;  
wire [63:0] N_128;  
wire [63:0] N_127;  
wire [63:0] N_126;  
wire [63:0] N_65;  
wire [63:0] N_66;  
wire [63:0] N_67;  
wire [63:0] N_68;  
wire [63:0] N_77;  
wire [63:0] N_76;  
wire [63:0] N_75;  
wire [63:0] N_74;  
wire [63:0] N_73;  
wire [63:0] N_72;  
wire [63:0] N_69;  
wire [63:0] N_70;  
wire [63:0] N_71;  
wire [63:0] N_80;  
wire [63:0] N_79;  
wire [63:0] N_78;  
wire [63:0] N_17;  
wire [63:0] N_18;  
wire [63:0] N_19;  
wire [63:0] N_20;  
wire [63:0] N_29;  
wire [63:0] N_28;  
wire [63:0] N_27;  
wire [63:0] N_26;  
wire [63:0] N_25;  
wire [63:0] N_24;  
wire [63:0] N_21;  
wire [63:0] N_22;  
wire [63:0] N_23;  
wire [63:0] N_32;  
wire [63:0] N_31;  
wire [63:0] N_30;  
wire [3:0] N_193;  
wire [3:0] N_194;  
wire [63:0] FP_Port_Out9_N_portx_1_1731;  
wire [63:0] FP_Port_Out8_N_portx_1_1730;  
wire [63:0] FP_Port_Out7_N_portx_1_1729;  
wire [63:0] FP_Port_Out63_N_portx_1_1728;  
wire [63:0] FP_Port_Out62_N_portx_1_1727;  
wire [63:0] FP_Port_Out61_N_portx_1_1726;  
wire [63:0] FP_Port_Out60_N_portx_1_1725;  
wire [63:0] FP_Port_Out6_N_portx_1_1724;  
wire [63:0] FP_Port_Out59_N_portx_1_1723;  
wire [63:0] FP_Port_Out58_N_portx_1_1722;  
wire [63:0] FP_Port_Out57_N_portx_1_1721;  
wire [63:0] FP_Port_Out56_N_portx_1_1720;  
wire [63:0] FP_Port_Out55_N_portx_1_1719;  
wire [63:0] FP_Port_Out54_N_portx_1_1718;  
wire [63:0] FP_Port_Out53_N_portx_1_1717;  
wire [63:0] FP_Port_Out52_N_portx_1_1716;  
wire [63:0] FP_Port_Out51_N_portx_1_1715;  
wire [63:0] FP_Port_Out50_N_portx_1_1714;  
wire [63:0] FP_Port_Out5_N_portx_1_1713;  
wire [63:0] FP_Port_Out49_N_portx_1_1712;  
wire [63:0] FP_Port_Out48_N_portx_1_1711;  
wire [63:0] FP_Port_Out47_N_portx_1_1710;  
wire [63:0] FP_Port_Out46_N_portx_1_1709;  
wire [63:0] FP_Port_Out45_N_portx_1_1708;  
wire [63:0] FP_Port_Out44_N_portx_1_1707;  
wire [63:0] FP_Port_Out43_N_portx_1_1706;  
wire [63:0] FP_Port_Out42_N_portx_1_1705;  
wire [63:0] FP_Port_Out41_N_portx_1_1704;  
wire [63:0] FP_Port_Out40_N_portx_1_1703;  
wire [63:0] FP_Port_Out4_N_portx_1_1702;  
wire [63:0] FP_Port_Out39_N_portx_1_1701;  
wire [63:0] FP_Port_Out38_N_portx_1_1700;  
wire [63:0] FP_Port_Out37_N_portx_1_1699;  
wire [63:0] FP_Port_Out36_N_portx_1_1698;  
wire [63:0] FP_Port_Out35_N_portx_1_1697;  
wire [63:0] FP_Port_Out34_N_portx_1_1696;  
wire [63:0] FP_Port_Out33_N_portx_1_1695;  
wire [63:0] FP_Port_Out32_N_portx_1_1694;  
wire [63:0] FP_Port_Out31_N_portx_1_1693;  
wire [63:0] FP_Port_Out30_N_portx_1_1692;  
wire [63:0] FP_Port_Out3_N_portx_1_1691;  
wire [63:0] FP_Port_Out29_N_portx_1_1690;  
wire [63:0] FP_Port_Out28_N_portx_1_1689;  
wire [63:0] FP_Port_Out27_N_portx_1_1688;  
wire [63:0] FP_Port_Out26_N_portx_1_1687;  
wire [63:0] FP_Port_Out25_N_portx_1_1686;  
wire [63:0] FP_Port_Out24_N_portx_1_1685;  
wire [63:0] FP_Port_Out23_N_portx_1_1684;  
wire [63:0] FP_Port_Out22_N_portx_1_1683;  
wire [63:0] FP_Port_Out21_N_portx_1_1682;  
wire [63:0] FP_Port_Out20_N_portx_1_1681;  
wire [63:0] FP_Port_Out2_N_portx_1_1680;  
wire [63:0] FP_Port_Out19_N_portx_1_1679;  
wire [63:0] FP_Port_Out18_N_portx_1_1678;  
wire [63:0] FP_Port_Out17_N_portx_1_1677;  
wire [63:0] FP_Port_Out16_N_portx_1_1676;  
wire [63:0] FP_Port_Out15_N_portx_1_1675;  
wire [63:0] FP_Port_Out14_N_portx_1_1674;  
wire [63:0] FP_Port_Out13_N_portx_1_1673;  
wire [63:0] FP_Port_Out12_N_portx_1_1672;  
wire [63:0] FP_Port_Out11_N_portx_1_1671;  
wire [63:0] FP_Port_Out10_N_portx_1_1670;  
wire [63:0] FP_Port_Out1_N_portx_1_1669;  
wire [63:0] FP_Port_Out_N_portx_1_1668;  
wire [63:0] N_41;  
wire [63:0] N_40;  
wire [63:0] N_39;  
wire [63:0] N_192;  
wire [63:0] N_191;  
wire [63:0] N_190;  
wire [63:0] N_189;  
wire [63:0] N_195;  
wire [63:0] N_188;  
wire [63:0] N_187;  
wire [63:0] N_186;  
wire [63:0] N_185;  
wire [63:0] N_38;  
wire [63:0] N_184;  
wire [63:0] N_183;  
wire [63:0] N_182;  
wire [63:0] N_181;  
wire [63:0] N_180;  
wire [63:0] N_179;  
wire [63:0] N_178;  
wire [63:0] N_177;  
wire [63:0] N_144;  
wire [63:0] N_37;  
wire [63:0] N_143;  
wire [63:0] N_142;  
wire [63:0] N_141;  
wire [63:0] N_140;  
wire [63:0] N_139;  
wire [63:0] N_138;  
wire [63:0] N_137;  
wire [63:0] N_136;  
wire [63:0] N_135;  
wire [63:0] N_134;  
wire [63:0] N_36;  
wire [63:0] N_133;  
wire [63:0] N_132;  
wire [63:0] N_131;  
wire [63:0] N_130;  
wire [63:0] N_129;  
wire [63:0] N_96;  
wire [63:0] N_95;  
wire [63:0] N_94;  
wire [63:0] N_93;  
wire [63:0] N_35;  
wire [63:0] N_92;  
wire [63:0] N_91;  
wire [63:0] N_90;  
wire [63:0] N_89;  
wire [63:0] N_88;  
wire [63:0] N_87;  
wire [63:0] N_86;  
wire [63:0] N_85;  
wire [63:0] N_84;  
wire [63:0] N_83;  
wire [63:0] N_34;  
wire [63:0] N_82;  
wire [63:0] N_81;  
wire [63:0] N_48;  
wire [63:0] N_47;  
wire [63:0] N_46;  
wire [63:0] N_45;  
wire [63:0] N_44;  
wire [63:0] N_43;  
wire [63:0] N_42;  
wire [63:0] N_33;  
wire GlobalResetSel;
  wire GlobalEnable1;
  assign GlobalEnable1 = 1;
    FP_Port_In1  myFP_Port_In1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In1_N_porty_1_1404),
      .y(N_33)    );
    FP_Port_In1  myFP_Port_In10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In10_N_porty_1_1398),
      .y(N_42)    );
    FP_Port_In1  myFP_Port_In11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In11_N_porty_1_1392),
      .y(N_43)    );
    FP_Port_In1  myFP_Port_In12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In12_N_porty_1_1386),
      .y(N_44)    );
    FP_Port_In1  myFP_Port_In13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In13_N_porty_1_1380),
      .y(N_45)    );
    FP_Port_In1  myFP_Port_In14 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In14_N_porty_1_1374),
      .y(N_46)    );
    FP_Port_In1  myFP_Port_In15 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In15_N_porty_1_1368),
      .y(N_47)    );
    FP_Port_In1  myFP_Port_In16 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In16_N_porty_1_1362),
      .y(N_48)    );
    FP_Port_In1  myFP_Port_In18 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In18_N_porty_1_1356),
      .y(N_81)    );
    FP_Port_In1  myFP_Port_In19 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In19_N_porty_1_1350),
      .y(N_82)    );
    FP_Port_In1  myFP_Port_In2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In2_N_porty_1_1344),
      .y(N_34)    );
    FP_Port_In1  myFP_Port_In20 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In20_N_porty_1_1338),
      .y(N_83)    );
    FP_Port_In1  myFP_Port_In21 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In21_N_porty_1_1332),
      .y(N_84)    );
    FP_Port_In1  myFP_Port_In22 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In22_N_porty_1_1326),
      .y(N_85)    );
    FP_Port_In1  myFP_Port_In23 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In23_N_porty_1_1320),
      .y(N_86)    );
    FP_Port_In1  myFP_Port_In24 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In24_N_porty_1_1314),
      .y(N_87)    );
    FP_Port_In1  myFP_Port_In25 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In25_N_porty_1_1308),
      .y(N_88)    );
    FP_Port_In1  myFP_Port_In26 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In26_N_porty_1_1302),
      .y(N_89)    );
    FP_Port_In1  myFP_Port_In27 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In27_N_porty_1_1296),
      .y(N_90)    );
    FP_Port_In1  myFP_Port_In28 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In28_N_porty_1_1290),
      .y(N_91)    );
    FP_Port_In1  myFP_Port_In29 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In29_N_porty_1_1284),
      .y(N_92)    );
    FP_Port_In1  myFP_Port_In3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In3_N_porty_1_1278),
      .y(N_35)    );
    FP_Port_In1  myFP_Port_In30 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In30_N_porty_1_1272),
      .y(N_93)    );
    FP_Port_In1  myFP_Port_In31 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In31_N_porty_1_1266),
      .y(N_94)    );
    FP_Port_In1  myFP_Port_In32 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In32_N_porty_1_1260),
      .y(N_95)    );
    FP_Port_In1  myFP_Port_In33 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In33_N_porty_1_1254),
      .y(N_96)    );
    FP_Port_In1  myFP_Port_In35 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In35_N_porty_1_1248),
      .y(N_129)    );
    FP_Port_In1  myFP_Port_In36 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In36_N_porty_1_1242),
      .y(N_130)    );
    FP_Port_In1  myFP_Port_In37 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In37_N_porty_1_1236),
      .y(N_131)    );
    FP_Port_In1  myFP_Port_In38 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In38_N_porty_1_1230),
      .y(N_132)    );
    FP_Port_In1  myFP_Port_In39 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In39_N_porty_1_1224),
      .y(N_133)    );
    FP_Port_In1  myFP_Port_In4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In4_N_porty_1_1218),
      .y(N_36)    );
    FP_Port_In1  myFP_Port_In40 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In40_N_porty_1_1212),
      .y(N_134)    );
    FP_Port_In1  myFP_Port_In41 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In41_N_porty_1_1206),
      .y(N_135)    );
    FP_Port_In1  myFP_Port_In42 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In42_N_porty_1_1200),
      .y(N_136)    );
    FP_Port_In1  myFP_Port_In43 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In43_N_porty_1_1194),
      .y(N_137)    );
    FP_Port_In1  myFP_Port_In44 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In44_N_porty_1_1188),
      .y(N_138)    );
    FP_Port_In1  myFP_Port_In45 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In45_N_porty_1_1182),
      .y(N_139)    );
    FP_Port_In1  myFP_Port_In46 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In46_N_porty_1_1176),
      .y(N_140)    );
    FP_Port_In1  myFP_Port_In47 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In47_N_porty_1_1170),
      .y(N_141)    );
    FP_Port_In1  myFP_Port_In48 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In48_N_porty_1_1164),
      .y(N_142)    );
    FP_Port_In1  myFP_Port_In49 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In49_N_porty_1_1158),
      .y(N_143)    );
    FP_Port_In1  myFP_Port_In5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In5_N_porty_1_1152),
      .y(N_37)    );
    FP_Port_In1  myFP_Port_In50 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In50_N_porty_1_1146),
      .y(N_144)    );
    FP_Port_In1  myFP_Port_In52 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In52_N_porty_1_1140),
      .y(N_177)    );
    FP_Port_In1  myFP_Port_In53 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In53_N_porty_1_1134),
      .y(N_178)    );
    FP_Port_In1  myFP_Port_In54 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In54_N_porty_1_1128),
      .y(N_179)    );
    FP_Port_In1  myFP_Port_In55 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In55_N_porty_1_1122),
      .y(N_180)    );
    FP_Port_In1  myFP_Port_In56 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In56_N_porty_1_1116),
      .y(N_181)    );
    FP_Port_In1  myFP_Port_In57 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In57_N_porty_1_1110),
      .y(N_182)    );
    FP_Port_In1  myFP_Port_In58 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In58_N_porty_1_1104),
      .y(N_183)    );
    FP_Port_In1  myFP_Port_In59 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In59_N_porty_1_1098),
      .y(N_184)    );
    FP_Port_In1  myFP_Port_In6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In6_N_porty_1_1092),
      .y(N_38)    );
    FP_Port_In1  myFP_Port_In60 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In60_N_porty_1_1086),
      .y(N_185)    );
    FP_Port_In1  myFP_Port_In61 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In61_N_porty_1_1080),
      .y(N_186)    );
    FP_Port_In1  myFP_Port_In62 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In62_N_porty_1_1074),
      .y(N_187)    );
    FP_Port_In1  myFP_Port_In63 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In63_N_porty_1_1068),
      .y(N_188)    );
    FP_Port_In1  myFP_Port_In64 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In64_N_porty_1_1062),
      .y(N_195)    );
    FP_Port_In1  myFP_Port_In65 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In65_N_porty_1_1056),
      .y(N_189)    );
    FP_Port_In1  myFP_Port_In66 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In66_N_porty_1_1050),
      .y(N_190)    );
    FP_Port_In1  myFP_Port_In67 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In67_N_porty_1_1044),
      .y(N_191)    );
    FP_Port_In1  myFP_Port_In68 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In68_N_porty_1_1038),
      .y(N_192)    );
    FP_Port_In1  myFP_Port_In7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In7_N_porty_1_1032),
      .y(N_39)    );
    FP_Port_In1  myFP_Port_In8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In8_N_porty_1_1026),
      .y(N_40)    );
    FP_Port_In1  myFP_Port_In9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In9_N_porty_1_1020),
      .y(N_41)    );
    FP_Port_Out  myFP_Port_Out (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_17),
      .portx(FP_Port_Out_N_portx_1_1668)    );
    FP_Port_Out  myFP_Port_Out1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_18),
      .portx(FP_Port_Out1_N_portx_1_1669)    );
    FP_Port_Out  myFP_Port_Out10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_21),
      .portx(FP_Port_Out10_N_portx_1_1670)    );
    FP_Port_Out  myFP_Port_Out11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_22),
      .portx(FP_Port_Out11_N_portx_1_1671)    );
    FP_Port_Out  myFP_Port_Out12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_23),
      .portx(FP_Port_Out12_N_portx_1_1672)    );
    FP_Port_Out  myFP_Port_Out13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_32),
      .portx(FP_Port_Out13_N_portx_1_1673)    );
    FP_Port_Out  myFP_Port_Out14 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_31),
      .portx(FP_Port_Out14_N_portx_1_1674)    );
    FP_Port_Out  myFP_Port_Out15 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_30),
      .portx(FP_Port_Out15_N_portx_1_1675)    );
    FP_Port_Out  myFP_Port_Out16 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_65),
      .portx(FP_Port_Out16_N_portx_1_1676)    );
    FP_Port_Out  myFP_Port_Out17 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_66),
      .portx(FP_Port_Out17_N_portx_1_1677)    );
    FP_Port_Out  myFP_Port_Out18 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_67),
      .portx(FP_Port_Out18_N_portx_1_1678)    );
    FP_Port_Out  myFP_Port_Out19 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_68),
      .portx(FP_Port_Out19_N_portx_1_1679)    );
    FP_Port_Out  myFP_Port_Out2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_19),
      .portx(FP_Port_Out2_N_portx_1_1680)    );
    FP_Port_Out  myFP_Port_Out20 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_77),
      .portx(FP_Port_Out20_N_portx_1_1681)    );
    FP_Port_Out  myFP_Port_Out21 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .portx(FP_Port_Out21_N_portx_1_1682)    );
    FP_Port_Out  myFP_Port_Out22 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_75),
      .portx(FP_Port_Out22_N_portx_1_1683)    );
    FP_Port_Out  myFP_Port_Out23 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_74),
      .portx(FP_Port_Out23_N_portx_1_1684)    );
    FP_Port_Out  myFP_Port_Out24 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_73),
      .portx(FP_Port_Out24_N_portx_1_1685)    );
    FP_Port_Out  myFP_Port_Out25 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_72),
      .portx(FP_Port_Out25_N_portx_1_1686)    );
    FP_Port_Out  myFP_Port_Out26 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_69),
      .portx(FP_Port_Out26_N_portx_1_1687)    );
    FP_Port_Out  myFP_Port_Out27 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_70),
      .portx(FP_Port_Out27_N_portx_1_1688)    );
    FP_Port_Out  myFP_Port_Out28 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_71),
      .portx(FP_Port_Out28_N_portx_1_1689)    );
    FP_Port_Out  myFP_Port_Out29 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_80),
      .portx(FP_Port_Out29_N_portx_1_1690)    );
    FP_Port_Out  myFP_Port_Out3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_20),
      .portx(FP_Port_Out3_N_portx_1_1691)    );
    FP_Port_Out  myFP_Port_Out30 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_79),
      .portx(FP_Port_Out30_N_portx_1_1692)    );
    FP_Port_Out  myFP_Port_Out31 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_78),
      .portx(FP_Port_Out31_N_portx_1_1693)    );
    FP_Port_Out  myFP_Port_Out32 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_113),
      .portx(FP_Port_Out32_N_portx_1_1694)    );
    FP_Port_Out  myFP_Port_Out33 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_114),
      .portx(FP_Port_Out33_N_portx_1_1695)    );
    FP_Port_Out  myFP_Port_Out34 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_115),
      .portx(FP_Port_Out34_N_portx_1_1696)    );
    FP_Port_Out  myFP_Port_Out35 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_116),
      .portx(FP_Port_Out35_N_portx_1_1697)    );
    FP_Port_Out  myFP_Port_Out36 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_125),
      .portx(FP_Port_Out36_N_portx_1_1698)    );
    FP_Port_Out  myFP_Port_Out37 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_124),
      .portx(FP_Port_Out37_N_portx_1_1699)    );
    FP_Port_Out  myFP_Port_Out38 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_123),
      .portx(FP_Port_Out38_N_portx_1_1700)    );
    FP_Port_Out  myFP_Port_Out39 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_122),
      .portx(FP_Port_Out39_N_portx_1_1701)    );
    FP_Port_Out  myFP_Port_Out4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_29),
      .portx(FP_Port_Out4_N_portx_1_1702)    );
    FP_Port_Out  myFP_Port_Out40 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_121),
      .portx(FP_Port_Out40_N_portx_1_1703)    );
    FP_Port_Out  myFP_Port_Out41 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_120),
      .portx(FP_Port_Out41_N_portx_1_1704)    );
    FP_Port_Out  myFP_Port_Out42 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_117),
      .portx(FP_Port_Out42_N_portx_1_1705)    );
    FP_Port_Out  myFP_Port_Out43 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_118),
      .portx(FP_Port_Out43_N_portx_1_1706)    );
    FP_Port_Out  myFP_Port_Out44 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_119),
      .portx(FP_Port_Out44_N_portx_1_1707)    );
    FP_Port_Out  myFP_Port_Out45 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_128),
      .portx(FP_Port_Out45_N_portx_1_1708)    );
    FP_Port_Out  myFP_Port_Out46 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_127),
      .portx(FP_Port_Out46_N_portx_1_1709)    );
    FP_Port_Out  myFP_Port_Out47 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_126),
      .portx(FP_Port_Out47_N_portx_1_1710)    );
    FP_Port_Out  myFP_Port_Out48 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_161),
      .portx(FP_Port_Out48_N_portx_1_1711)    );
    FP_Port_Out  myFP_Port_Out49 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_162),
      .portx(FP_Port_Out49_N_portx_1_1712)    );
    FP_Port_Out  myFP_Port_Out5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_28),
      .portx(FP_Port_Out5_N_portx_1_1713)    );
    FP_Port_Out  myFP_Port_Out50 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_163),
      .portx(FP_Port_Out50_N_portx_1_1714)    );
    FP_Port_Out  myFP_Port_Out51 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_164),
      .portx(FP_Port_Out51_N_portx_1_1715)    );
    FP_Port_Out  myFP_Port_Out52 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_173),
      .portx(FP_Port_Out52_N_portx_1_1716)    );
    FP_Port_Out  myFP_Port_Out53 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_172),
      .portx(FP_Port_Out53_N_portx_1_1717)    );
    FP_Port_Out  myFP_Port_Out54 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_171),
      .portx(FP_Port_Out54_N_portx_1_1718)    );
    FP_Port_Out  myFP_Port_Out55 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_170),
      .portx(FP_Port_Out55_N_portx_1_1719)    );
    FP_Port_Out  myFP_Port_Out56 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_169),
      .portx(FP_Port_Out56_N_portx_1_1720)    );
    FP_Port_Out  myFP_Port_Out57 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_168),
      .portx(FP_Port_Out57_N_portx_1_1721)    );
    FP_Port_Out  myFP_Port_Out58 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_165),
      .portx(FP_Port_Out58_N_portx_1_1722)    );
    FP_Port_Out  myFP_Port_Out59 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_166),
      .portx(FP_Port_Out59_N_portx_1_1723)    );
    FP_Port_Out  myFP_Port_Out6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_27),
      .portx(FP_Port_Out6_N_portx_1_1724)    );
    FP_Port_Out  myFP_Port_Out60 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_167),
      .portx(FP_Port_Out60_N_portx_1_1725)    );
    FP_Port_Out  myFP_Port_Out61 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_176),
      .portx(FP_Port_Out61_N_portx_1_1726)    );
    FP_Port_Out  myFP_Port_Out62 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_175),
      .portx(FP_Port_Out62_N_portx_1_1727)    );
    FP_Port_Out  myFP_Port_Out63 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_174),
      .portx(FP_Port_Out63_N_portx_1_1728)    );
    FP_Port_Out  myFP_Port_Out7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_26),
      .portx(FP_Port_Out7_N_portx_1_1729)    );
    FP_Port_Out  myFP_Port_Out8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_25),
      .portx(FP_Port_Out8_N_portx_1_1730)    );
    FP_Port_Out  myFP_Port_Out9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_24),
      .portx(FP_Port_Out9_N_portx_1_1731)    );
    Sequence  mySequence (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_194)    );
    Sequence1  mySequence1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_193)    );
    Subsystem  mySubsystem (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .In2(N_194),
      .x(N_195),
      .In4(N_33),
      .In5(N_34),
      .In6(N_35),
      .In7(N_36),
      .In8(N_37),
      .In9(N_38),
      .In10(N_39),
      .In11(N_40),
      .In12(N_41),
      .In13(N_42),
      .In14(N_43),
      .In15(N_44),
      .In16(N_45),
      .In17(N_46),
      .In18(N_47),
      .In19(N_48),
      .Out1(N_17) ,
      .Out2(N_18) ,
      .Out3(N_19) ,
      .Out4(N_20) ,
      .Out5(N_29) ,
      .Out6(N_28) ,
      .Out7(N_27) ,
      .Out8(N_26) ,
      .Out9(N_25) ,
      .Out10(N_24) ,
      .Out11(N_21) ,
      .Out12(N_22) ,
      .Out13(N_23) ,
      .Out14(N_32) ,
      .Out15(N_31) ,
      .Out16(N_30)    );
    Subsystem1  mySubsystem1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .In2(N_194),
      .x(N_195),
      .In4(N_81),
      .In5(N_82),
      .In6(N_83),
      .In7(N_84),
      .In8(N_85),
      .In9(N_86),
      .In10(N_87),
      .In11(N_88),
      .In12(N_89),
      .In13(N_90),
      .In14(N_91),
      .In15(N_92),
      .In16(N_93),
      .In17(N_94),
      .In18(N_95),
      .In19(N_96),
      .Out1(N_65) ,
      .Out2(N_66) ,
      .Out3(N_67) ,
      .Out4(N_68) ,
      .Out5(N_77) ,
      .Out6(N_76) ,
      .Out7(N_75) ,
      .Out8(N_74) ,
      .Out9(N_73) ,
      .Out10(N_72) ,
      .Out11(N_69) ,
      .Out12(N_70) ,
      .Out13(N_71) ,
      .Out14(N_80) ,
      .Out15(N_79) ,
      .Out16(N_78)    );
    Subsystem2  mySubsystem2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .In2(N_194),
      .x(N_195),
      .In4(N_129),
      .In5(N_130),
      .In6(N_131),
      .In7(N_132),
      .In8(N_133),
      .In9(N_134),
      .In10(N_135),
      .In11(N_136),
      .In12(N_137),
      .In13(N_138),
      .In14(N_139),
      .In15(N_140),
      .In16(N_141),
      .In17(N_142),
      .In18(N_143),
      .In19(N_144),
      .Out1(N_113) ,
      .Out2(N_114) ,
      .Out3(N_115) ,
      .Out4(N_116) ,
      .Out5(N_125) ,
      .Out6(N_124) ,
      .Out7(N_123) ,
      .Out8(N_122) ,
      .Out9(N_121) ,
      .Out10(N_120) ,
      .Out11(N_117) ,
      .Out12(N_118) ,
      .Out13(N_119) ,
      .Out14(N_128) ,
      .Out15(N_127) ,
      .Out16(N_126)    );
    Subsystem3  mySubsystem3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .In2(N_194),
      .x(N_195),
      .In4(N_177),
      .In5(N_178),
      .In6(N_179),
      .In7(N_180),
      .In8(N_181),
      .In9(N_182),
      .In10(N_183),
      .In11(N_184),
      .In12(N_185),
      .In13(N_186),
      .In14(N_187),
      .In15(N_188),
      .In16(N_189),
      .In17(N_190),
      .In18(N_191),
      .In19(N_192),
      .Out1(N_161) ,
      .Out2(N_162) ,
      .Out3(N_163) ,
      .Out4(N_164) ,
      .Out5(N_173) ,
      .Out6(N_172) ,
      .Out7(N_171) ,
      .Out8(N_170) ,
      .Out9(N_169) ,
      .Out10(N_168) ,
      .Out11(N_165) ,
      .Out12(N_166) ,
      .Out13(N_167) ,
      .Out14(N_176) ,
      .Out15(N_175) ,
      .Out16(N_174)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
  generate
  begin: FP_Port_In1_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In1_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In1_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In1_N_porty_1_1404 = out_tmp;
  end // FP_Port_In1_porty_Block
  endgenerate
  generate
  begin: FP_Port_In10_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In10_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In10_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In10_N_porty_1_1398 = out_tmp;
  end // FP_Port_In10_porty_Block
  endgenerate
  generate
  begin: FP_Port_In11_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In11_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In11_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In11_N_porty_1_1392 = out_tmp;
  end // FP_Port_In11_porty_Block
  endgenerate
  generate
  begin: FP_Port_In12_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In12_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In12_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In12_N_porty_1_1386 = out_tmp;
  end // FP_Port_In12_porty_Block
  endgenerate
  generate
  begin: FP_Port_In13_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In13_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In13_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In13_N_porty_1_1380 = out_tmp;
  end // FP_Port_In13_porty_Block
  endgenerate
  generate
  begin: FP_Port_In14_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In14_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In14_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In14_N_porty_1_1374 = out_tmp;
  end // FP_Port_In14_porty_Block
  endgenerate
  generate
  begin: FP_Port_In15_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In15_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In15_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In15_N_porty_1_1368 = out_tmp;
  end // FP_Port_In15_porty_Block
  endgenerate
  generate
  begin: FP_Port_In16_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In16_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In16_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In16_N_porty_1_1362 = out_tmp;
  end // FP_Port_In16_porty_Block
  endgenerate
  generate
  begin: FP_Port_In18_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In18_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In18_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In18_N_porty_1_1356 = out_tmp;
  end // FP_Port_In18_porty_Block
  endgenerate
  generate
  begin: FP_Port_In19_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In19_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In19_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In19_N_porty_1_1350 = out_tmp;
  end // FP_Port_In19_porty_Block
  endgenerate
  generate
  begin: FP_Port_In2_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In2_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In2_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In2_N_porty_1_1344 = out_tmp;
  end // FP_Port_In2_porty_Block
  endgenerate
  generate
  begin: FP_Port_In20_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In20_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In20_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In20_N_porty_1_1338 = out_tmp;
  end // FP_Port_In20_porty_Block
  endgenerate
  generate
  begin: FP_Port_In21_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In21_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In21_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In21_N_porty_1_1332 = out_tmp;
  end // FP_Port_In21_porty_Block
  endgenerate
  generate
  begin: FP_Port_In22_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In22_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In22_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In22_N_porty_1_1326 = out_tmp;
  end // FP_Port_In22_porty_Block
  endgenerate
  generate
  begin: FP_Port_In23_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In23_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In23_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In23_N_porty_1_1320 = out_tmp;
  end // FP_Port_In23_porty_Block
  endgenerate
  generate
  begin: FP_Port_In24_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In24_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In24_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In24_N_porty_1_1314 = out_tmp;
  end // FP_Port_In24_porty_Block
  endgenerate
  generate
  begin: FP_Port_In25_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In25_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In25_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In25_N_porty_1_1308 = out_tmp;
  end // FP_Port_In25_porty_Block
  endgenerate
  generate
  begin: FP_Port_In26_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In26_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In26_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In26_N_porty_1_1302 = out_tmp;
  end // FP_Port_In26_porty_Block
  endgenerate
  generate
  begin: FP_Port_In27_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In27_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In27_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In27_N_porty_1_1296 = out_tmp;
  end // FP_Port_In27_porty_Block
  endgenerate
  generate
  begin: FP_Port_In28_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In28_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In28_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In28_N_porty_1_1290 = out_tmp;
  end // FP_Port_In28_porty_Block
  endgenerate
  generate
  begin: FP_Port_In29_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In29_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In29_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In29_N_porty_1_1284 = out_tmp;
  end // FP_Port_In29_porty_Block
  endgenerate
  generate
  begin: FP_Port_In3_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In3_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In3_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In3_N_porty_1_1278 = out_tmp;
  end // FP_Port_In3_porty_Block
  endgenerate
  generate
  begin: FP_Port_In30_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In30_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In30_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In30_N_porty_1_1272 = out_tmp;
  end // FP_Port_In30_porty_Block
  endgenerate
  generate
  begin: FP_Port_In31_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In31_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In31_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In31_N_porty_1_1266 = out_tmp;
  end // FP_Port_In31_porty_Block
  endgenerate
  generate
  begin: FP_Port_In32_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In32_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In32_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In32_N_porty_1_1260 = out_tmp;
  end // FP_Port_In32_porty_Block
  endgenerate
  generate
  begin: FP_Port_In33_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In33_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In33_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In33_N_porty_1_1254 = out_tmp;
  end // FP_Port_In33_porty_Block
  endgenerate
  generate
  begin: FP_Port_In35_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In35_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In35_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In35_N_porty_1_1248 = out_tmp;
  end // FP_Port_In35_porty_Block
  endgenerate
  generate
  begin: FP_Port_In36_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In36_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In36_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In36_N_porty_1_1242 = out_tmp;
  end // FP_Port_In36_porty_Block
  endgenerate
  generate
  begin: FP_Port_In37_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In37_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In37_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In37_N_porty_1_1236 = out_tmp;
  end // FP_Port_In37_porty_Block
  endgenerate
  generate
  begin: FP_Port_In38_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In38_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In38_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In38_N_porty_1_1230 = out_tmp;
  end // FP_Port_In38_porty_Block
  endgenerate
  generate
  begin: FP_Port_In39_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In39_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In39_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In39_N_porty_1_1224 = out_tmp;
  end // FP_Port_In39_porty_Block
  endgenerate
  generate
  begin: FP_Port_In4_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In4_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In4_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In4_N_porty_1_1218 = out_tmp;
  end // FP_Port_In4_porty_Block
  endgenerate
  generate
  begin: FP_Port_In40_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In40_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In40_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In40_N_porty_1_1212 = out_tmp;
  end // FP_Port_In40_porty_Block
  endgenerate
  generate
  begin: FP_Port_In41_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In41_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In41_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In41_N_porty_1_1206 = out_tmp;
  end // FP_Port_In41_porty_Block
  endgenerate
  generate
  begin: FP_Port_In42_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In42_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In42_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In42_N_porty_1_1200 = out_tmp;
  end // FP_Port_In42_porty_Block
  endgenerate
  generate
  begin: FP_Port_In43_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In43_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In43_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In43_N_porty_1_1194 = out_tmp;
  end // FP_Port_In43_porty_Block
  endgenerate
  generate
  begin: FP_Port_In44_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In44_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In44_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In44_N_porty_1_1188 = out_tmp;
  end // FP_Port_In44_porty_Block
  endgenerate
  generate
  begin: FP_Port_In45_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In45_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In45_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In45_N_porty_1_1182 = out_tmp;
  end // FP_Port_In45_porty_Block
  endgenerate
  generate
  begin: FP_Port_In46_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In46_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In46_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In46_N_porty_1_1176 = out_tmp;
  end // FP_Port_In46_porty_Block
  endgenerate
  generate
  begin: FP_Port_In47_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In47_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In47_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In47_N_porty_1_1170 = out_tmp;
  end // FP_Port_In47_porty_Block
  endgenerate
  generate
  begin: FP_Port_In48_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In48_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In48_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In48_N_porty_1_1164 = out_tmp;
  end // FP_Port_In48_porty_Block
  endgenerate
  generate
  begin: FP_Port_In49_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In49_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In49_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In49_N_porty_1_1158 = out_tmp;
  end // FP_Port_In49_porty_Block
  endgenerate
  generate
  begin: FP_Port_In5_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In5_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In5_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In5_N_porty_1_1152 = out_tmp;
  end // FP_Port_In5_porty_Block
  endgenerate
  generate
  begin: FP_Port_In50_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In50_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In50_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In50_N_porty_1_1146 = out_tmp;
  end // FP_Port_In50_porty_Block
  endgenerate
  generate
  begin: FP_Port_In52_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In52_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In52_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In52_N_porty_1_1140 = out_tmp;
  end // FP_Port_In52_porty_Block
  endgenerate
  generate
  begin: FP_Port_In53_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In53_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In53_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In53_N_porty_1_1134 = out_tmp;
  end // FP_Port_In53_porty_Block
  endgenerate
  generate
  begin: FP_Port_In54_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In54_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In54_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In54_N_porty_1_1128 = out_tmp;
  end // FP_Port_In54_porty_Block
  endgenerate
  generate
  begin: FP_Port_In55_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In55_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In55_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In55_N_porty_1_1122 = out_tmp;
  end // FP_Port_In55_porty_Block
  endgenerate
  generate
  begin: FP_Port_In56_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In56_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In56_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In56_N_porty_1_1116 = out_tmp;
  end // FP_Port_In56_porty_Block
  endgenerate
  generate
  begin: FP_Port_In57_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In57_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In57_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In57_N_porty_1_1110 = out_tmp;
  end // FP_Port_In57_porty_Block
  endgenerate
  generate
  begin: FP_Port_In58_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In58_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In58_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In58_N_porty_1_1104 = out_tmp;
  end // FP_Port_In58_porty_Block
  endgenerate
  generate
  begin: FP_Port_In59_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In59_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In59_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In59_N_porty_1_1098 = out_tmp;
  end // FP_Port_In59_porty_Block
  endgenerate
  generate
  begin: FP_Port_In6_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In6_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In6_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In6_N_porty_1_1092 = out_tmp;
  end // FP_Port_In6_porty_Block
  endgenerate
  generate
  begin: FP_Port_In60_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In60_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In60_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In60_N_porty_1_1086 = out_tmp;
  end // FP_Port_In60_porty_Block
  endgenerate
  generate
  begin: FP_Port_In61_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In61_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In61_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In61_N_porty_1_1080 = out_tmp;
  end // FP_Port_In61_porty_Block
  endgenerate
  generate
  begin: FP_Port_In62_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In62_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In62_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In62_N_porty_1_1074 = out_tmp;
  end // FP_Port_In62_porty_Block
  endgenerate
  generate
  begin: FP_Port_In63_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In63_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In63_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In63_N_porty_1_1068 = out_tmp;
  end // FP_Port_In63_porty_Block
  endgenerate
  generate
  begin: FP_Port_In64_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In64_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In64_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In64_N_porty_1_1062 = out_tmp;
  end // FP_Port_In64_porty_Block
  endgenerate
  generate
  begin: FP_Port_In65_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In65_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In65_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In65_N_porty_1_1056 = out_tmp;
  end // FP_Port_In65_porty_Block
  endgenerate
  generate
  begin: FP_Port_In66_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In66_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In66_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In66_N_porty_1_1050 = out_tmp;
  end // FP_Port_In66_porty_Block
  endgenerate
  generate
  begin: FP_Port_In67_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In67_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In67_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In67_N_porty_1_1044 = out_tmp;
  end // FP_Port_In67_porty_Block
  endgenerate
  generate
  begin: FP_Port_In68_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In68_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In68_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In68_N_porty_1_1038 = out_tmp;
  end // FP_Port_In68_porty_Block
  endgenerate
  generate
  begin: FP_Port_In7_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In7_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In7_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In7_N_porty_1_1032 = out_tmp;
  end // FP_Port_In7_porty_Block
  endgenerate
  generate
  begin: FP_Port_In8_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In8_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In8_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In8_N_porty_1_1026 = out_tmp;
  end // FP_Port_In8_porty_Block
  endgenerate
  generate
  begin: FP_Port_In9_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In9_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In9_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In9_N_porty_1_1020 = out_tmp;
  end // FP_Port_In9_porty_Block
  endgenerate
  generate
  begin: FP_Port_Out_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out_N_portx_1_1668;
  assign FP_Port_Out_portx = med;
  end // FP_Port_Out_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out1_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out1_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out1_N_portx_1_1669;
  assign FP_Port_Out1_portx = med;
  end // FP_Port_Out1_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out10_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out10_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out10_N_portx_1_1670;
  assign FP_Port_Out10_portx = med;
  end // FP_Port_Out10_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out11_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out11_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out11_N_portx_1_1671;
  assign FP_Port_Out11_portx = med;
  end // FP_Port_Out11_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out12_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out12_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out12_N_portx_1_1672;
  assign FP_Port_Out12_portx = med;
  end // FP_Port_Out12_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out13_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out13_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out13_N_portx_1_1673;
  assign FP_Port_Out13_portx = med;
  end // FP_Port_Out13_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out14_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out14_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out14_N_portx_1_1674;
  assign FP_Port_Out14_portx = med;
  end // FP_Port_Out14_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out15_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out15_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out15_N_portx_1_1675;
  assign FP_Port_Out15_portx = med;
  end // FP_Port_Out15_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out16_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out16_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out16_N_portx_1_1676;
  assign FP_Port_Out16_portx = med;
  end // FP_Port_Out16_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out17_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out17_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out17_N_portx_1_1677;
  assign FP_Port_Out17_portx = med;
  end // FP_Port_Out17_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out18_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out18_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out18_N_portx_1_1678;
  assign FP_Port_Out18_portx = med;
  end // FP_Port_Out18_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out19_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out19_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out19_N_portx_1_1679;
  assign FP_Port_Out19_portx = med;
  end // FP_Port_Out19_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out2_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out2_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out2_N_portx_1_1680;
  assign FP_Port_Out2_portx = med;
  end // FP_Port_Out2_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out20_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out20_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out20_N_portx_1_1681;
  assign FP_Port_Out20_portx = med;
  end // FP_Port_Out20_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out21_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out21_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out21_N_portx_1_1682;
  assign FP_Port_Out21_portx = med;
  end // FP_Port_Out21_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out22_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out22_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out22_N_portx_1_1683;
  assign FP_Port_Out22_portx = med;
  end // FP_Port_Out22_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out23_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out23_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out23_N_portx_1_1684;
  assign FP_Port_Out23_portx = med;
  end // FP_Port_Out23_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out24_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out24_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out24_N_portx_1_1685;
  assign FP_Port_Out24_portx = med;
  end // FP_Port_Out24_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out25_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out25_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out25_N_portx_1_1686;
  assign FP_Port_Out25_portx = med;
  end // FP_Port_Out25_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out26_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out26_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out26_N_portx_1_1687;
  assign FP_Port_Out26_portx = med;
  end // FP_Port_Out26_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out27_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out27_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out27_N_portx_1_1688;
  assign FP_Port_Out27_portx = med;
  end // FP_Port_Out27_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out28_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out28_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out28_N_portx_1_1689;
  assign FP_Port_Out28_portx = med;
  end // FP_Port_Out28_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out29_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out29_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out29_N_portx_1_1690;
  assign FP_Port_Out29_portx = med;
  end // FP_Port_Out29_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out3_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out3_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out3_N_portx_1_1691;
  assign FP_Port_Out3_portx = med;
  end // FP_Port_Out3_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out30_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out30_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out30_N_portx_1_1692;
  assign FP_Port_Out30_portx = med;
  end // FP_Port_Out30_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out31_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out31_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out31_N_portx_1_1693;
  assign FP_Port_Out31_portx = med;
  end // FP_Port_Out31_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out32_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out32_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out32_N_portx_1_1694;
  assign FP_Port_Out32_portx = med;
  end // FP_Port_Out32_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out33_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out33_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out33_N_portx_1_1695;
  assign FP_Port_Out33_portx = med;
  end // FP_Port_Out33_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out34_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out34_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out34_N_portx_1_1696;
  assign FP_Port_Out34_portx = med;
  end // FP_Port_Out34_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out35_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out35_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out35_N_portx_1_1697;
  assign FP_Port_Out35_portx = med;
  end // FP_Port_Out35_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out36_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out36_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out36_N_portx_1_1698;
  assign FP_Port_Out36_portx = med;
  end // FP_Port_Out36_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out37_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out37_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out37_N_portx_1_1699;
  assign FP_Port_Out37_portx = med;
  end // FP_Port_Out37_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out38_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out38_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out38_N_portx_1_1700;
  assign FP_Port_Out38_portx = med;
  end // FP_Port_Out38_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out39_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out39_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out39_N_portx_1_1701;
  assign FP_Port_Out39_portx = med;
  end // FP_Port_Out39_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out4_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out4_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out4_N_portx_1_1702;
  assign FP_Port_Out4_portx = med;
  end // FP_Port_Out4_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out40_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out40_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out40_N_portx_1_1703;
  assign FP_Port_Out40_portx = med;
  end // FP_Port_Out40_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out41_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out41_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out41_N_portx_1_1704;
  assign FP_Port_Out41_portx = med;
  end // FP_Port_Out41_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out42_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out42_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out42_N_portx_1_1705;
  assign FP_Port_Out42_portx = med;
  end // FP_Port_Out42_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out43_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out43_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out43_N_portx_1_1706;
  assign FP_Port_Out43_portx = med;
  end // FP_Port_Out43_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out44_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out44_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out44_N_portx_1_1707;
  assign FP_Port_Out44_portx = med;
  end // FP_Port_Out44_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out45_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out45_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out45_N_portx_1_1708;
  assign FP_Port_Out45_portx = med;
  end // FP_Port_Out45_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out46_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out46_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out46_N_portx_1_1709;
  assign FP_Port_Out46_portx = med;
  end // FP_Port_Out46_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out47_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out47_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out47_N_portx_1_1710;
  assign FP_Port_Out47_portx = med;
  end // FP_Port_Out47_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out48_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out48_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out48_N_portx_1_1711;
  assign FP_Port_Out48_portx = med;
  end // FP_Port_Out48_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out49_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out49_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out49_N_portx_1_1712;
  assign FP_Port_Out49_portx = med;
  end // FP_Port_Out49_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out5_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out5_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out5_N_portx_1_1713;
  assign FP_Port_Out5_portx = med;
  end // FP_Port_Out5_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out50_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out50_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out50_N_portx_1_1714;
  assign FP_Port_Out50_portx = med;
  end // FP_Port_Out50_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out51_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out51_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out51_N_portx_1_1715;
  assign FP_Port_Out51_portx = med;
  end // FP_Port_Out51_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out52_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out52_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out52_N_portx_1_1716;
  assign FP_Port_Out52_portx = med;
  end // FP_Port_Out52_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out53_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out53_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out53_N_portx_1_1717;
  assign FP_Port_Out53_portx = med;
  end // FP_Port_Out53_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out54_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out54_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out54_N_portx_1_1718;
  assign FP_Port_Out54_portx = med;
  end // FP_Port_Out54_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out55_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out55_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out55_N_portx_1_1719;
  assign FP_Port_Out55_portx = med;
  end // FP_Port_Out55_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out56_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out56_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out56_N_portx_1_1720;
  assign FP_Port_Out56_portx = med;
  end // FP_Port_Out56_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out57_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out57_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out57_N_portx_1_1721;
  assign FP_Port_Out57_portx = med;
  end // FP_Port_Out57_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out58_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out58_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out58_N_portx_1_1722;
  assign FP_Port_Out58_portx = med;
  end // FP_Port_Out58_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out59_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out59_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out59_N_portx_1_1723;
  assign FP_Port_Out59_portx = med;
  end // FP_Port_Out59_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out6_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out6_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out6_N_portx_1_1724;
  assign FP_Port_Out6_portx = med;
  end // FP_Port_Out6_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out60_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out60_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out60_N_portx_1_1725;
  assign FP_Port_Out60_portx = med;
  end // FP_Port_Out60_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out61_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out61_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out61_N_portx_1_1726;
  assign FP_Port_Out61_portx = med;
  end // FP_Port_Out61_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out62_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out62_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out62_N_portx_1_1727;
  assign FP_Port_Out62_portx = med;
  end // FP_Port_Out62_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out63_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out63_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out63_N_portx_1_1728;
  assign FP_Port_Out63_portx = med;
  end // FP_Port_Out63_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out7_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out7_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out7_N_portx_1_1729;
  assign FP_Port_Out7_portx = med;
  end // FP_Port_Out7_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out8_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out8_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out8_N_portx_1_1730;
  assign FP_Port_Out8_portx = med;
  end // FP_Port_Out8_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out9_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out9_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out9_N_portx_1_1731;
  assign FP_Port_Out9_portx = med;
  end // FP_Port_Out9_portx_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

