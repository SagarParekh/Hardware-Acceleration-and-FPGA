// ********************************************************************
//
// Copyright (C) 1994-2016 Synopsys, Inc. All rights reserved. This Synopsys software and all associated documentation are proprietary to Synopsys, Inc. and may only be used pursuant to the terms and conditions of a written license agreement with Synopsys, Inc. All other use, reproduction, modification, or distribution of the Synopsys software or the associated documentation is strictly prohibited.

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler L-2016.03, Build 2009R, Feb 25 2016
// Date written:             Sat Feb 24 19:40:52 2018

// ********************************************************************

// Generated from /afs/asu.edu/users/s/j/p/sjparekh/asap7_sagar/FPGA/HW2/CEN598_HW2.slx Version 1.211 Last modified date Sat Feb 24 19:31:34 2018
module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input x2_sel, // ufix1
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [4:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [3:0] N_5;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3524_1_3896;  
wire [0:0] N_GlobalEnable1_0_6906;  
wire [3:0] N_x1_0_6907;  
wire [0:0] N_x1_sel_0_6908;  
wire [4:0] N_x2_0_6909;  
wire [0:0] N_x2_sel_0_6910;  
wire [4:0] N_y_1_6911;  
wire [0:0] N_y_sel_1_6912;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3524_1_3896 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [2:0] x1 // ufix3_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [2:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3522_1_3894;  
wire [0:0] N_GlobalEnable1_0_6920;  
wire [2:0] N_x1_0_6921;  
wire [0:0] N_x1_sel_0_6922;  
wire [3:0] N_x2_0_6923;  
wire [0:0] N_x2_sel_0_6924;  
wire [3:0] N_y_1_6925;  
wire [0:0] N_y_sel_1_6926;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3522_1_3894 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [3:0] med  [1:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input x2_sel, // ufix1
  input [5:0] x2, // ufix6_En0
  input x1_sel, // ufix1
  input [5:0] x1 // ufix6_En0
);
wire [5:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [5:0] N_7;  
wire [5:0] N_5;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3520_1_3892;  
wire [0:0] N_GlobalEnable1_0_6934;  
wire [5:0] N_x1_0_6935;  
wire [0:0] N_x1_sel_0_6936;  
wire [5:0] N_x2_0_6937;  
wire [0:0] N_x2_sel_0_6938;  
wire [5:0] N_y_1_6939;  
wire [0:0] N_y_sel_1_6940;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3520_1_3892 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input x2_sel, // ufix1
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [4:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [4:0] N_7;  
wire [4:0] N_5;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3518_1_3890;  
wire [0:0] N_GlobalEnable1_0_6948;  
wire [4:0] N_x1_0_6949;  
wire [0:0] N_x1_sel_0_6950;  
wire [4:0] N_x2_0_6951;  
wire [0:0] N_x2_sel_0_6952;  
wire [4:0] N_y_1_6953;  
wire [0:0] N_y_sel_1_6954;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3518_1_3890 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [3:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [3:0] N_7;  
wire [3:0] N_5;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3517_1_3889;  
wire [0:0] N_GlobalEnable1_0_6955;  
wire [3:0] N_x1_0_6956;  
wire [0:0] N_x1_sel_0_6957;  
wire [3:0] N_x2_0_6958;  
wire [0:0] N_x2_sel_0_6959;  
wire [3:0] N_y_1_6960;  
wire [0:0] N_y_sel_1_6961;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3517_1_3889 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input x2_sel, // ufix1
  input [2:0] x2, // ufix3_En0
  input x1_sel, // ufix1
  input [1:0] x1 // ufix2_En0
);
wire [2:0] N_6;  
wire [0:0] N_4;  
wire [0:0] N_8;  
wire [2:0] N_7;  
wire [1:0] N_5;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [0:0] N_3;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3516_1_3888;  
wire [0:0] N_GlobalEnable1_0_6962;  
wire [1:0] N_x1_0_6963;  
wire [0:0] N_x1_sel_0_6964;  
wire [2:0] N_x2_0_6965;  
wire [0:0] N_x2_sel_0_6966;  
wire [2:0] N_y_1_6967;  
wire [0:0] N_y_sel_1_6968;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3516_1_3888 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [2:0] med  [1:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [1:0] y, // ufix2_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [1:0] N_4;  
wire [0:0] N_3;  
wire [1:0] N_6;  
wire [1:0] N_7;  
wire [0:0] N_8;  
wire [0:0] N_9;  
wire [0:0] N_1;  
wire [1:0] N_2;  
wire [3:0] N_sel_0_6969;  
wire [1:0] N_y_1_6970;  
wire [0:0] N_y_sel_1_6971;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_9 = 1'b0;
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [1:0] med  [15:0];
    reg [1:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 2'b11;
assign N_7 = 2'b10;
assign N_8 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_6972;  
wire [5:0] N_y_1_6973;  
wire [0:0] N_y_sel_1_6974;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b100111;
assign N_7 = 6'b100110;
assign N_8 = 6'b100101;
assign N_9 = 6'b100100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_6975;  
wire [5:0] N_y_1_6976;  
wire [0:0] N_y_sel_1_6977;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b101011;
assign N_7 = 6'b101010;
assign N_8 = 6'b101001;
assign N_9 = 6'b101000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_6978;  
wire [5:0] N_y_1_6979;  
wire [0:0] N_y_sel_1_6980;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b101111;
assign N_7 = 6'b101110;
assign N_8 = 6'b101101;
assign N_9 = 6'b101100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [5:0] N_4;  
wire [3:0] N_5;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_6981;  
wire [5:0] N_y_1_6982;  
wire GlobalResetSel;
assign y = N_2;
  assign N_5 = sel;
    assign N_2 = N_4;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b110011;
assign N_7 = 6'b110010;
assign N_8 = 6'b110001;
assign N_9 = 6'b110000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [2:0] N_4;  
wire [0:0] N_3;  
wire [2:0] N_6;  
wire [2:0] N_7;  
wire [2:0] N_8;  
wire [2:0] N_9;  
wire [0:0] N_1;  
wire [2:0] N_2;  
wire [3:0] N_sel_0_6983;  
wire [2:0] N_y_1_6984;  
wire [0:0] N_y_sel_1_6985;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [2:0] med  [15:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 3'b111;
assign N_7 = 3'b110;
assign N_8 = 3'b101;
assign N_9 = 3'b100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_6986;  
wire [3:0] N_y_1_6987;  
wire [0:0] N_y_sel_1_6988;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1011;
assign N_7 = 4'b1010;
assign N_8 = 4'b1001;
assign N_9 = 4'b1000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [3:0] N_4;  
wire [0:0] N_3;  
wire [3:0] N_6;  
wire [3:0] N_7;  
wire [3:0] N_8;  
wire [3:0] N_9;  
wire [0:0] N_1;  
wire [3:0] N_2;  
wire [3:0] N_sel_0_6989;  
wire [3:0] N_y_1_6990;  
wire [0:0] N_y_sel_1_6991;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1111;
assign N_7 = 4'b1110;
assign N_8 = 4'b1101;
assign N_9 = 4'b1100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_6992;  
wire [4:0] N_y_1_6993;  
wire [0:0] N_y_sel_1_6994;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10011;
assign N_7 = 5'b10010;
assign N_8 = 5'b10001;
assign N_9 = 5'b10000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_6995;  
wire [4:0] N_y_1_6996;  
wire [0:0] N_y_sel_1_6997;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10111;
assign N_7 = 5'b10110;
assign N_8 = 5'b10101;
assign N_9 = 5'b10100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_6998;  
wire [4:0] N_y_1_6999;  
wire [0:0] N_y_sel_1_7000;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b11011;
assign N_7 = 5'b11010;
assign N_8 = 5'b11001;
assign N_9 = 5'b11000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [4:0] N_4;  
wire [0:0] N_3;  
wire [4:0] N_6;  
wire [4:0] N_7;  
wire [4:0] N_8;  
wire [4:0] N_9;  
wire [0:0] N_1;  
wire [4:0] N_2;  
wire [3:0] N_sel_0_7001;  
wire [4:0] N_y_1_7002;  
wire [0:0] N_y_sel_1_7003;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b11111;
assign N_7 = 5'b11110;
assign N_8 = 5'b11101;
assign N_9 = 5'b11100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [5:0] y, // ufix6_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5;  
wire [5:0] N_4;  
wire [0:0] N_3;  
wire [5:0] N_6;  
wire [5:0] N_7;  
wire [5:0] N_8;  
wire [5:0] N_9;  
wire [0:0] N_1;  
wire [5:0] N_2;  
wire [3:0] N_sel_0_7004;  
wire [5:0] N_y_1_7005;  
wire [0:0] N_y_sel_1_7006;  
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [5:0] med  [15:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 6'b100011;
assign N_7 = 6'b100010;
assign N_8 = 6'b100001;
assign N_9 = 6'b100000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [5:0] x, // ufix6_En0
  input msb // ufix1
);
wire [5:0] N_7;  
wire [0:0] N_3;  
wire [6:0] N_6;  
wire [0:0] N_5;  
wire [6:0] N_4;  
wire [0:0] N_2;  
wire [6:0] N_1;  
wire [0:0] N_msb_0_7007;  
wire [5:0] N_x_0_7008;  
wire [6:0] N_y_1_7009;  
wire GlobalResetSel;
assign y = N_1;
  assign N_7 = x;
  assign N_5 = msb;
  generate
  begin: Add_block
    wire enab;
    wire [6:0] tmpOut;
    wire  [6:0] tmp_N_7_0;
    wire  [6:0] tmp_N_3_1;
    wire [6:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_7_0 = ($unsigned(N_7) << 0);
    assign tmp_N_3_1 = ($unsigned(N_3) << 0);
    assign  tmpOutPre =   tmp_N_7_0 + tmp_N_3_1;
    assign tmpOut = tmpOutPre;
    assign N_4 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
assign N_2 = 1'b0;
    assign N_1 = N_6;
  generate
  begin: Mux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $unsigned(N_2) ;

    always@(*)
    begin
      if(N_5[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_3 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [5:0] x2, // ufix6_En0
  input x1_sel, // ufix1
  input [4:0] x1 // ufix5_En0
);
wire [5:0] N_6;  
wire [0:0] N_8;  
wire [5:0] N_7;  
wire [4:0] N_5;  
wire [5:0] N_2;  
wire [4:0] N_x1_0_7010;  
wire [0:0] N_x1_sel_0_7011;  
wire [5:0] N_x2_0_7012;  
wire [5:0] N_y_1_7013;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [5:0] x2, // ufix6_En0
  input x1_sel, // ufix1
  input [5:0] x1 // ufix6_En0
);
wire [5:0] N_6;  
wire [0:0] N_8;  
wire [5:0] N_7;  
wire [5:0] N_5;  
wire [5:0] N_2;  
wire [5:0] N_x1_0_7018;  
wire [0:0] N_x1_sel_0_7019;  
wire [5:0] N_x2_0_7020;  
wire [5:0] N_y_1_7021;  
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3515_1_3887;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_7022;  
wire [52:0] N_x_0_7023;  
wire [6:0] N_y_1_7024;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3515_1_3887 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE1_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3529_1_3901;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_7164;  
wire [52:0] N_x_0_7165;  
wire [6:0] N_y_1_7166;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3529_1_3901 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE10_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3543_1_3915;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_7306;  
wire [52:0] N_x_0_7307;  
wire [6:0] N_y_1_7308;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3543_1_3915 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE11_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3557_1_3929;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_7448;  
wire [52:0] N_x_0_7449;  
wire [6:0] N_y_1_7450;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3557_1_3929 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE12_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3571_1_3943;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_7590;  
wire [52:0] N_x_0_7591;  
wire [6:0] N_y_1_7592;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3571_1_3943 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE13_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3585_1_3957;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_7732;  
wire [52:0] N_x_0_7733;  
wire [6:0] N_y_1_7734;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3585_1_3957 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE14_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3599_1_3971;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_7874;  
wire [52:0] N_x_0_7875;  
wire [6:0] N_y_1_7876;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3599_1_3971 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE15_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3613_1_3985;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_8016;  
wire [52:0] N_x_0_8017;  
wire [6:0] N_y_1_8018;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3613_1_3985 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE2_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3627_1_3999;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_8158;  
wire [52:0] N_x_0_8159;  
wire [6:0] N_y_1_8160;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3627_1_3999 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE3_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3641_1_4013;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_8300;  
wire [52:0] N_x_0_8301;  
wire [6:0] N_y_1_8302;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3641_1_4013 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE4_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3655_1_4027;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_8442;  
wire [52:0] N_x_0_8443;  
wire [6:0] N_y_1_8444;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3655_1_4027 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE5_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3669_1_4041;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_8584;  
wire [52:0] N_x_0_8585;  
wire [6:0] N_y_1_8586;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3669_1_4041 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE6_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3683_1_4055;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_8726;  
wire [52:0] N_x_0_8727;  
wire [6:0] N_y_1_8728;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3683_1_4055 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE7_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3697_1_4069;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_8868;  
wire [52:0] N_x_0_8869;  
wire [6:0] N_y_1_8870;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3697_1_4069 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE8_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3711_1_4083;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_9010;  
wire [52:0] N_x_0_9011;  
wire [6:0] N_y_1_9012;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3711_1_4083 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE9_MAC_PE_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [6:0] y, // ufix7_En0
  input [52:0] x // ufix53_En0
);
wire [52:0] N_65;  
wire [0:0] N_67;  
wire [6:0] N_64;  
wire [5:0] N_68;  
wire [6:0] N_69;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3725_1_4097;  
wire [3:0] N_41;  
wire [0:0] N_42;  
wire [4:0] N_43;  
wire [0:0] N_44;  
wire [4:0] N_33;  
wire [0:0] N_34;  
wire [4:0] N_35;  
wire [0:0] N_36;  
wire [2:0] N_29;  
wire [0:0] N_30;  
wire [3:0] N_31;  
wire [0:0] N_32;  
wire [5:0] N_21;  
wire [0:0] N_22;  
wire [5:0] N_23;  
wire [0:0] N_24;  
wire [5:0] N_17;  
wire [0:0] N_18;  
wire [5:0] N_19;  
wire [0:0] N_20;  
wire [4:0] N_13;  
wire [0:0] N_14;  
wire [4:0] N_15;  
wire [0:0] N_16;  
wire [4:0] N_9;  
wire [0:0] N_10;  
wire [4:0] N_11;  
wire [0:0] N_12;  
wire [3:0] N_5;  
wire [0:0] N_6;  
wire [3:0] N_7;  
wire [0:0] N_8;  
wire [1:0] N_1;  
wire [0:0] N_2;  
wire [2:0] N_3;  
wire [0:0] N_4;  
wire [3:0] N_51;  
wire [3:0] N_60;  
wire [3:0] N_61;  
wire [3:0] N_62;  
wire [3:0] N_63;  
wire [3:0] N_52;  
wire [3:0] N_53;  
wire [3:0] N_54;  
wire [3:0] N_55;  
wire [3:0] N_56;  
wire [3:0] N_57;  
wire [3:0] N_58;  
wire [3:0] N_59;  
wire [0:0] N_49;  
wire [5:0] N_50;  
wire [4:0] N_45;  
wire [0:0] N_46;  
wire [5:0] N_47;  
wire [5:0] N_37;  
wire [0:0] N_38;  
wire [5:0] N_39;  
wire [5:0] N_25;  
wire [0:0] N_26;  
wire [5:0] N_27;  
wire [0:0] N_GlobalEnable1_0_9152;  
wire [52:0] N_x_0_9153;  
wire [6:0] N_y_1_9154;  
wire GlobalResetSel;
assign y = N_69;
  assign N_65 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3725_1_4097 = GlobalEnable1;
  //start Extract
    assign N_49[0] = N_65[52];
    assign N_51[0] = N_65[48];
    assign N_51[1] = N_65[49];
    assign N_51[2] = N_65[50];
    assign N_51[3] = N_65[51];
    assign N_52[0] = N_65[44];
    assign N_52[1] = N_65[45];
    assign N_52[2] = N_65[46];
    assign N_52[3] = N_65[47];
    assign N_53[0] = N_65[40];
    assign N_53[1] = N_65[41];
    assign N_53[2] = N_65[42];
    assign N_53[3] = N_65[43];
    assign N_54[0] = N_65[36];
    assign N_54[1] = N_65[37];
    assign N_54[2] = N_65[38];
    assign N_54[3] = N_65[39];
    assign N_55[0] = N_65[32];
    assign N_55[1] = N_65[33];
    assign N_55[2] = N_65[34];
    assign N_55[3] = N_65[35];
    assign N_56[0] = N_65[28];
    assign N_56[1] = N_65[29];
    assign N_56[2] = N_65[30];
    assign N_56[3] = N_65[31];
    assign N_57[0] = N_65[24];
    assign N_57[1] = N_65[25];
    assign N_57[2] = N_65[26];
    assign N_57[3] = N_65[27];
    assign N_58[0] = N_65[20];
    assign N_58[1] = N_65[21];
    assign N_58[2] = N_65[22];
    assign N_58[3] = N_65[23];
    assign N_59[0] = N_65[16];
    assign N_59[1] = N_65[17];
    assign N_59[2] = N_65[18];
    assign N_59[3] = N_65[19];
    assign N_60[0] = N_65[12];
    assign N_60[1] = N_65[13];
    assign N_60[2] = N_65[14];
    assign N_60[3] = N_65[15];
    assign N_61[0] = N_65[8];
    assign N_61[1] = N_65[9];
    assign N_61[2] = N_65[10];
    assign N_61[3] = N_65[11];
    assign N_62[0] = N_65[4];
    assign N_62[1] = N_65[5];
    assign N_62[2] = N_65[6];
    assign N_62[3] = N_65[7];
    assign N_63[0] = N_65[0];
    assign N_63[1] = N_65[1];
    assign N_63[2] = N_65[2];
    assign N_63[3] = N_65[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [6:0] med  [1:0];
    reg [6:0] tmpOut;
    assign med[0] = $unsigned(N_64) ;
    assign med[1] = $unsigned(N_68) ;

    always@(*)
    begin
      if(N_67[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_67[0:0]];
    end

    assign N_69 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [52:0] med1;
  wire  [52:0] med2;
  wire outp;
  assign med1 = $unsigned(N_65) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_67 = outp;
    synComparator #(
      .bitwidth(53),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_68 = 6'b110101;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_1  myLZDPstg3_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_41),
      .x1_sel(N_42),
      .x2(N_43),
      .x2_sel(N_44),
      .y(N_45) ,
      .y_sel(N_46)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg2_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_33),
      .x1_sel(N_34),
      .x2(N_35),
      .x2_sel(N_36),
      .y(N_43) ,
      .y_sel(N_44)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_29),
      .x1_sel(N_30),
      .x2(N_31),
      .x2_sel(N_32),
      .y(N_41) ,
      .y_sel(N_42)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_21),
      .x1_sel(N_22),
      .x2(N_23),
      .x2_sel(N_24),
      .y(N_25) ,
      .y_sel(N_26)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_5  myLZDPstg1_5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_17),
      .x1_sel(N_18),
      .x2(N_19),
      .x2_sel(N_20),
      .y(N_37) ,
      .y_sel(N_38)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .x2_sel(N_16),
      .y(N_35) ,
      .y_sel(N_36)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .x2_sel(N_12),
      .y(N_33) ,
      .y_sel(N_34)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_31) ,
      .y_sel(N_32)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_29) ,
      .y_sel(N_30)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_51),
      .y(N_1) ,
      .y_sel(N_2)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP10  myLZDP10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_60),
      .y(N_19) ,
      .y_sel(N_20)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP11  myLZDP11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_61),
      .y(N_21) ,
      .y_sel(N_22)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP12  myLZDP12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_62),
      .y(N_23) ,
      .y_sel(N_24)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP13  myLZDP13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_63),
      .y(N_27)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_52),
      .y(N_3) ,
      .y_sel(N_4)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_53),
      .y(N_5) ,
      .y_sel(N_6)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_54),
      .y(N_7) ,
      .y_sel(N_8)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_55),
      .y(N_9) ,
      .y_sel(N_10)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP6  myLZDP6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_56),
      .y(N_11) ,
      .y_sel(N_12)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP7  myLZDP7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_57),
      .y(N_13) ,
      .y_sel(N_14)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP8  myLZDP8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_58),
      .y(N_15) ,
      .y_sel(N_16)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDP9  myLZDP9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_59),
      .y(N_17) ,
      .y_sel(N_18)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_49),
      .x(N_50),
      .y(N_64)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg3_2  myLZDPstg3_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_45),
      .x1_sel(N_46),
      .x2(N_47),
      .y(N_50)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg2_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_37),
      .x1_sel(N_38),
      .x2(N_39),
      .y(N_47)    );
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1_LZDPstg1_7  myLZDPstg1_7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_25),
      .x1_sel(N_26),
      .x2(N_27),
      .y(N_39)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3514_1_3886;  
wire [0:0] N_GlobalEnable1_0_7025;  
wire [63:0] N_y_0_7026;  
wire [63:0] N_z_1_7027;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3514_1_3886 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3525_1_3897;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_7028;  
wire [63:0] N_x_0_7029;  
wire [63:0] N_y_0_7030;  
wire [63:0] N_z_1_7031;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3525_1_3897 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE1_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3528_1_3900;  
wire [0:0] N_GlobalEnable1_0_7167;  
wire [63:0] N_y_0_7168;  
wire [63:0] N_z_1_7169;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3528_1_3900 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE1_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE1_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3539_1_3911;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_7170;  
wire [63:0] N_x_0_7171;  
wire [63:0] N_y_0_7172;  
wire [63:0] N_z_1_7173;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3539_1_3911 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE10_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3542_1_3914;  
wire [0:0] N_GlobalEnable1_0_7309;  
wire [63:0] N_y_0_7310;  
wire [63:0] N_z_1_7311;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3542_1_3914 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE10_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE10_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3553_1_3925;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_7312;  
wire [63:0] N_x_0_7313;  
wire [63:0] N_y_0_7314;  
wire [63:0] N_z_1_7315;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3553_1_3925 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE11_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3556_1_3928;  
wire [0:0] N_GlobalEnable1_0_7451;  
wire [63:0] N_y_0_7452;  
wire [63:0] N_z_1_7453;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3556_1_3928 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE11_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE11_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3567_1_3939;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_7454;  
wire [63:0] N_x_0_7455;  
wire [63:0] N_y_0_7456;  
wire [63:0] N_z_1_7457;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3567_1_3939 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE12_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3570_1_3942;  
wire [0:0] N_GlobalEnable1_0_7593;  
wire [63:0] N_y_0_7594;  
wire [63:0] N_z_1_7595;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3570_1_3942 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE12_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE12_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3581_1_3953;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_7596;  
wire [63:0] N_x_0_7597;  
wire [63:0] N_y_0_7598;  
wire [63:0] N_z_1_7599;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3581_1_3953 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE13_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3584_1_3956;  
wire [0:0] N_GlobalEnable1_0_7735;  
wire [63:0] N_y_0_7736;  
wire [63:0] N_z_1_7737;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3584_1_3956 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE13_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE13_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3595_1_3967;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_7738;  
wire [63:0] N_x_0_7739;  
wire [63:0] N_y_0_7740;  
wire [63:0] N_z_1_7741;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3595_1_3967 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE14_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3598_1_3970;  
wire [0:0] N_GlobalEnable1_0_7877;  
wire [63:0] N_y_0_7878;  
wire [63:0] N_z_1_7879;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3598_1_3970 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE14_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE14_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3609_1_3981;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_7880;  
wire [63:0] N_x_0_7881;  
wire [63:0] N_y_0_7882;  
wire [63:0] N_z_1_7883;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3609_1_3981 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE15_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3612_1_3984;  
wire [0:0] N_GlobalEnable1_0_8019;  
wire [63:0] N_y_0_8020;  
wire [63:0] N_z_1_8021;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3612_1_3984 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE15_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE15_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3623_1_3995;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_8022;  
wire [63:0] N_x_0_8023;  
wire [63:0] N_y_0_8024;  
wire [63:0] N_z_1_8025;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3623_1_3995 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE2_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3626_1_3998;  
wire [0:0] N_GlobalEnable1_0_8161;  
wire [63:0] N_y_0_8162;  
wire [63:0] N_z_1_8163;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3626_1_3998 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE2_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE2_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3637_1_4009;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_8164;  
wire [63:0] N_x_0_8165;  
wire [63:0] N_y_0_8166;  
wire [63:0] N_z_1_8167;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3637_1_4009 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE3_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3640_1_4012;  
wire [0:0] N_GlobalEnable1_0_8303;  
wire [63:0] N_y_0_8304;  
wire [63:0] N_z_1_8305;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3640_1_4012 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE3_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE3_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3651_1_4023;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_8306;  
wire [63:0] N_x_0_8307;  
wire [63:0] N_y_0_8308;  
wire [63:0] N_z_1_8309;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3651_1_4023 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE4_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3654_1_4026;  
wire [0:0] N_GlobalEnable1_0_8445;  
wire [63:0] N_y_0_8446;  
wire [63:0] N_z_1_8447;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3654_1_4026 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE4_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE4_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3665_1_4037;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_8448;  
wire [63:0] N_x_0_8449;  
wire [63:0] N_y_0_8450;  
wire [63:0] N_z_1_8451;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3665_1_4037 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE5_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3668_1_4040;  
wire [0:0] N_GlobalEnable1_0_8587;  
wire [63:0] N_y_0_8588;  
wire [63:0] N_z_1_8589;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3668_1_4040 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE5_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE5_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3679_1_4051;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_8590;  
wire [63:0] N_x_0_8591;  
wire [63:0] N_y_0_8592;  
wire [63:0] N_z_1_8593;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3679_1_4051 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE6_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3682_1_4054;  
wire [0:0] N_GlobalEnable1_0_8729;  
wire [63:0] N_y_0_8730;  
wire [63:0] N_z_1_8731;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3682_1_4054 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE6_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE6_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3693_1_4065;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_8732;  
wire [63:0] N_x_0_8733;  
wire [63:0] N_y_0_8734;  
wire [63:0] N_z_1_8735;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3693_1_4065 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE7_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3696_1_4068;  
wire [0:0] N_GlobalEnable1_0_8871;  
wire [63:0] N_y_0_8872;  
wire [63:0] N_z_1_8873;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3696_1_4068 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE7_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE7_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3707_1_4079;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_8874;  
wire [63:0] N_x_0_8875;  
wire [63:0] N_y_0_8876;  
wire [63:0] N_z_1_8877;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3707_1_4079 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE8_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3710_1_4082;  
wire [0:0] N_GlobalEnable1_0_9013;  
wire [63:0] N_y_0_9014;  
wire [63:0] N_z_1_9015;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3710_1_4082 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE8_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE8_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3721_1_4093;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_9016;  
wire [63:0] N_x_0_9017;  
wire [63:0] N_y_0_9018;  
wire [63:0] N_z_1_9019;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3721_1_4093 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE9_MAC_PE_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y // ufix64_En0
);
wire [54:0] N_73;  
wire [10:0] N_51;  
wire [0:0] N_29;  
wire [10:0] N_41;  
wire [10:0] N_42;  
wire [10:0] N_53;  
wire [65:0] N_47;  
wire [65:0] N_48;  
wire [6:0] N_97;  
wire [54:0] N_52;  
wire [0:0] N_56;  
wire [10:0] N_54;  
wire [51:0] N_55;  
wire [0:0] N_30;  
wire [51:0] N_77;  
wire [0:0] N_31;  
wire [51:0] N_83;  
wire [12:0] N_90;  
wire [11:0] N_71;  
wire [11:0] N_72;  
wire [52:0] N_27;  
wire [52:0] N_28;  
wire [52:0] N_80;  
wire [52:0] N_96;  
wire [66:0] N_16;  
wire [52:0] N_89;  
wire [10:0] N_86;  
wire [10:0] N_75;  
wire [64:0] N_94;  
wire [64:0] N_95;  
wire [0:0] N_64;  
wire [0:0] N_70;  
wire [65:0] N_87;  
wire [65:0] N_88;  
wire [54:0] N_12;  
wire [10:0] N_49;  
wire [10:0] N_82;  
wire [10:0] N_32;  
wire [51:0] N_84;  
wire [0:0] N_22;  
wire [52:0] N_35;  
wire [52:0] N_36;  
wire [0:0] N_74;  
wire [0:0] N_81;  
wire [0:0] N_69;  
wire [11:0] N_14;  
wire [11:0] N_15;  
wire [54:0] N_39;  
wire [54:0] N_50;  
wire [63:0] N_4;  
wire [52:0] N_40;  
wire [0:0] N_21;  
wire [0:0] N_45;  
wire [64:0] N_43;  
wire [65:0] N_92;  
wire [0:0] N_46;  
wire [64:0] N_44;  
wire [65:0] N_93;  
wire [0:0] N_79;  
wire [52:0] N_38;  
wire [52:0] N_37;  
wire [12:0] N_17;  
wire [11:0] N_13;  
wire [52:0] N_57;  
wire [11:0] N_33;  
wire [52:0] N_58;  
wire [11:0] N_34;  
wire [52:0] N_76;  
wire [63:0] N_26;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3724_1_4096;  
wire [0:0] N_GlobalEnable1_0_9155;  
wire [63:0] N_y_0_9156;  
wire [63:0] N_z_1_9157;  
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3724_1_4096 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [55:0] med;
    wire [55:0] medo;
    wire [55:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[54:0];
    synAbs #(
      .bitwidth(56)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_51_0;
    wire  [11:0] tmp_N_29_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_42_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_41_0;
    wire  [11:0] tmp_N_53_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [66:0] tmpOut;
    wire signed [66:0] tmp_N_47_0;
    wire signed [66:0] tmp_N_48_1;
    wire [66:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_51_0;
    wire  [12:0] tmp_N_97_1;
    wire  [12:0] tmp_N_29_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [54:0] med1;
  wire signed [54:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(53'b00000000000000000000000000000000000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(55),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [63:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[63:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[52:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(12),
      .out_width(12),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(67),
      .out_width(55),
      .datatype("signed"),
      .preshift(0),

      .infrac(65),
      .outfrac(52),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(65), .preferRAMImpl(2), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(66), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(12), .preferRAMImpl(2), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(55), .preferRAMImpl(2), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_26[63];
  //end Extract
  //start Extract1
    assign N_75[0] = N_26[52];
    assign N_75[1] = N_26[53];
    assign N_75[2] = N_26[54];
    assign N_75[3] = N_26[55];
    assign N_75[4] = N_26[56];
    assign N_75[5] = N_26[57];
    assign N_75[6] = N_26[58];
    assign N_75[7] = N_26[59];
    assign N_75[8] = N_26[60];
    assign N_75[9] = N_26[61];
    assign N_75[10] = N_26[62];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
    assign N_76[21] = N_50[21];
    assign N_76[22] = N_50[22];
    assign N_76[23] = N_50[23];
    assign N_76[24] = N_50[24];
    assign N_76[25] = N_50[25];
    assign N_76[26] = N_50[26];
    assign N_76[27] = N_50[27];
    assign N_76[28] = N_50[28];
    assign N_76[29] = N_50[29];
    assign N_76[30] = N_50[30];
    assign N_76[31] = N_50[31];
    assign N_76[32] = N_50[32];
    assign N_76[33] = N_50[33];
    assign N_76[34] = N_50[34];
    assign N_76[35] = N_50[35];
    assign N_76[36] = N_50[36];
    assign N_76[37] = N_50[37];
    assign N_76[38] = N_50[38];
    assign N_76[39] = N_50[39];
    assign N_76[40] = N_50[40];
    assign N_76[41] = N_50[41];
    assign N_76[42] = N_50[42];
    assign N_76[43] = N_50[43];
    assign N_76[44] = N_50[44];
    assign N_76[45] = N_50[45];
    assign N_76[46] = N_50[46];
    assign N_76[47] = N_50[47];
    assign N_76[48] = N_50[48];
    assign N_76[49] = N_50[49];
    assign N_76[50] = N_50[50];
    assign N_76[51] = N_50[51];
    assign N_76[52] = N_50[52];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_26[0];
    assign N_77[1] = N_26[1];
    assign N_77[2] = N_26[2];
    assign N_77[3] = N_26[3];
    assign N_77[4] = N_26[4];
    assign N_77[5] = N_26[5];
    assign N_77[6] = N_26[6];
    assign N_77[7] = N_26[7];
    assign N_77[8] = N_26[8];
    assign N_77[9] = N_26[9];
    assign N_77[10] = N_26[10];
    assign N_77[11] = N_26[11];
    assign N_77[12] = N_26[12];
    assign N_77[13] = N_26[13];
    assign N_77[14] = N_26[14];
    assign N_77[15] = N_26[15];
    assign N_77[16] = N_26[16];
    assign N_77[17] = N_26[17];
    assign N_77[18] = N_26[18];
    assign N_77[19] = N_26[19];
    assign N_77[20] = N_26[20];
    assign N_77[21] = N_26[21];
    assign N_77[22] = N_26[22];
    assign N_77[23] = N_26[23];
    assign N_77[24] = N_26[24];
    assign N_77[25] = N_26[25];
    assign N_77[26] = N_26[26];
    assign N_77[27] = N_26[27];
    assign N_77[28] = N_26[28];
    assign N_77[29] = N_26[29];
    assign N_77[30] = N_26[30];
    assign N_77[31] = N_26[31];
    assign N_77[32] = N_26[32];
    assign N_77[33] = N_26[33];
    assign N_77[34] = N_26[34];
    assign N_77[35] = N_26[35];
    assign N_77[36] = N_26[36];
    assign N_77[37] = N_26[37];
    assign N_77[38] = N_26[38];
    assign N_77[39] = N_26[39];
    assign N_77[40] = N_26[40];
    assign N_77[41] = N_26[41];
    assign N_77[42] = N_26[42];
    assign N_77[43] = N_26[43];
    assign N_77[44] = N_26[44];
    assign N_77[45] = N_26[45];
    assign N_77[46] = N_26[46];
    assign N_77[47] = N_26[47];
    assign N_77[48] = N_26[48];
    assign N_77[49] = N_26[49];
    assign N_77[50] = N_26[50];
    assign N_77[51] = N_26[51];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[53];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
    assign N_80[21] = N_50[21];
    assign N_80[22] = N_50[22];
    assign N_80[23] = N_50[23];
    assign N_80[24] = N_50[24];
    assign N_80[25] = N_50[25];
    assign N_80[26] = N_50[26];
    assign N_80[27] = N_50[27];
    assign N_80[28] = N_50[28];
    assign N_80[29] = N_50[29];
    assign N_80[30] = N_50[30];
    assign N_80[31] = N_50[31];
    assign N_80[32] = N_50[32];
    assign N_80[33] = N_50[33];
    assign N_80[34] = N_50[34];
    assign N_80[35] = N_50[35];
    assign N_80[36] = N_50[36];
    assign N_80[37] = N_50[37];
    assign N_80[38] = N_50[38];
    assign N_80[39] = N_50[39];
    assign N_80[40] = N_50[40];
    assign N_80[41] = N_50[41];
    assign N_80[42] = N_50[42];
    assign N_80[43] = N_50[43];
    assign N_80[44] = N_50[44];
    assign N_80[45] = N_50[45];
    assign N_80[46] = N_50[46];
    assign N_80[47] = N_50[47];
    assign N_80[48] = N_50[48];
    assign N_80[49] = N_50[49];
    assign N_80[50] = N_50[50];
    assign N_80[51] = N_50[51];
    assign N_80[52] = N_50[52];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[52];
    assign N_82[1] = N_4[53];
    assign N_82[2] = N_4[54];
    assign N_82[3] = N_4[55];
    assign N_82[4] = N_4[56];
    assign N_82[5] = N_4[57];
    assign N_82[6] = N_4[58];
    assign N_82[7] = N_4[59];
    assign N_82[8] = N_4[60];
    assign N_82[9] = N_4[61];
    assign N_82[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
    assign N_83[20] = N_4[20];
    assign N_83[21] = N_4[21];
    assign N_83[22] = N_4[22];
    assign N_83[23] = N_4[23];
    assign N_83[24] = N_4[24];
    assign N_83[25] = N_4[25];
    assign N_83[26] = N_4[26];
    assign N_83[27] = N_4[27];
    assign N_83[28] = N_4[28];
    assign N_83[29] = N_4[29];
    assign N_83[30] = N_4[30];
    assign N_83[31] = N_4[31];
    assign N_83[32] = N_4[32];
    assign N_83[33] = N_4[33];
    assign N_83[34] = N_4[34];
    assign N_83[35] = N_4[35];
    assign N_83[36] = N_4[36];
    assign N_83[37] = N_4[37];
    assign N_83[38] = N_4[38];
    assign N_83[39] = N_4[39];
    assign N_83[40] = N_4[40];
    assign N_83[41] = N_4[41];
    assign N_83[42] = N_4[42];
    assign N_83[43] = N_4[43];
    assign N_83[44] = N_4[44];
    assign N_83[45] = N_4[45];
    assign N_83[46] = N_4[46];
    assign N_83[47] = N_4[47];
    assign N_83[48] = N_4[48];
    assign N_83[49] = N_4[49];
    assign N_83[50] = N_4[50];
    assign N_83[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
    assign N_84[20] = N_40[20];
    assign N_84[21] = N_40[21];
    assign N_84[22] = N_40[22];
    assign N_84[23] = N_40[23];
    assign N_84[24] = N_40[24];
    assign N_84[25] = N_40[25];
    assign N_84[26] = N_40[26];
    assign N_84[27] = N_40[27];
    assign N_84[28] = N_40[28];
    assign N_84[29] = N_40[29];
    assign N_84[30] = N_40[30];
    assign N_84[31] = N_40[31];
    assign N_84[32] = N_40[32];
    assign N_84[33] = N_40[33];
    assign N_84[34] = N_40[34];
    assign N_84[35] = N_40[35];
    assign N_84[36] = N_40[36];
    assign N_84[37] = N_40[37];
    assign N_84[38] = N_40[38];
    assign N_84[39] = N_40[39];
    assign N_84[40] = N_40[40];
    assign N_84[41] = N_40[41];
    assign N_84[42] = N_40[42];
    assign N_84[43] = N_40[43];
    assign N_84[44] = N_40[44];
    assign N_84[45] = N_40[45];
    assign N_84[46] = N_40[46];
    assign N_84[47] = N_40[47];
    assign N_84[48] = N_40[48];
    assign N_84[49] = N_40[49];
    assign N_84[50] = N_40[50];
    assign N_84[51] = N_40[51];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [65:0] med  [1:0];
    reg [65:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [12:0] med  [1:0];
    reg [12:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [65:0] med ;
    wire signed [65:0] medo;
    wire [65:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[65:0];
    synNegate #(
      .bitwidth(66)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_57) <<< 12;
    assign N_94 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[11:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [64:0] medo;
    wire [64:0] tmpIn;
    assign tmpIn = (N_58) <<< 12;
    assign N_95 = medo[64:0];
    synShifter #(
      .inpBitW(65),
      .outBitW(65),
      .shfBitW(12),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[11:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [52:0] medo;
    wire [52:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[52:0];
    synShifter #(
      .inpBitW(53),
      .outBitW(53),
      .shfBitW(7),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[6:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [10:0] med1;
  wire  [10:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(11),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Interleaved_MAC_PE9_MAC_PE_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE9_MAC_PE_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] z, // ufix64_En0
  input [63:0] y, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [11:0] N_57;  
wire [0:0] N_74;  
wire [9:0] N_26;  
wire [10:0] N_29;  
wire [0:0] N_30;  
wire [10:0] N_59;  
wire [10:0] N_60;  
wire [104:0] N_67;  
wire [0:0] N_23;  
wire [0:0] N_24;  
wire [51:0] N_69;  
wire [0:0] N_25;  
wire [51:0] N_72;  
wire [0:0] N_45;  
wire [10:0] N_44;  
wire [51:0] N_43;  
wire [52:0] N_20;  
wire [105:0] N_58;  
wire [106:0] N_27;  
wire [12:0] N_39;  
wire [52:0] N_21;  
wire [52:0] N_32;  
wire [52:0] N_33;  
wire [0:0] N_63;  
wire [12:0] N_11;  
wire [0:0] N_62;  
wire [0:0] N_70;  
wire [0:0] N_40;  
wire [51:0] N_73;  
wire [10:0] N_31;  
wire [0:0] N_42;  
wire [105:0] N_36;  
wire [105:0] N_66;  
wire [11:0] N_61;  
wire [105:0] N_75;  
wire [10:0] N_68;  
wire [10:0] N_71;  
wire [11:0] N_12;  
wire [0:0] N_14;  
wire [63:0] N_3;  
wire [105:0] N_56;  
wire [105:0] N_37;  
wire [63:0] N_4;  
wire [52:0] N_28;  
wire [52:0] N_34;  
wire [52:0] N_35;  
wire [0:0] N_64;  
wire [105:0] N_19;  
wire [63:0] N_22;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3735_1_4107;  
wire [0:0] N_38;  
wire [0:0] N_41;  
wire [0:0] N_GlobalEnable1_0_9158;  
wire [63:0] N_x_0_9159;  
wire [63:0] N_y_0_9160;  
wire [63:0] N_z_1_9161;  
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3735_1_4107 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [12:0] tmpOut;
    wire  [12:0] tmp_N_57_0;
    wire  [12:0] tmp_N_74_1;
    wire  [12:0] tmp_N_26_2;
    wire [12:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_29_0;
    wire  [11:0] tmp_N_30_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(12), .out_width(11), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [11:0] tmpOut;
    wire  [11:0] tmp_N_59_0;
    wire  [11:0] tmp_N_60_1;
    wire [11:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [105:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[105:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [52:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[52:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [52:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[52:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [63:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[63:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(106),
      .out_width(107),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(107),
      .out_width(53),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(106),
      .outfrac(52),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(13),
      .out_width(11),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(53),
      .out_width(53),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(53), .preferRAMImpl(2), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(13), .preferRAMImpl(2), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(52), .preferRAMImpl(2), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    assign N_37 = N_36;
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(106), .preferRAMImpl(2), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(11), .preferRAMImpl(2), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    assign N_61 = N_12;
    assign N_62 = N_14;
  //start Extract
    assign N_63[0] = N_3[63];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[105];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[106];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
    assign N_66[42] = N_37[42];
    assign N_66[43] = N_37[43];
    assign N_66[44] = N_37[44];
    assign N_66[45] = N_37[45];
    assign N_66[46] = N_37[46];
    assign N_66[47] = N_37[47];
    assign N_66[48] = N_37[48];
    assign N_66[49] = N_37[49];
    assign N_66[50] = N_37[50];
    assign N_66[51] = N_37[51];
    assign N_66[52] = N_37[52];
    assign N_66[53] = N_37[53];
    assign N_66[54] = N_37[54];
    assign N_66[55] = N_37[55];
    assign N_66[56] = N_37[56];
    assign N_66[57] = N_37[57];
    assign N_66[58] = N_37[58];
    assign N_66[59] = N_37[59];
    assign N_66[60] = N_37[60];
    assign N_66[61] = N_37[61];
    assign N_66[62] = N_37[62];
    assign N_66[63] = N_37[63];
    assign N_66[64] = N_37[64];
    assign N_66[65] = N_37[65];
    assign N_66[66] = N_37[66];
    assign N_66[67] = N_37[67];
    assign N_66[68] = N_37[68];
    assign N_66[69] = N_37[69];
    assign N_66[70] = N_37[70];
    assign N_66[71] = N_37[71];
    assign N_66[72] = N_37[72];
    assign N_66[73] = N_37[73];
    assign N_66[74] = N_37[74];
    assign N_66[75] = N_37[75];
    assign N_66[76] = N_37[76];
    assign N_66[77] = N_37[77];
    assign N_66[78] = N_37[78];
    assign N_66[79] = N_37[79];
    assign N_66[80] = N_37[80];
    assign N_66[81] = N_37[81];
    assign N_66[82] = N_37[82];
    assign N_66[83] = N_37[83];
    assign N_66[84] = N_37[84];
    assign N_66[85] = N_37[85];
    assign N_66[86] = N_37[86];
    assign N_66[87] = N_37[87];
    assign N_66[88] = N_37[88];
    assign N_66[89] = N_37[89];
    assign N_66[90] = N_37[90];
    assign N_66[91] = N_37[91];
    assign N_66[92] = N_37[92];
    assign N_66[93] = N_37[93];
    assign N_66[94] = N_37[94];
    assign N_66[95] = N_37[95];
    assign N_66[96] = N_37[96];
    assign N_66[97] = N_37[97];
    assign N_66[98] = N_37[98];
    assign N_66[99] = N_37[99];
    assign N_66[100] = N_37[100];
    assign N_66[101] = N_37[101];
    assign N_66[102] = N_37[102];
    assign N_66[103] = N_37[103];
    assign N_66[104] = N_37[104];
    assign N_66[105] = N_37[105];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
    assign N_67[41] = N_56[41];
    assign N_67[42] = N_56[42];
    assign N_67[43] = N_56[43];
    assign N_67[44] = N_56[44];
    assign N_67[45] = N_56[45];
    assign N_67[46] = N_56[46];
    assign N_67[47] = N_56[47];
    assign N_67[48] = N_56[48];
    assign N_67[49] = N_56[49];
    assign N_67[50] = N_56[50];
    assign N_67[51] = N_56[51];
    assign N_67[52] = N_56[52];
    assign N_67[53] = N_56[53];
    assign N_67[54] = N_56[54];
    assign N_67[55] = N_56[55];
    assign N_67[56] = N_56[56];
    assign N_67[57] = N_56[57];
    assign N_67[58] = N_56[58];
    assign N_67[59] = N_56[59];
    assign N_67[60] = N_56[60];
    assign N_67[61] = N_56[61];
    assign N_67[62] = N_56[62];
    assign N_67[63] = N_56[63];
    assign N_67[64] = N_56[64];
    assign N_67[65] = N_56[65];
    assign N_67[66] = N_56[66];
    assign N_67[67] = N_56[67];
    assign N_67[68] = N_56[68];
    assign N_67[69] = N_56[69];
    assign N_67[70] = N_56[70];
    assign N_67[71] = N_56[71];
    assign N_67[72] = N_56[72];
    assign N_67[73] = N_56[73];
    assign N_67[74] = N_56[74];
    assign N_67[75] = N_56[75];
    assign N_67[76] = N_56[76];
    assign N_67[77] = N_56[77];
    assign N_67[78] = N_56[78];
    assign N_67[79] = N_56[79];
    assign N_67[80] = N_56[80];
    assign N_67[81] = N_56[81];
    assign N_67[82] = N_56[82];
    assign N_67[83] = N_56[83];
    assign N_67[84] = N_56[84];
    assign N_67[85] = N_56[85];
    assign N_67[86] = N_56[86];
    assign N_67[87] = N_56[87];
    assign N_67[88] = N_56[88];
    assign N_67[89] = N_56[89];
    assign N_67[90] = N_56[90];
    assign N_67[91] = N_56[91];
    assign N_67[92] = N_56[92];
    assign N_67[93] = N_56[93];
    assign N_67[94] = N_56[94];
    assign N_67[95] = N_56[95];
    assign N_67[96] = N_56[96];
    assign N_67[97] = N_56[97];
    assign N_67[98] = N_56[98];
    assign N_67[99] = N_56[99];
    assign N_67[100] = N_56[100];
    assign N_67[101] = N_56[101];
    assign N_67[102] = N_56[102];
    assign N_67[103] = N_56[103];
    assign N_67[104] = N_56[104];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[52];
    assign N_68[1] = N_3[53];
    assign N_68[2] = N_3[54];
    assign N_68[3] = N_3[55];
    assign N_68[4] = N_3[56];
    assign N_68[5] = N_3[57];
    assign N_68[6] = N_3[58];
    assign N_68[7] = N_3[59];
    assign N_68[8] = N_3[60];
    assign N_68[9] = N_3[61];
    assign N_68[10] = N_3[62];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
    assign N_69[20] = N_3[20];
    assign N_69[21] = N_3[21];
    assign N_69[22] = N_3[22];
    assign N_69[23] = N_3[23];
    assign N_69[24] = N_3[24];
    assign N_69[25] = N_3[25];
    assign N_69[26] = N_3[26];
    assign N_69[27] = N_3[27];
    assign N_69[28] = N_3[28];
    assign N_69[29] = N_3[29];
    assign N_69[30] = N_3[30];
    assign N_69[31] = N_3[31];
    assign N_69[32] = N_3[32];
    assign N_69[33] = N_3[33];
    assign N_69[34] = N_3[34];
    assign N_69[35] = N_3[35];
    assign N_69[36] = N_3[36];
    assign N_69[37] = N_3[37];
    assign N_69[38] = N_3[38];
    assign N_69[39] = N_3[39];
    assign N_69[40] = N_3[40];
    assign N_69[41] = N_3[41];
    assign N_69[42] = N_3[42];
    assign N_69[43] = N_3[43];
    assign N_69[44] = N_3[44];
    assign N_69[45] = N_3[45];
    assign N_69[46] = N_3[46];
    assign N_69[47] = N_3[47];
    assign N_69[48] = N_3[48];
    assign N_69[49] = N_3[49];
    assign N_69[50] = N_3[50];
    assign N_69[51] = N_3[51];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[63];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[52];
    assign N_71[1] = N_4[53];
    assign N_71[2] = N_4[54];
    assign N_71[3] = N_4[55];
    assign N_71[4] = N_4[56];
    assign N_71[5] = N_4[57];
    assign N_71[6] = N_4[58];
    assign N_71[7] = N_4[59];
    assign N_71[8] = N_4[60];
    assign N_71[9] = N_4[61];
    assign N_71[10] = N_4[62];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
    assign N_72[20] = N_4[20];
    assign N_72[21] = N_4[21];
    assign N_72[22] = N_4[22];
    assign N_72[23] = N_4[23];
    assign N_72[24] = N_4[24];
    assign N_72[25] = N_4[25];
    assign N_72[26] = N_4[26];
    assign N_72[27] = N_4[27];
    assign N_72[28] = N_4[28];
    assign N_72[29] = N_4[29];
    assign N_72[30] = N_4[30];
    assign N_72[31] = N_4[31];
    assign N_72[32] = N_4[32];
    assign N_72[33] = N_4[33];
    assign N_72[34] = N_4[34];
    assign N_72[35] = N_4[35];
    assign N_72[36] = N_4[36];
    assign N_72[37] = N_4[37];
    assign N_72[38] = N_4[38];
    assign N_72[39] = N_4[39];
    assign N_72[40] = N_4[40];
    assign N_72[41] = N_4[41];
    assign N_72[42] = N_4[42];
    assign N_72[43] = N_4[43];
    assign N_72[44] = N_4[44];
    assign N_72[45] = N_4[45];
    assign N_72[46] = N_4[46];
    assign N_72[47] = N_4[47];
    assign N_72[48] = N_4[48];
    assign N_72[49] = N_4[49];
    assign N_72[50] = N_4[50];
    assign N_72[51] = N_4[51];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
    assign N_73[20] = N_28[20];
    assign N_73[21] = N_28[21];
    assign N_73[22] = N_28[22];
    assign N_73[23] = N_28[23];
    assign N_73[24] = N_28[24];
    assign N_73[25] = N_28[25];
    assign N_73[26] = N_28[26];
    assign N_73[27] = N_28[27];
    assign N_73[28] = N_28[28];
    assign N_73[29] = N_28[29];
    assign N_73[30] = N_28[30];
    assign N_73[31] = N_28[31];
    assign N_73[32] = N_28[32];
    assign N_73[33] = N_28[33];
    assign N_73[34] = N_28[34];
    assign N_73[35] = N_28[35];
    assign N_73[36] = N_28[36];
    assign N_73[37] = N_28[37];
    assign N_73[38] = N_28[38];
    assign N_73[39] = N_28[39];
    assign N_73[40] = N_28[40];
    assign N_73[41] = N_28[41];
    assign N_73[42] = N_28[42];
    assign N_73[43] = N_28[43];
    assign N_73[44] = N_28[44];
    assign N_73[45] = N_28[45];
    assign N_73[46] = N_28[46];
    assign N_73[47] = N_28[47];
    assign N_73[48] = N_28[48];
    assign N_73[49] = N_28[49];
    assign N_73[50] = N_28[50];
    assign N_73[51] = N_28[51];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [105:0] tmpOut;
    wire  [52:0] tmpin1;
    wire  [52:0] tmpin2;
    wire  [105:0] med;
    assign med = tmpOut ;
    assign N_36 = med[105:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 10'b1111111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3513_1_3885;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_7032;  
wire [63:0] N_x_i_0_7033;  
wire [63:0] N_a_ij_0_7034;  
wire [63:0] N_y_1_1_7035;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3513_1_3885 = GlobalEnable1;
    Interleaved_MAC_PE_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE1_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3527_1_3899;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_7174;  
wire [63:0] N_x_i_0_7175;  
wire [63:0] N_a_ij_0_7176;  
wire [63:0] N_y_1_1_7177;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3527_1_3899 = GlobalEnable1;
    Interleaved_MAC_PE1_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE1_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE10_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3541_1_3913;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_7316;  
wire [63:0] N_x_i_0_7317;  
wire [63:0] N_a_ij_0_7318;  
wire [63:0] N_y_1_1_7319;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3541_1_3913 = GlobalEnable1;
    Interleaved_MAC_PE10_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE10_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE11_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3555_1_3927;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_7458;  
wire [63:0] N_x_i_0_7459;  
wire [63:0] N_a_ij_0_7460;  
wire [63:0] N_y_1_1_7461;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3555_1_3927 = GlobalEnable1;
    Interleaved_MAC_PE11_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE11_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE12_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3569_1_3941;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_7600;  
wire [63:0] N_x_i_0_7601;  
wire [63:0] N_a_ij_0_7602;  
wire [63:0] N_y_1_1_7603;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3569_1_3941 = GlobalEnable1;
    Interleaved_MAC_PE12_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE12_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE13_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3583_1_3955;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_7742;  
wire [63:0] N_x_i_0_7743;  
wire [63:0] N_a_ij_0_7744;  
wire [63:0] N_y_1_1_7745;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3583_1_3955 = GlobalEnable1;
    Interleaved_MAC_PE13_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE13_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE14_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3597_1_3969;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_7884;  
wire [63:0] N_x_i_0_7885;  
wire [63:0] N_a_ij_0_7886;  
wire [63:0] N_y_1_1_7887;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3597_1_3969 = GlobalEnable1;
    Interleaved_MAC_PE14_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE14_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE15_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3611_1_3983;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_8026;  
wire [63:0] N_x_i_0_8027;  
wire [63:0] N_a_ij_0_8028;  
wire [63:0] N_y_1_1_8029;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3611_1_3983 = GlobalEnable1;
    Interleaved_MAC_PE15_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE15_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE2_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3625_1_3997;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_8168;  
wire [63:0] N_x_i_0_8169;  
wire [63:0] N_a_ij_0_8170;  
wire [63:0] N_y_1_1_8171;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3625_1_3997 = GlobalEnable1;
    Interleaved_MAC_PE2_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE2_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE3_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3639_1_4011;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_8310;  
wire [63:0] N_x_i_0_8311;  
wire [63:0] N_a_ij_0_8312;  
wire [63:0] N_y_1_1_8313;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3639_1_4011 = GlobalEnable1;
    Interleaved_MAC_PE3_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE3_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE4_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3653_1_4025;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_8452;  
wire [63:0] N_x_i_0_8453;  
wire [63:0] N_a_ij_0_8454;  
wire [63:0] N_y_1_1_8455;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3653_1_4025 = GlobalEnable1;
    Interleaved_MAC_PE4_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE4_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE5_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3667_1_4039;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_8594;  
wire [63:0] N_x_i_0_8595;  
wire [63:0] N_a_ij_0_8596;  
wire [63:0] N_y_1_1_8597;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3667_1_4039 = GlobalEnable1;
    Interleaved_MAC_PE5_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE5_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE6_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3681_1_4053;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_8736;  
wire [63:0] N_x_i_0_8737;  
wire [63:0] N_a_ij_0_8738;  
wire [63:0] N_y_1_1_8739;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3681_1_4053 = GlobalEnable1;
    Interleaved_MAC_PE6_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE6_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE7_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3695_1_4067;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_8878;  
wire [63:0] N_x_i_0_8879;  
wire [63:0] N_a_ij_0_8880;  
wire [63:0] N_y_1_1_8881;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3695_1_4067 = GlobalEnable1;
    Interleaved_MAC_PE7_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE7_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE8_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3709_1_4081;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_9020;  
wire [63:0] N_x_i_0_9021;  
wire [63:0] N_a_ij_0_9022;  
wire [63:0] N_y_1_1_9023;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3709_1_4081 = GlobalEnable1;
    Interleaved_MAC_PE8_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE8_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE9_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y_1, // ufix64_En0
  input [63:0] a_ij, // ufix64_En0
  input [63:0] x_i // ufix64_En0
);
wire [63:0] N_5;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3723_1_4095;  
wire [63:0] N_3;  
wire [63:0] N_1;  
wire [63:0] N_2;  
wire [0:0] N_GlobalEnable1_0_9162;  
wire [63:0] N_x_i_0_9163;  
wire [63:0] N_a_ij_0_9164;  
wire [63:0] N_y_1_1_9165;  
wire GlobalResetSel;
assign y_1 = N_5;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3723_1_4095 = GlobalEnable1;
    Interleaved_MAC_PE9_MAC_PE_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .y(N_3),
      .z(N_5)    );
    Interleaved_MAC_PE9_MAC_PE_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_1),
      .y(N_2),
      .z(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Port_In (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] y, // ufix64_En0
  input [63:0] porty // ufix64_En0
);
wire [63:0] N_1;  
wire [63:0] N_porty_0_6644;  
wire [63:0] N_y_1_6645;  
wire GlobalResetSel;
assign y = N_1;
  assign N_1 = porty;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Port_Out (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] portx, // ufix64_En0
  input [63:0] x // ufix64_En0
);
wire [63:0] N_3;  
wire [63:0] N_x_0_6774;  
wire [63:0] N_portx_1_6775;  
wire GlobalResetSel;
assign portx = N_3;
  assign N_3 = x;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Sequence_1_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [3:0] inp;
output [1:0] outp;
wire [1:0] Sequence_1_ROM_CT [0:15];
wire rstSig;
assign rstSig = rst;
wire [1:0] outBuf;
reg  [1:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
wire [3:0] inpTr;
wire valid, validReg;
  assign outBuf = validReg == 1 ? romReg : 2'b0;
  assign valid = (inp >= 9) ? 0 : 1;
  assign inpTr = inp[3:0];
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) validDly_block ( .clk(clk), .en(en), .grst(rstSig), .rst(1'b0), .inp(valid), .outp(validReg) );
assign  outp=outBuf;
  generate
  begin: gen_Sequence_1_ROM
    assign Sequence_1_ROM_CT[0]=2'b00;
    assign Sequence_1_ROM_CT[1]=2'b01;
    assign Sequence_1_ROM_CT[2]=2'b10;
    assign Sequence_1_ROM_CT[3]=2'b11;
    assign Sequence_1_ROM_CT[4]=2'b00;
    assign Sequence_1_ROM_CT[5]=2'b00;
    assign Sequence_1_ROM_CT[6]=2'b00;
    assign Sequence_1_ROM_CT[7]=2'b00;
    assign Sequence_1_ROM_CT[8]=2'b00;
    genvar i;
    for (i=9; i<16; i=i+1)
    begin: axes_Sequence_1_ROM
      assign Sequence_1_ROM_CT[i] = 2'b0;
    end
  end //gen_Sequence_1_ROM
  endgenerate
  always @(posedge clk or posedge   rstSig)
  begin: Sequence_1_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 2'b0;
     end
      else if(en) begin
        romReg <= Sequence_1_ROM_CT[inpTr];
  end // if en
  end // Sequence_1_ROM_proc
endmodule

//----------------------------------------------------

module Sequence_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [1:0] seq // ufix2_En0
);
wire [1:0] N_2;  
wire [3:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3736_1_4108;  
wire [0:0] N_GlobalEnable1_0_6902;  
wire [1:0] N_seq_1_6903;  
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3736_1_4108 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [3:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen3736_1_4108[0];
    assign inbuf=N_1[3:0];
    Sequence_1_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen3736_1_4108[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(8),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Sequence_2_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [3:0] inp;
output [1:0] outp;
wire [1:0] Sequence_2_ROM_CT [0:15];
wire rstSig;
assign rstSig = rst;
wire [1:0] outBuf;
reg  [1:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
wire [3:0] inpTr;
wire valid, validReg;
  assign outBuf = validReg == 1 ? romReg : 2'b0;
  assign valid = (inp >= 9) ? 0 : 1;
  assign inpTr = inp[3:0];
    synDelayWithEnable #( .bitwidth(1), .preferRAMImpl(2), .delaylength(1) ) validDly_block ( .clk(clk), .en(en), .grst(rstSig), .rst(1'b0), .inp(valid), .outp(validReg) );
assign  outp=outBuf;
  generate
  begin: gen_Sequence_2_ROM
    assign Sequence_2_ROM_CT[0]=2'b00;
    assign Sequence_2_ROM_CT[1]=2'b00;
    assign Sequence_2_ROM_CT[2]=2'b00;
    assign Sequence_2_ROM_CT[3]=2'b00;
    assign Sequence_2_ROM_CT[4]=2'b01;
    assign Sequence_2_ROM_CT[5]=2'b10;
    assign Sequence_2_ROM_CT[6]=2'b11;
    assign Sequence_2_ROM_CT[7]=2'b00;
    assign Sequence_2_ROM_CT[8]=2'b00;
    genvar i;
    for (i=9; i<16; i=i+1)
    begin: axes_Sequence_2_ROM
      assign Sequence_2_ROM_CT[i] = 2'b0;
    end
  end //gen_Sequence_2_ROM
  endgenerate
  always @(posedge clk or posedge   rstSig)
  begin: Sequence_2_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 2'b0;
     end
      else if(en) begin
        romReg <= Sequence_2_ROM_CT[inpTr];
  end // if en
  end // Sequence_2_ROM_proc
endmodule

//----------------------------------------------------

module Sequence_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [1:0] seq // ufix2_En0
);
wire [1:0] N_2;  
wire [3:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3737_1_4109;  
wire [0:0] N_GlobalEnable1_0_6904;  
wire [1:0] N_seq_1_6905;  
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3737_1_4109 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [3:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen3737_1_4109[0];
    assign inbuf=N_1[3:0];
    Sequence_2_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen3737_1_4109[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(8),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3512_1_3884;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_7036;  
wire [1:0] N_Output_Select_0_7037;  
wire [1:0] N_Input_Select_0_7038;  
wire [63:0] N_x_0_7039;  
wire [63:0] N_In4_0_7040;  
wire [63:0] N_In5_0_7041;  
wire [63:0] N_In6_0_7042;  
wire [63:0] N_In7_0_7043;  
wire [63:0] N_Out1_1_7044;  
wire [63:0] N_Out2_1_7045;  
wire [63:0] N_Out3_1_7046;  
wire [63:0] N_Out4_1_7047;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3512_1_3884 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3526_1_3898;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_7178;  
wire [1:0] N_Output_Select_0_7179;  
wire [1:0] N_Input_Select_0_7180;  
wire [63:0] N_x_0_7181;  
wire [63:0] N_In4_0_7182;  
wire [63:0] N_In5_0_7183;  
wire [63:0] N_In6_0_7184;  
wire [63:0] N_In7_0_7185;  
wire [63:0] N_Out1_1_7186;  
wire [63:0] N_Out2_1_7187;  
wire [63:0] N_Out3_1_7188;  
wire [63:0] N_Out4_1_7189;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3526_1_3898 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE1_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE10 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3540_1_3912;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_7320;  
wire [1:0] N_Output_Select_0_7321;  
wire [1:0] N_Input_Select_0_7322;  
wire [63:0] N_x_0_7323;  
wire [63:0] N_In4_0_7324;  
wire [63:0] N_In5_0_7325;  
wire [63:0] N_In6_0_7326;  
wire [63:0] N_In7_0_7327;  
wire [63:0] N_Out1_1_7328;  
wire [63:0] N_Out2_1_7329;  
wire [63:0] N_Out3_1_7330;  
wire [63:0] N_Out4_1_7331;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3540_1_3912 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE10_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE11 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3554_1_3926;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_7462;  
wire [1:0] N_Output_Select_0_7463;  
wire [1:0] N_Input_Select_0_7464;  
wire [63:0] N_x_0_7465;  
wire [63:0] N_In4_0_7466;  
wire [63:0] N_In5_0_7467;  
wire [63:0] N_In6_0_7468;  
wire [63:0] N_In7_0_7469;  
wire [63:0] N_Out1_1_7470;  
wire [63:0] N_Out2_1_7471;  
wire [63:0] N_Out3_1_7472;  
wire [63:0] N_Out4_1_7473;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3554_1_3926 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE11_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE12 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3568_1_3940;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_7604;  
wire [1:0] N_Output_Select_0_7605;  
wire [1:0] N_Input_Select_0_7606;  
wire [63:0] N_x_0_7607;  
wire [63:0] N_In4_0_7608;  
wire [63:0] N_In5_0_7609;  
wire [63:0] N_In6_0_7610;  
wire [63:0] N_In7_0_7611;  
wire [63:0] N_Out1_1_7612;  
wire [63:0] N_Out2_1_7613;  
wire [63:0] N_Out3_1_7614;  
wire [63:0] N_Out4_1_7615;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3568_1_3940 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE12_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE13 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3582_1_3954;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_7746;  
wire [1:0] N_Output_Select_0_7747;  
wire [1:0] N_Input_Select_0_7748;  
wire [63:0] N_x_0_7749;  
wire [63:0] N_In4_0_7750;  
wire [63:0] N_In5_0_7751;  
wire [63:0] N_In6_0_7752;  
wire [63:0] N_In7_0_7753;  
wire [63:0] N_Out1_1_7754;  
wire [63:0] N_Out2_1_7755;  
wire [63:0] N_Out3_1_7756;  
wire [63:0] N_Out4_1_7757;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3582_1_3954 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE13_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE14 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3596_1_3968;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_7888;  
wire [1:0] N_Output_Select_0_7889;  
wire [1:0] N_Input_Select_0_7890;  
wire [63:0] N_x_0_7891;  
wire [63:0] N_In4_0_7892;  
wire [63:0] N_In5_0_7893;  
wire [63:0] N_In6_0_7894;  
wire [63:0] N_In7_0_7895;  
wire [63:0] N_Out1_1_7896;  
wire [63:0] N_Out2_1_7897;  
wire [63:0] N_Out3_1_7898;  
wire [63:0] N_Out4_1_7899;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3596_1_3968 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE14_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE15 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3610_1_3982;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_8030;  
wire [1:0] N_Output_Select_0_8031;  
wire [1:0] N_Input_Select_0_8032;  
wire [63:0] N_x_0_8033;  
wire [63:0] N_In4_0_8034;  
wire [63:0] N_In5_0_8035;  
wire [63:0] N_In6_0_8036;  
wire [63:0] N_In7_0_8037;  
wire [63:0] N_Out1_1_8038;  
wire [63:0] N_Out2_1_8039;  
wire [63:0] N_Out3_1_8040;  
wire [63:0] N_Out4_1_8041;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3610_1_3982 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE15_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3624_1_3996;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_8172;  
wire [1:0] N_Output_Select_0_8173;  
wire [1:0] N_Input_Select_0_8174;  
wire [63:0] N_x_0_8175;  
wire [63:0] N_In4_0_8176;  
wire [63:0] N_In5_0_8177;  
wire [63:0] N_In6_0_8178;  
wire [63:0] N_In7_0_8179;  
wire [63:0] N_Out1_1_8180;  
wire [63:0] N_Out2_1_8181;  
wire [63:0] N_Out3_1_8182;  
wire [63:0] N_Out4_1_8183;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3624_1_3996 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE2_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3638_1_4010;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_8314;  
wire [1:0] N_Output_Select_0_8315;  
wire [1:0] N_Input_Select_0_8316;  
wire [63:0] N_x_0_8317;  
wire [63:0] N_In4_0_8318;  
wire [63:0] N_In5_0_8319;  
wire [63:0] N_In6_0_8320;  
wire [63:0] N_In7_0_8321;  
wire [63:0] N_Out1_1_8322;  
wire [63:0] N_Out2_1_8323;  
wire [63:0] N_Out3_1_8324;  
wire [63:0] N_Out4_1_8325;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3638_1_4010 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE3_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3652_1_4024;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_8456;  
wire [1:0] N_Output_Select_0_8457;  
wire [1:0] N_Input_Select_0_8458;  
wire [63:0] N_x_0_8459;  
wire [63:0] N_In4_0_8460;  
wire [63:0] N_In5_0_8461;  
wire [63:0] N_In6_0_8462;  
wire [63:0] N_In7_0_8463;  
wire [63:0] N_Out1_1_8464;  
wire [63:0] N_Out2_1_8465;  
wire [63:0] N_Out3_1_8466;  
wire [63:0] N_Out4_1_8467;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3652_1_4024 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE4_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3666_1_4038;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_8598;  
wire [1:0] N_Output_Select_0_8599;  
wire [1:0] N_Input_Select_0_8600;  
wire [63:0] N_x_0_8601;  
wire [63:0] N_In4_0_8602;  
wire [63:0] N_In5_0_8603;  
wire [63:0] N_In6_0_8604;  
wire [63:0] N_In7_0_8605;  
wire [63:0] N_Out1_1_8606;  
wire [63:0] N_Out2_1_8607;  
wire [63:0] N_Out3_1_8608;  
wire [63:0] N_Out4_1_8609;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3666_1_4038 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE5_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE6 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3680_1_4052;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_8740;  
wire [1:0] N_Output_Select_0_8741;  
wire [1:0] N_Input_Select_0_8742;  
wire [63:0] N_x_0_8743;  
wire [63:0] N_In4_0_8744;  
wire [63:0] N_In5_0_8745;  
wire [63:0] N_In6_0_8746;  
wire [63:0] N_In7_0_8747;  
wire [63:0] N_Out1_1_8748;  
wire [63:0] N_Out2_1_8749;  
wire [63:0] N_Out3_1_8750;  
wire [63:0] N_Out4_1_8751;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3680_1_4052 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE6_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE7 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3694_1_4066;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_8882;  
wire [1:0] N_Output_Select_0_8883;  
wire [1:0] N_Input_Select_0_8884;  
wire [63:0] N_x_0_8885;  
wire [63:0] N_In4_0_8886;  
wire [63:0] N_In5_0_8887;  
wire [63:0] N_In6_0_8888;  
wire [63:0] N_In7_0_8889;  
wire [63:0] N_Out1_1_8890;  
wire [63:0] N_Out2_1_8891;  
wire [63:0] N_Out3_1_8892;  
wire [63:0] N_Out4_1_8893;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3694_1_4066 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE7_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE8 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3708_1_4080;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_9024;  
wire [1:0] N_Output_Select_0_9025;  
wire [1:0] N_Input_Select_0_9026;  
wire [63:0] N_x_0_9027;  
wire [63:0] N_In4_0_9028;  
wire [63:0] N_In5_0_9029;  
wire [63:0] N_In6_0_9030;  
wire [63:0] N_In7_0_9031;  
wire [63:0] N_Out1_1_9032;  
wire [63:0] N_Out2_1_9033;  
wire [63:0] N_Out3_1_9034;  
wire [63:0] N_Out4_1_9035;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3708_1_4080 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE8_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Interleaved_MAC_PE9 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [63:0] Out4, // ufix64_En0
  output [63:0] Out3, // ufix64_En0
  output [63:0] Out2, // ufix64_En0
  output [63:0] Out1, // ufix64_En0
  input [63:0] In7, // ufix64_En0
  input [63:0] In6, // ufix64_En0
  input [63:0] In5, // ufix64_En0
  input [63:0] In4, // ufix64_En0
  input [63:0] x, // ufix64_En0
  input [1:0] Input_Select, // ufix2_En0
  input [1:0] Output_Select // ufix2_En0
);
wire [1:0] N_5;  
wire [63:0] N_13;  
wire [1:0] N_6;  
wire [63:0] N_7;  
wire [63:0] N_8;  
wire [63:0] N_9;  
wire [63:0] N_10;  
wire [63:0] N_4;  
wire [63:0] N_3;  
wire [63:0] N_2;  
wire [63:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen3722_1_4094;  
wire [63:0] N_12;  
wire [63:0] N_11;  
wire [0:0] N_GlobalEnable1_0_9166;  
wire [1:0] N_Output_Select_0_9167;  
wire [1:0] N_Input_Select_0_9168;  
wire [63:0] N_x_0_9169;  
wire [63:0] N_In4_0_9170;  
wire [63:0] N_In5_0_9171;  
wire [63:0] N_In6_0_9172;  
wire [63:0] N_In7_0_9173;  
wire [63:0] N_Out1_1_9174;  
wire [63:0] N_Out2_1_9175;  
wire [63:0] N_Out3_1_9176;  
wire [63:0] N_Out4_1_9177;  
wire GlobalResetSel;
assign Out4 = N_4;
assign Out3 = N_3;
assign Out2 = N_2;
assign Out1 = N_1;
  assign N_10 = In7;
  assign N_9 = In6;
  assign N_8 = In5;
  assign N_7 = In4;
  assign N_12 = x;
  assign N_6 = Input_Select;
  assign N_5 = Output_Select;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen3722_1_4094 = GlobalEnable1;
  //start Demux
assign N_1 = $unsigned(N_5[1:0])==0 ? N_13 : 0;
assign N_2 = $unsigned(N_5[1:0])==1 ? N_13 : 0;
assign N_3 = $unsigned(N_5[1:0])==2 ? N_13 : 0;
assign N_4 = $unsigned(N_5[1:0])==3 ? N_13 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [63:0] med  [3:0];
    reg [63:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_8) ;
    assign med[2] = $unsigned(N_9) ;
    assign med[3] = $unsigned(N_10) ;

    always@(*)
    begin
      if(N_6[1:0] >= 4)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_6[1:0]];
    end

    assign N_11 = tmpOut;
  end // Mux_Block
  endgenerate
    Interleaved_MAC_PE9_MAC_PE  myMAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_12),
      .a_ij(N_11),
      .y_1(N_13)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module CEN598_HW2 (
  input clk,
  input GlobalReset,
  input [63:0] FP_Port_In_porty, // ufix64_En0
  input [63:0] FP_Port_In1_porty, // ufix64_En0
  input [63:0] FP_Port_In10_porty, // ufix64_En0
  input [63:0] FP_Port_In11_porty, // ufix64_En0
  input [63:0] FP_Port_In12_porty, // ufix64_En0
  input [63:0] FP_Port_In13_porty, // ufix64_En0
  input [63:0] FP_Port_In14_porty, // ufix64_En0
  input [63:0] FP_Port_In15_porty, // ufix64_En0
  input [63:0] FP_Port_In16_porty, // ufix64_En0
  input [63:0] FP_Port_In17_porty, // ufix64_En0
  input [63:0] FP_Port_In18_porty, // ufix64_En0
  input [63:0] FP_Port_In19_porty, // ufix64_En0
  input [63:0] FP_Port_In2_porty, // ufix64_En0
  input [63:0] FP_Port_In20_porty, // ufix64_En0
  input [63:0] FP_Port_In21_porty, // ufix64_En0
  input [63:0] FP_Port_In22_porty, // ufix64_En0
  input [63:0] FP_Port_In23_porty, // ufix64_En0
  input [63:0] FP_Port_In24_porty, // ufix64_En0
  input [63:0] FP_Port_In25_porty, // ufix64_En0
  input [63:0] FP_Port_In26_porty, // ufix64_En0
  input [63:0] FP_Port_In27_porty, // ufix64_En0
  input [63:0] FP_Port_In28_porty, // ufix64_En0
  input [63:0] FP_Port_In29_porty, // ufix64_En0
  input [63:0] FP_Port_In3_porty, // ufix64_En0
  input [63:0] FP_Port_In30_porty, // ufix64_En0
  input [63:0] FP_Port_In31_porty, // ufix64_En0
  input [63:0] FP_Port_In32_porty, // ufix64_En0
  input [63:0] FP_Port_In33_porty, // ufix64_En0
  input [63:0] FP_Port_In34_porty, // ufix64_En0
  input [63:0] FP_Port_In35_porty, // ufix64_En0
  input [63:0] FP_Port_In36_porty, // ufix64_En0
  input [63:0] FP_Port_In37_porty, // ufix64_En0
  input [63:0] FP_Port_In38_porty, // ufix64_En0
  input [63:0] FP_Port_In39_porty, // ufix64_En0
  input [63:0] FP_Port_In4_porty, // ufix64_En0
  input [63:0] FP_Port_In40_porty, // ufix64_En0
  input [63:0] FP_Port_In41_porty, // ufix64_En0
  input [63:0] FP_Port_In42_porty, // ufix64_En0
  input [63:0] FP_Port_In43_porty, // ufix64_En0
  input [63:0] FP_Port_In44_porty, // ufix64_En0
  input [63:0] FP_Port_In45_porty, // ufix64_En0
  input [63:0] FP_Port_In46_porty, // ufix64_En0
  input [63:0] FP_Port_In47_porty, // ufix64_En0
  input [63:0] FP_Port_In48_porty, // ufix64_En0
  input [63:0] FP_Port_In49_porty, // ufix64_En0
  input [63:0] FP_Port_In5_porty, // ufix64_En0
  input [63:0] FP_Port_In50_porty, // ufix64_En0
  input [63:0] FP_Port_In51_porty, // ufix64_En0
  input [63:0] FP_Port_In52_porty, // ufix64_En0
  input [63:0] FP_Port_In53_porty, // ufix64_En0
  input [63:0] FP_Port_In54_porty, // ufix64_En0
  input [63:0] FP_Port_In55_porty, // ufix64_En0
  input [63:0] FP_Port_In56_porty, // ufix64_En0
  input [63:0] FP_Port_In57_porty, // ufix64_En0
  input [63:0] FP_Port_In58_porty, // ufix64_En0
  input [63:0] FP_Port_In59_porty, // ufix64_En0
  input [63:0] FP_Port_In6_porty, // ufix64_En0
  input [63:0] FP_Port_In60_porty, // ufix64_En0
  input [63:0] FP_Port_In61_porty, // ufix64_En0
  input [63:0] FP_Port_In62_porty, // ufix64_En0
  input [63:0] FP_Port_In63_porty, // ufix64_En0
  input [63:0] FP_Port_In64_porty, // ufix64_En0
  input [63:0] FP_Port_In7_porty, // ufix64_En0
  input [63:0] FP_Port_In8_porty, // ufix64_En0
  input [63:0] FP_Port_In9_porty, // ufix64_En0
  output [63:0] FP_Port_Out_portx, // ufix64_En0
  output [63:0] FP_Port_Out1_portx, // ufix64_En0
  output [63:0] FP_Port_Out10_portx, // ufix64_En0
  output [63:0] FP_Port_Out11_portx, // ufix64_En0
  output [63:0] FP_Port_Out12_portx, // ufix64_En0
  output [63:0] FP_Port_Out13_portx, // ufix64_En0
  output [63:0] FP_Port_Out14_portx, // ufix64_En0
  output [63:0] FP_Port_Out15_portx, // ufix64_En0
  output [63:0] FP_Port_Out16_portx, // ufix64_En0
  output [63:0] FP_Port_Out17_portx, // ufix64_En0
  output [63:0] FP_Port_Out18_portx, // ufix64_En0
  output [63:0] FP_Port_Out19_portx, // ufix64_En0
  output [63:0] FP_Port_Out2_portx, // ufix64_En0
  output [63:0] FP_Port_Out20_portx, // ufix64_En0
  output [63:0] FP_Port_Out21_portx, // ufix64_En0
  output [63:0] FP_Port_Out22_portx, // ufix64_En0
  output [63:0] FP_Port_Out23_portx, // ufix64_En0
  output [63:0] FP_Port_Out24_portx, // ufix64_En0
  output [63:0] FP_Port_Out25_portx, // ufix64_En0
  output [63:0] FP_Port_Out26_portx, // ufix64_En0
  output [63:0] FP_Port_Out27_portx, // ufix64_En0
  output [63:0] FP_Port_Out28_portx, // ufix64_En0
  output [63:0] FP_Port_Out29_portx, // ufix64_En0
  output [63:0] FP_Port_Out3_portx, // ufix64_En0
  output [63:0] FP_Port_Out30_portx, // ufix64_En0
  output [63:0] FP_Port_Out31_portx, // ufix64_En0
  output [63:0] FP_Port_Out32_portx, // ufix64_En0
  output [63:0] FP_Port_Out33_portx, // ufix64_En0
  output [63:0] FP_Port_Out34_portx, // ufix64_En0
  output [63:0] FP_Port_Out35_portx, // ufix64_En0
  output [63:0] FP_Port_Out36_portx, // ufix64_En0
  output [63:0] FP_Port_Out37_portx, // ufix64_En0
  output [63:0] FP_Port_Out38_portx, // ufix64_En0
  output [63:0] FP_Port_Out39_portx, // ufix64_En0
  output [63:0] FP_Port_Out4_portx, // ufix64_En0
  output [63:0] FP_Port_Out40_portx, // ufix64_En0
  output [63:0] FP_Port_Out41_portx, // ufix64_En0
  output [63:0] FP_Port_Out42_portx, // ufix64_En0
  output [63:0] FP_Port_Out43_portx, // ufix64_En0
  output [63:0] FP_Port_Out44_portx, // ufix64_En0
  output [63:0] FP_Port_Out45_portx, // ufix64_En0
  output [63:0] FP_Port_Out46_portx, // ufix64_En0
  output [63:0] FP_Port_Out47_portx, // ufix64_En0
  output [63:0] FP_Port_Out48_portx, // ufix64_En0
  output [63:0] FP_Port_Out49_portx, // ufix64_En0
  output [63:0] FP_Port_Out5_portx, // ufix64_En0
  output [63:0] FP_Port_Out50_portx, // ufix64_En0
  output [63:0] FP_Port_Out51_portx, // ufix64_En0
  output [63:0] FP_Port_Out52_portx, // ufix64_En0
  output [63:0] FP_Port_Out53_portx, // ufix64_En0
  output [63:0] FP_Port_Out54_portx, // ufix64_En0
  output [63:0] FP_Port_Out55_portx, // ufix64_En0
  output [63:0] FP_Port_Out56_portx, // ufix64_En0
  output [63:0] FP_Port_Out57_portx, // ufix64_En0
  output [63:0] FP_Port_Out58_portx, // ufix64_En0
  output [63:0] FP_Port_Out59_portx, // ufix64_En0
  output [63:0] FP_Port_Out6_portx, // ufix64_En0
  output [63:0] FP_Port_Out60_portx, // ufix64_En0
  output [63:0] FP_Port_Out61_portx, // ufix64_En0
  output [63:0] FP_Port_Out62_portx, // ufix64_En0
  output [63:0] FP_Port_Out63_portx, // ufix64_En0
  output [63:0] FP_Port_Out7_portx, // ufix64_En0
  output [63:0] FP_Port_Out8_portx, // ufix64_En0
  output [63:0] FP_Port_Out9_portx // ufix64_En0
//@
);
//@

wire [63:0] FP_Port_In9_N_porty_1_3108;  
wire [63:0] FP_Port_In8_N_porty_1_3114;  
wire [63:0] FP_Port_In7_N_porty_1_3120;  
wire [63:0] FP_Port_In64_N_porty_1_3126;  
wire [63:0] FP_Port_In63_N_porty_1_3132;  
wire [63:0] FP_Port_In62_N_porty_1_3138;  
wire [63:0] FP_Port_In61_N_porty_1_3144;  
wire [63:0] FP_Port_In60_N_porty_1_3150;  
wire [63:0] FP_Port_In6_N_porty_1_3156;  
wire [63:0] FP_Port_In59_N_porty_1_3162;  
wire [63:0] FP_Port_In58_N_porty_1_3168;  
wire [63:0] FP_Port_In57_N_porty_1_3174;  
wire [63:0] FP_Port_In56_N_porty_1_3180;  
wire [63:0] FP_Port_In55_N_porty_1_3186;  
wire [63:0] FP_Port_In54_N_porty_1_3192;  
wire [63:0] FP_Port_In53_N_porty_1_3198;  
wire [63:0] FP_Port_In52_N_porty_1_3204;  
wire [63:0] FP_Port_In51_N_porty_1_3210;  
wire [63:0] FP_Port_In50_N_porty_1_3216;  
wire [63:0] FP_Port_In5_N_porty_1_3222;  
wire [63:0] FP_Port_In49_N_porty_1_3228;  
wire [63:0] FP_Port_In48_N_porty_1_3234;  
wire [63:0] FP_Port_In47_N_porty_1_3240;  
wire [63:0] FP_Port_In46_N_porty_1_3246;  
wire [63:0] FP_Port_In45_N_porty_1_3252;  
wire [63:0] FP_Port_In44_N_porty_1_3258;  
wire [63:0] FP_Port_In43_N_porty_1_3264;  
wire [63:0] FP_Port_In42_N_porty_1_3270;  
wire [63:0] FP_Port_In41_N_porty_1_3276;  
wire [63:0] FP_Port_In40_N_porty_1_3282;  
wire [63:0] FP_Port_In4_N_porty_1_3288;  
wire [63:0] FP_Port_In39_N_porty_1_3294;  
wire [63:0] FP_Port_In38_N_porty_1_3300;  
wire [63:0] FP_Port_In37_N_porty_1_3306;  
wire [63:0] FP_Port_In36_N_porty_1_3312;  
wire [63:0] FP_Port_In35_N_porty_1_3318;  
wire [63:0] FP_Port_In34_N_porty_1_3324;  
wire [63:0] FP_Port_In33_N_porty_1_3330;  
wire [63:0] FP_Port_In32_N_porty_1_3336;  
wire [63:0] FP_Port_In31_N_porty_1_3342;  
wire [63:0] FP_Port_In30_N_porty_1_3348;  
wire [63:0] FP_Port_In3_N_porty_1_3354;  
wire [63:0] FP_Port_In29_N_porty_1_3360;  
wire [63:0] FP_Port_In28_N_porty_1_3366;  
wire [63:0] FP_Port_In27_N_porty_1_3372;  
wire [63:0] FP_Port_In26_N_porty_1_3378;  
wire [63:0] FP_Port_In25_N_porty_1_3384;  
wire [63:0] FP_Port_In24_N_porty_1_3390;  
wire [63:0] FP_Port_In23_N_porty_1_3396;  
wire [63:0] FP_Port_In22_N_porty_1_3402;  
wire [63:0] FP_Port_In21_N_porty_1_3408;  
wire [63:0] FP_Port_In20_N_porty_1_3414;  
wire [63:0] FP_Port_In2_N_porty_1_3420;  
wire [63:0] FP_Port_In19_N_porty_1_3426;  
wire [63:0] FP_Port_In18_N_porty_1_3432;  
wire [63:0] FP_Port_In17_N_porty_1_3438;  
wire [63:0] FP_Port_In16_N_porty_1_3444;  
wire [63:0] FP_Port_In15_N_porty_1_3450;  
wire [63:0] FP_Port_In14_N_porty_1_3456;  
wire [63:0] FP_Port_In13_N_porty_1_3462;  
wire [63:0] FP_Port_In12_N_porty_1_3468;  
wire [63:0] FP_Port_In11_N_porty_1_3474;  
wire [63:0] FP_Port_In10_N_porty_1_3480;  
wire [63:0] FP_Port_In1_N_porty_1_3486;  
wire [63:0] FP_Port_In_N_porty_1_3492;  
wire [0:0] GlobalEnableSignal1;  
wire [63:0] N_137;  
wire [63:0] N_142;  
wire [63:0] N_143;  
wire [63:0] N_144;  
wire [63:0] N_129;  
wire [63:0] N_134;  
wire [63:0] N_135;  
wire [63:0] N_136;  
wire [63:0] N_121;  
wire [63:0] N_126;  
wire [63:0] N_127;  
wire [63:0] N_128;  
wire [63:0] N_113;  
wire [63:0] N_118;  
wire [63:0] N_119;  
wire [63:0] N_120;  
wire [63:0] N_105;  
wire [63:0] N_110;  
wire [63:0] N_111;  
wire [63:0] N_112;  
wire [63:0] N_97;  
wire [63:0] N_102;  
wire [63:0] N_103;  
wire [63:0] N_104;  
wire [63:0] N_89;  
wire [63:0] N_94;  
wire [63:0] N_95;  
wire [63:0] N_96;  
wire [63:0] N_81;  
wire [63:0] N_86;  
wire [63:0] N_87;  
wire [63:0] N_88;  
wire [63:0] N_185;  
wire [63:0] N_190;  
wire [63:0] N_191;  
wire [63:0] N_192;  
wire [63:0] N_177;  
wire [63:0] N_182;  
wire [63:0] N_183;  
wire [63:0] N_184;  
wire [63:0] N_169;  
wire [63:0] N_174;  
wire [63:0] N_175;  
wire [63:0] N_176;  
wire [63:0] N_161;  
wire [63:0] N_166;  
wire [63:0] N_167;  
wire [63:0] N_168;  
wire [63:0] N_153;  
wire [63:0] N_158;  
wire [63:0] N_159;  
wire [63:0] N_160;  
wire [63:0] N_145;  
wire [63:0] N_150;  
wire [63:0] N_151;  
wire [63:0] N_152;  
wire [63:0] N_73;  
wire [63:0] N_78;  
wire [63:0] N_79;  
wire [63:0] N_80;  
wire [63:0] N_64;  
wire [63:0] N_70;  
wire [63:0] N_71;  
wire [63:0] N_72;  
wire [1:0] N_194;  
wire [1:0] N_195;  
wire [63:0] FP_Port_Out9_N_portx_1_3819;  
wire [63:0] FP_Port_Out8_N_portx_1_3818;  
wire [63:0] FP_Port_Out7_N_portx_1_3817;  
wire [63:0] FP_Port_Out63_N_portx_1_3816;  
wire [63:0] FP_Port_Out62_N_portx_1_3815;  
wire [63:0] FP_Port_Out61_N_portx_1_3814;  
wire [63:0] FP_Port_Out60_N_portx_1_3813;  
wire [63:0] FP_Port_Out6_N_portx_1_3812;  
wire [63:0] FP_Port_Out59_N_portx_1_3811;  
wire [63:0] FP_Port_Out58_N_portx_1_3810;  
wire [63:0] FP_Port_Out57_N_portx_1_3809;  
wire [63:0] FP_Port_Out56_N_portx_1_3808;  
wire [63:0] FP_Port_Out55_N_portx_1_3807;  
wire [63:0] FP_Port_Out54_N_portx_1_3806;  
wire [63:0] FP_Port_Out53_N_portx_1_3805;  
wire [63:0] FP_Port_Out52_N_portx_1_3804;  
wire [63:0] FP_Port_Out51_N_portx_1_3803;  
wire [63:0] FP_Port_Out50_N_portx_1_3802;  
wire [63:0] FP_Port_Out5_N_portx_1_3801;  
wire [63:0] FP_Port_Out49_N_portx_1_3800;  
wire [63:0] FP_Port_Out48_N_portx_1_3799;  
wire [63:0] FP_Port_Out47_N_portx_1_3798;  
wire [63:0] FP_Port_Out46_N_portx_1_3797;  
wire [63:0] FP_Port_Out45_N_portx_1_3796;  
wire [63:0] FP_Port_Out44_N_portx_1_3795;  
wire [63:0] FP_Port_Out43_N_portx_1_3794;  
wire [63:0] FP_Port_Out42_N_portx_1_3793;  
wire [63:0] FP_Port_Out41_N_portx_1_3792;  
wire [63:0] FP_Port_Out40_N_portx_1_3791;  
wire [63:0] FP_Port_Out4_N_portx_1_3790;  
wire [63:0] FP_Port_Out39_N_portx_1_3789;  
wire [63:0] FP_Port_Out38_N_portx_1_3788;  
wire [63:0] FP_Port_Out37_N_portx_1_3787;  
wire [63:0] FP_Port_Out36_N_portx_1_3786;  
wire [63:0] FP_Port_Out35_N_portx_1_3785;  
wire [63:0] FP_Port_Out34_N_portx_1_3784;  
wire [63:0] FP_Port_Out33_N_portx_1_3783;  
wire [63:0] FP_Port_Out32_N_portx_1_3782;  
wire [63:0] FP_Port_Out31_N_portx_1_3781;  
wire [63:0] FP_Port_Out30_N_portx_1_3780;  
wire [63:0] FP_Port_Out3_N_portx_1_3779;  
wire [63:0] FP_Port_Out29_N_portx_1_3778;  
wire [63:0] FP_Port_Out28_N_portx_1_3777;  
wire [63:0] FP_Port_Out27_N_portx_1_3776;  
wire [63:0] FP_Port_Out26_N_portx_1_3775;  
wire [63:0] FP_Port_Out25_N_portx_1_3774;  
wire [63:0] FP_Port_Out24_N_portx_1_3773;  
wire [63:0] FP_Port_Out23_N_portx_1_3772;  
wire [63:0] FP_Port_Out22_N_portx_1_3771;  
wire [63:0] FP_Port_Out21_N_portx_1_3770;  
wire [63:0] FP_Port_Out20_N_portx_1_3769;  
wire [63:0] FP_Port_Out2_N_portx_1_3768;  
wire [63:0] FP_Port_Out19_N_portx_1_3767;  
wire [63:0] FP_Port_Out18_N_portx_1_3766;  
wire [63:0] FP_Port_Out17_N_portx_1_3765;  
wire [63:0] FP_Port_Out16_N_portx_1_3764;  
wire [63:0] FP_Port_Out15_N_portx_1_3763;  
wire [63:0] FP_Port_Out14_N_portx_1_3762;  
wire [63:0] FP_Port_Out13_N_portx_1_3761;  
wire [63:0] FP_Port_Out12_N_portx_1_3760;  
wire [63:0] FP_Port_Out11_N_portx_1_3759;  
wire [63:0] FP_Port_Out10_N_portx_1_3758;  
wire [63:0] FP_Port_Out1_N_portx_1_3757;  
wire [63:0] FP_Port_Out_N_portx_1_3756;  
wire [63:0] N_85;  
wire [63:0] N_74;  
wire [63:0] N_75;  
wire [63:0] N_189;  
wire [63:0] N_186;  
wire [63:0] N_187;  
wire [63:0] N_188;  
wire [63:0] N_181;  
wire [63:0] N_76;  
wire [63:0] N_178;  
wire [63:0] N_179;  
wire [63:0] N_180;  
wire [63:0] N_173;  
wire [63:0] N_170;  
wire [63:0] N_171;  
wire [63:0] N_172;  
wire [63:0] N_165;  
wire [63:0] N_162;  
wire [63:0] N_163;  
wire [63:0] N_77;  
wire [63:0] N_164;  
wire [63:0] N_157;  
wire [63:0] N_154;  
wire [63:0] N_155;  
wire [63:0] N_156;  
wire [63:0] N_149;  
wire [63:0] N_146;  
wire [63:0] N_147;  
wire [63:0] N_148;  
wire [63:0] N_141;  
wire [63:0] N_65;  
wire [63:0] N_138;  
wire [63:0] N_139;  
wire [63:0] N_140;  
wire [63:0] N_133;  
wire [63:0] N_130;  
wire [63:0] N_131;  
wire [63:0] N_132;  
wire [63:0] N_125;  
wire [63:0] N_122;  
wire [63:0] N_123;  
wire [63:0] N_66;  
wire [63:0] N_124;  
wire [63:0] N_117;  
wire [63:0] N_114;  
wire [63:0] N_115;  
wire [63:0] N_116;  
wire [63:0] N_109;  
wire [63:0] N_106;  
wire [63:0] N_107;  
wire [63:0] N_108;  
wire [63:0] N_101;  
wire [63:0] N_67;  
wire [63:0] N_98;  
wire [63:0] N_99;  
wire [63:0] N_100;  
wire [63:0] N_93;  
wire [63:0] N_90;  
wire [63:0] N_91;  
wire [63:0] N_92;  
wire [63:0] N_82;  
wire [63:0] N_83;  
wire [63:0] N_84;  
wire [63:0] N_68;  
wire [63:0] N_193;  
wire GlobalResetSel;
  wire GlobalEnable1;
  assign GlobalEnable1 = 1;
    FP_Port_In  myFP_Port_In (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In_N_porty_1_3492),
      .y(N_193)    );
    FP_Port_In  myFP_Port_In1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In1_N_porty_1_3486),
      .y(N_68)    );
    FP_Port_In  myFP_Port_In10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In10_N_porty_1_3480),
      .y(N_84)    );
    FP_Port_In  myFP_Port_In11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In11_N_porty_1_3474),
      .y(N_83)    );
    FP_Port_In  myFP_Port_In12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In12_N_porty_1_3468),
      .y(N_82)    );
    FP_Port_In  myFP_Port_In13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In13_N_porty_1_3462),
      .y(N_92)    );
    FP_Port_In  myFP_Port_In14 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In14_N_porty_1_3456),
      .y(N_91)    );
    FP_Port_In  myFP_Port_In15 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In15_N_porty_1_3450),
      .y(N_90)    );
    FP_Port_In  myFP_Port_In16 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In16_N_porty_1_3444),
      .y(N_93)    );
    FP_Port_In  myFP_Port_In17 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In17_N_porty_1_3438),
      .y(N_100)    );
    FP_Port_In  myFP_Port_In18 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In18_N_porty_1_3432),
      .y(N_99)    );
    FP_Port_In  myFP_Port_In19 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In19_N_porty_1_3426),
      .y(N_98)    );
    FP_Port_In  myFP_Port_In2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In2_N_porty_1_3420),
      .y(N_67)    );
    FP_Port_In  myFP_Port_In20 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In20_N_porty_1_3414),
      .y(N_101)    );
    FP_Port_In  myFP_Port_In21 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In21_N_porty_1_3408),
      .y(N_108)    );
    FP_Port_In  myFP_Port_In22 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In22_N_porty_1_3402),
      .y(N_107)    );
    FP_Port_In  myFP_Port_In23 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In23_N_porty_1_3396),
      .y(N_106)    );
    FP_Port_In  myFP_Port_In24 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In24_N_porty_1_3390),
      .y(N_109)    );
    FP_Port_In  myFP_Port_In25 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In25_N_porty_1_3384),
      .y(N_116)    );
    FP_Port_In  myFP_Port_In26 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In26_N_porty_1_3378),
      .y(N_115)    );
    FP_Port_In  myFP_Port_In27 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In27_N_porty_1_3372),
      .y(N_114)    );
    FP_Port_In  myFP_Port_In28 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In28_N_porty_1_3366),
      .y(N_117)    );
    FP_Port_In  myFP_Port_In29 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In29_N_porty_1_3360),
      .y(N_124)    );
    FP_Port_In  myFP_Port_In3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In3_N_porty_1_3354),
      .y(N_66)    );
    FP_Port_In  myFP_Port_In30 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In30_N_porty_1_3348),
      .y(N_123)    );
    FP_Port_In  myFP_Port_In31 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In31_N_porty_1_3342),
      .y(N_122)    );
    FP_Port_In  myFP_Port_In32 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In32_N_porty_1_3336),
      .y(N_125)    );
    FP_Port_In  myFP_Port_In33 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In33_N_porty_1_3330),
      .y(N_132)    );
    FP_Port_In  myFP_Port_In34 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In34_N_porty_1_3324),
      .y(N_131)    );
    FP_Port_In  myFP_Port_In35 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In35_N_porty_1_3318),
      .y(N_130)    );
    FP_Port_In  myFP_Port_In36 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In36_N_porty_1_3312),
      .y(N_133)    );
    FP_Port_In  myFP_Port_In37 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In37_N_porty_1_3306),
      .y(N_140)    );
    FP_Port_In  myFP_Port_In38 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In38_N_porty_1_3300),
      .y(N_139)    );
    FP_Port_In  myFP_Port_In39 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In39_N_porty_1_3294),
      .y(N_138)    );
    FP_Port_In  myFP_Port_In4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In4_N_porty_1_3288),
      .y(N_65)    );
    FP_Port_In  myFP_Port_In40 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In40_N_porty_1_3282),
      .y(N_141)    );
    FP_Port_In  myFP_Port_In41 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In41_N_porty_1_3276),
      .y(N_148)    );
    FP_Port_In  myFP_Port_In42 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In42_N_porty_1_3270),
      .y(N_147)    );
    FP_Port_In  myFP_Port_In43 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In43_N_porty_1_3264),
      .y(N_146)    );
    FP_Port_In  myFP_Port_In44 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In44_N_porty_1_3258),
      .y(N_149)    );
    FP_Port_In  myFP_Port_In45 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In45_N_porty_1_3252),
      .y(N_156)    );
    FP_Port_In  myFP_Port_In46 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In46_N_porty_1_3246),
      .y(N_155)    );
    FP_Port_In  myFP_Port_In47 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In47_N_porty_1_3240),
      .y(N_154)    );
    FP_Port_In  myFP_Port_In48 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In48_N_porty_1_3234),
      .y(N_157)    );
    FP_Port_In  myFP_Port_In49 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In49_N_porty_1_3228),
      .y(N_164)    );
    FP_Port_In  myFP_Port_In5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In5_N_porty_1_3222),
      .y(N_77)    );
    FP_Port_In  myFP_Port_In50 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In50_N_porty_1_3216),
      .y(N_163)    );
    FP_Port_In  myFP_Port_In51 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In51_N_porty_1_3210),
      .y(N_162)    );
    FP_Port_In  myFP_Port_In52 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In52_N_porty_1_3204),
      .y(N_165)    );
    FP_Port_In  myFP_Port_In53 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In53_N_porty_1_3198),
      .y(N_172)    );
    FP_Port_In  myFP_Port_In54 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In54_N_porty_1_3192),
      .y(N_171)    );
    FP_Port_In  myFP_Port_In55 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In55_N_porty_1_3186),
      .y(N_170)    );
    FP_Port_In  myFP_Port_In56 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In56_N_porty_1_3180),
      .y(N_173)    );
    FP_Port_In  myFP_Port_In57 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In57_N_porty_1_3174),
      .y(N_180)    );
    FP_Port_In  myFP_Port_In58 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In58_N_porty_1_3168),
      .y(N_179)    );
    FP_Port_In  myFP_Port_In59 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In59_N_porty_1_3162),
      .y(N_178)    );
    FP_Port_In  myFP_Port_In6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In6_N_porty_1_3156),
      .y(N_76)    );
    FP_Port_In  myFP_Port_In60 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In60_N_porty_1_3150),
      .y(N_181)    );
    FP_Port_In  myFP_Port_In61 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In61_N_porty_1_3144),
      .y(N_188)    );
    FP_Port_In  myFP_Port_In62 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In62_N_porty_1_3138),
      .y(N_187)    );
    FP_Port_In  myFP_Port_In63 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In63_N_porty_1_3132),
      .y(N_186)    );
    FP_Port_In  myFP_Port_In64 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In64_N_porty_1_3126),
      .y(N_189)    );
    FP_Port_In  myFP_Port_In7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In7_N_porty_1_3120),
      .y(N_75)    );
    FP_Port_In  myFP_Port_In8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In8_N_porty_1_3114),
      .y(N_74)    );
    FP_Port_In  myFP_Port_In9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In9_N_porty_1_3108),
      .y(N_85)    );
    FP_Port_Out  myFP_Port_Out (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_64),
      .portx(FP_Port_Out_N_portx_1_3756)    );
    FP_Port_Out  myFP_Port_Out1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_70),
      .portx(FP_Port_Out1_N_portx_1_3757)    );
    FP_Port_Out  myFP_Port_Out10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_87),
      .portx(FP_Port_Out10_N_portx_1_3758)    );
    FP_Port_Out  myFP_Port_Out11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_88),
      .portx(FP_Port_Out11_N_portx_1_3759)    );
    FP_Port_Out  myFP_Port_Out12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_95),
      .portx(FP_Port_Out12_N_portx_1_3760)    );
    FP_Port_Out  myFP_Port_Out13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_96),
      .portx(FP_Port_Out13_N_portx_1_3761)    );
    FP_Port_Out  myFP_Port_Out14 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_89),
      .portx(FP_Port_Out14_N_portx_1_3762)    );
    FP_Port_Out  myFP_Port_Out15 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_94),
      .portx(FP_Port_Out15_N_portx_1_3763)    );
    FP_Port_Out  myFP_Port_Out16 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_103),
      .portx(FP_Port_Out16_N_portx_1_3764)    );
    FP_Port_Out  myFP_Port_Out17 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_104),
      .portx(FP_Port_Out17_N_portx_1_3765)    );
    FP_Port_Out  myFP_Port_Out18 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_97),
      .portx(FP_Port_Out18_N_portx_1_3766)    );
    FP_Port_Out  myFP_Port_Out19 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_102),
      .portx(FP_Port_Out19_N_portx_1_3767)    );
    FP_Port_Out  myFP_Port_Out2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_71),
      .portx(FP_Port_Out2_N_portx_1_3768)    );
    FP_Port_Out  myFP_Port_Out20 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_111),
      .portx(FP_Port_Out20_N_portx_1_3769)    );
    FP_Port_Out  myFP_Port_Out21 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_112),
      .portx(FP_Port_Out21_N_portx_1_3770)    );
    FP_Port_Out  myFP_Port_Out22 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_105),
      .portx(FP_Port_Out22_N_portx_1_3771)    );
    FP_Port_Out  myFP_Port_Out23 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_110),
      .portx(FP_Port_Out23_N_portx_1_3772)    );
    FP_Port_Out  myFP_Port_Out24 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_119),
      .portx(FP_Port_Out24_N_portx_1_3773)    );
    FP_Port_Out  myFP_Port_Out25 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_120),
      .portx(FP_Port_Out25_N_portx_1_3774)    );
    FP_Port_Out  myFP_Port_Out26 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_113),
      .portx(FP_Port_Out26_N_portx_1_3775)    );
    FP_Port_Out  myFP_Port_Out27 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_118),
      .portx(FP_Port_Out27_N_portx_1_3776)    );
    FP_Port_Out  myFP_Port_Out28 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_127),
      .portx(FP_Port_Out28_N_portx_1_3777)    );
    FP_Port_Out  myFP_Port_Out29 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_128),
      .portx(FP_Port_Out29_N_portx_1_3778)    );
    FP_Port_Out  myFP_Port_Out3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_72),
      .portx(FP_Port_Out3_N_portx_1_3779)    );
    FP_Port_Out  myFP_Port_Out30 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_121),
      .portx(FP_Port_Out30_N_portx_1_3780)    );
    FP_Port_Out  myFP_Port_Out31 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_126),
      .portx(FP_Port_Out31_N_portx_1_3781)    );
    FP_Port_Out  myFP_Port_Out32 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_135),
      .portx(FP_Port_Out32_N_portx_1_3782)    );
    FP_Port_Out  myFP_Port_Out33 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_136),
      .portx(FP_Port_Out33_N_portx_1_3783)    );
    FP_Port_Out  myFP_Port_Out34 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_129),
      .portx(FP_Port_Out34_N_portx_1_3784)    );
    FP_Port_Out  myFP_Port_Out35 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_134),
      .portx(FP_Port_Out35_N_portx_1_3785)    );
    FP_Port_Out  myFP_Port_Out36 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_143),
      .portx(FP_Port_Out36_N_portx_1_3786)    );
    FP_Port_Out  myFP_Port_Out37 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_144),
      .portx(FP_Port_Out37_N_portx_1_3787)    );
    FP_Port_Out  myFP_Port_Out38 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_137),
      .portx(FP_Port_Out38_N_portx_1_3788)    );
    FP_Port_Out  myFP_Port_Out39 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_142),
      .portx(FP_Port_Out39_N_portx_1_3789)    );
    FP_Port_Out  myFP_Port_Out4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_73),
      .portx(FP_Port_Out4_N_portx_1_3790)    );
    FP_Port_Out  myFP_Port_Out40 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_151),
      .portx(FP_Port_Out40_N_portx_1_3791)    );
    FP_Port_Out  myFP_Port_Out41 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_152),
      .portx(FP_Port_Out41_N_portx_1_3792)    );
    FP_Port_Out  myFP_Port_Out42 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_145),
      .portx(FP_Port_Out42_N_portx_1_3793)    );
    FP_Port_Out  myFP_Port_Out43 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_150),
      .portx(FP_Port_Out43_N_portx_1_3794)    );
    FP_Port_Out  myFP_Port_Out44 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_159),
      .portx(FP_Port_Out44_N_portx_1_3795)    );
    FP_Port_Out  myFP_Port_Out45 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_160),
      .portx(FP_Port_Out45_N_portx_1_3796)    );
    FP_Port_Out  myFP_Port_Out46 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_153),
      .portx(FP_Port_Out46_N_portx_1_3797)    );
    FP_Port_Out  myFP_Port_Out47 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_158),
      .portx(FP_Port_Out47_N_portx_1_3798)    );
    FP_Port_Out  myFP_Port_Out48 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_167),
      .portx(FP_Port_Out48_N_portx_1_3799)    );
    FP_Port_Out  myFP_Port_Out49 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_168),
      .portx(FP_Port_Out49_N_portx_1_3800)    );
    FP_Port_Out  myFP_Port_Out5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_78),
      .portx(FP_Port_Out5_N_portx_1_3801)    );
    FP_Port_Out  myFP_Port_Out50 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_161),
      .portx(FP_Port_Out50_N_portx_1_3802)    );
    FP_Port_Out  myFP_Port_Out51 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_166),
      .portx(FP_Port_Out51_N_portx_1_3803)    );
    FP_Port_Out  myFP_Port_Out52 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_175),
      .portx(FP_Port_Out52_N_portx_1_3804)    );
    FP_Port_Out  myFP_Port_Out53 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_176),
      .portx(FP_Port_Out53_N_portx_1_3805)    );
    FP_Port_Out  myFP_Port_Out54 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_169),
      .portx(FP_Port_Out54_N_portx_1_3806)    );
    FP_Port_Out  myFP_Port_Out55 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_174),
      .portx(FP_Port_Out55_N_portx_1_3807)    );
    FP_Port_Out  myFP_Port_Out56 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_183),
      .portx(FP_Port_Out56_N_portx_1_3808)    );
    FP_Port_Out  myFP_Port_Out57 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_184),
      .portx(FP_Port_Out57_N_portx_1_3809)    );
    FP_Port_Out  myFP_Port_Out58 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_177),
      .portx(FP_Port_Out58_N_portx_1_3810)    );
    FP_Port_Out  myFP_Port_Out59 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_182),
      .portx(FP_Port_Out59_N_portx_1_3811)    );
    FP_Port_Out  myFP_Port_Out6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_79),
      .portx(FP_Port_Out6_N_portx_1_3812)    );
    FP_Port_Out  myFP_Port_Out60 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_191),
      .portx(FP_Port_Out60_N_portx_1_3813)    );
    FP_Port_Out  myFP_Port_Out61 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_192),
      .portx(FP_Port_Out61_N_portx_1_3814)    );
    FP_Port_Out  myFP_Port_Out62 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_185),
      .portx(FP_Port_Out62_N_portx_1_3815)    );
    FP_Port_Out  myFP_Port_Out63 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_190),
      .portx(FP_Port_Out63_N_portx_1_3816)    );
    FP_Port_Out  myFP_Port_Out7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_80),
      .portx(FP_Port_Out7_N_portx_1_3817)    );
    FP_Port_Out  myFP_Port_Out8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_81),
      .portx(FP_Port_Out8_N_portx_1_3818)    );
    FP_Port_Out  myFP_Port_Out9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_86),
      .portx(FP_Port_Out9_N_portx_1_3819)    );
    Sequence_1  mySequence_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_195)    );
    Sequence_2  mySequence_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_194)    );
    Interleaved_MAC_PE  myInterleaved_MAC_PE (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_68),
      .In5(N_67),
      .In6(N_66),
      .In7(N_65),
      .Out1(N_64) ,
      .Out2(N_70) ,
      .Out3(N_71) ,
      .Out4(N_72)    );
    Interleaved_MAC_PE1  myInterleaved_MAC_PE1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_77),
      .In5(N_76),
      .In6(N_75),
      .In7(N_74),
      .Out1(N_73) ,
      .Out2(N_78) ,
      .Out3(N_79) ,
      .Out4(N_80)    );
    Interleaved_MAC_PE10  myInterleaved_MAC_PE10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_149),
      .In5(N_148),
      .In6(N_147),
      .In7(N_146),
      .Out1(N_145) ,
      .Out2(N_150) ,
      .Out3(N_151) ,
      .Out4(N_152)    );
    Interleaved_MAC_PE11  myInterleaved_MAC_PE11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_157),
      .In5(N_156),
      .In6(N_155),
      .In7(N_154),
      .Out1(N_153) ,
      .Out2(N_158) ,
      .Out3(N_159) ,
      .Out4(N_160)    );
    Interleaved_MAC_PE12  myInterleaved_MAC_PE12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_165),
      .In5(N_164),
      .In6(N_163),
      .In7(N_162),
      .Out1(N_161) ,
      .Out2(N_166) ,
      .Out3(N_167) ,
      .Out4(N_168)    );
    Interleaved_MAC_PE13  myInterleaved_MAC_PE13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_173),
      .In5(N_172),
      .In6(N_171),
      .In7(N_170),
      .Out1(N_169) ,
      .Out2(N_174) ,
      .Out3(N_175) ,
      .Out4(N_176)    );
    Interleaved_MAC_PE14  myInterleaved_MAC_PE14 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_181),
      .In5(N_180),
      .In6(N_179),
      .In7(N_178),
      .Out1(N_177) ,
      .Out2(N_182) ,
      .Out3(N_183) ,
      .Out4(N_184)    );
    Interleaved_MAC_PE15  myInterleaved_MAC_PE15 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_189),
      .In5(N_188),
      .In6(N_187),
      .In7(N_186),
      .Out1(N_185) ,
      .Out2(N_190) ,
      .Out3(N_191) ,
      .Out4(N_192)    );
    Interleaved_MAC_PE2  myInterleaved_MAC_PE2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_85),
      .In5(N_84),
      .In6(N_83),
      .In7(N_82),
      .Out1(N_81) ,
      .Out2(N_86) ,
      .Out3(N_87) ,
      .Out4(N_88)    );
    Interleaved_MAC_PE3  myInterleaved_MAC_PE3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_93),
      .In5(N_92),
      .In6(N_91),
      .In7(N_90),
      .Out1(N_89) ,
      .Out2(N_94) ,
      .Out3(N_95) ,
      .Out4(N_96)    );
    Interleaved_MAC_PE4  myInterleaved_MAC_PE4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_101),
      .In5(N_100),
      .In6(N_99),
      .In7(N_98),
      .Out1(N_97) ,
      .Out2(N_102) ,
      .Out3(N_103) ,
      .Out4(N_104)    );
    Interleaved_MAC_PE5  myInterleaved_MAC_PE5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_109),
      .In5(N_108),
      .In6(N_107),
      .In7(N_106),
      .Out1(N_105) ,
      .Out2(N_110) ,
      .Out3(N_111) ,
      .Out4(N_112)    );
    Interleaved_MAC_PE6  myInterleaved_MAC_PE6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_117),
      .In5(N_116),
      .In6(N_115),
      .In7(N_114),
      .Out1(N_113) ,
      .Out2(N_118) ,
      .Out3(N_119) ,
      .Out4(N_120)    );
    Interleaved_MAC_PE7  myInterleaved_MAC_PE7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_125),
      .In5(N_124),
      .In6(N_123),
      .In7(N_122),
      .Out1(N_121) ,
      .Out2(N_126) ,
      .Out3(N_127) ,
      .Out4(N_128)    );
    Interleaved_MAC_PE8  myInterleaved_MAC_PE8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_133),
      .In5(N_132),
      .In6(N_131),
      .In7(N_130),
      .Out1(N_129) ,
      .Out2(N_134) ,
      .Out3(N_135) ,
      .Out4(N_136)    );
    Interleaved_MAC_PE9  myInterleaved_MAC_PE9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .Output_Select(N_194),
      .Input_Select(N_195),
      .x(N_193),
      .In4(N_141),
      .In5(N_140),
      .In6(N_139),
      .In7(N_138),
      .Out1(N_137) ,
      .Out2(N_142) ,
      .Out3(N_143) ,
      .Out4(N_144)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
  generate
  begin: FP_Port_In_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In_N_porty_1_3492 = out_tmp;
  end // FP_Port_In_porty_Block
  endgenerate
  generate
  begin: FP_Port_In1_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In1_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In1_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In1_N_porty_1_3486 = out_tmp;
  end // FP_Port_In1_porty_Block
  endgenerate
  generate
  begin: FP_Port_In10_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In10_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In10_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In10_N_porty_1_3480 = out_tmp;
  end // FP_Port_In10_porty_Block
  endgenerate
  generate
  begin: FP_Port_In11_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In11_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In11_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In11_N_porty_1_3474 = out_tmp;
  end // FP_Port_In11_porty_Block
  endgenerate
  generate
  begin: FP_Port_In12_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In12_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In12_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In12_N_porty_1_3468 = out_tmp;
  end // FP_Port_In12_porty_Block
  endgenerate
  generate
  begin: FP_Port_In13_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In13_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In13_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In13_N_porty_1_3462 = out_tmp;
  end // FP_Port_In13_porty_Block
  endgenerate
  generate
  begin: FP_Port_In14_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In14_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In14_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In14_N_porty_1_3456 = out_tmp;
  end // FP_Port_In14_porty_Block
  endgenerate
  generate
  begin: FP_Port_In15_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In15_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In15_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In15_N_porty_1_3450 = out_tmp;
  end // FP_Port_In15_porty_Block
  endgenerate
  generate
  begin: FP_Port_In16_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In16_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In16_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In16_N_porty_1_3444 = out_tmp;
  end // FP_Port_In16_porty_Block
  endgenerate
  generate
  begin: FP_Port_In17_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In17_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In17_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In17_N_porty_1_3438 = out_tmp;
  end // FP_Port_In17_porty_Block
  endgenerate
  generate
  begin: FP_Port_In18_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In18_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In18_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In18_N_porty_1_3432 = out_tmp;
  end // FP_Port_In18_porty_Block
  endgenerate
  generate
  begin: FP_Port_In19_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In19_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In19_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In19_N_porty_1_3426 = out_tmp;
  end // FP_Port_In19_porty_Block
  endgenerate
  generate
  begin: FP_Port_In2_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In2_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In2_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In2_N_porty_1_3420 = out_tmp;
  end // FP_Port_In2_porty_Block
  endgenerate
  generate
  begin: FP_Port_In20_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In20_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In20_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In20_N_porty_1_3414 = out_tmp;
  end // FP_Port_In20_porty_Block
  endgenerate
  generate
  begin: FP_Port_In21_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In21_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In21_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In21_N_porty_1_3408 = out_tmp;
  end // FP_Port_In21_porty_Block
  endgenerate
  generate
  begin: FP_Port_In22_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In22_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In22_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In22_N_porty_1_3402 = out_tmp;
  end // FP_Port_In22_porty_Block
  endgenerate
  generate
  begin: FP_Port_In23_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In23_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In23_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In23_N_porty_1_3396 = out_tmp;
  end // FP_Port_In23_porty_Block
  endgenerate
  generate
  begin: FP_Port_In24_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In24_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In24_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In24_N_porty_1_3390 = out_tmp;
  end // FP_Port_In24_porty_Block
  endgenerate
  generate
  begin: FP_Port_In25_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In25_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In25_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In25_N_porty_1_3384 = out_tmp;
  end // FP_Port_In25_porty_Block
  endgenerate
  generate
  begin: FP_Port_In26_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In26_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In26_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In26_N_porty_1_3378 = out_tmp;
  end // FP_Port_In26_porty_Block
  endgenerate
  generate
  begin: FP_Port_In27_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In27_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In27_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In27_N_porty_1_3372 = out_tmp;
  end // FP_Port_In27_porty_Block
  endgenerate
  generate
  begin: FP_Port_In28_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In28_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In28_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In28_N_porty_1_3366 = out_tmp;
  end // FP_Port_In28_porty_Block
  endgenerate
  generate
  begin: FP_Port_In29_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In29_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In29_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In29_N_porty_1_3360 = out_tmp;
  end // FP_Port_In29_porty_Block
  endgenerate
  generate
  begin: FP_Port_In3_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In3_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In3_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In3_N_porty_1_3354 = out_tmp;
  end // FP_Port_In3_porty_Block
  endgenerate
  generate
  begin: FP_Port_In30_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In30_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In30_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In30_N_porty_1_3348 = out_tmp;
  end // FP_Port_In30_porty_Block
  endgenerate
  generate
  begin: FP_Port_In31_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In31_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In31_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In31_N_porty_1_3342 = out_tmp;
  end // FP_Port_In31_porty_Block
  endgenerate
  generate
  begin: FP_Port_In32_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In32_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In32_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In32_N_porty_1_3336 = out_tmp;
  end // FP_Port_In32_porty_Block
  endgenerate
  generate
  begin: FP_Port_In33_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In33_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In33_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In33_N_porty_1_3330 = out_tmp;
  end // FP_Port_In33_porty_Block
  endgenerate
  generate
  begin: FP_Port_In34_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In34_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In34_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In34_N_porty_1_3324 = out_tmp;
  end // FP_Port_In34_porty_Block
  endgenerate
  generate
  begin: FP_Port_In35_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In35_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In35_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In35_N_porty_1_3318 = out_tmp;
  end // FP_Port_In35_porty_Block
  endgenerate
  generate
  begin: FP_Port_In36_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In36_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In36_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In36_N_porty_1_3312 = out_tmp;
  end // FP_Port_In36_porty_Block
  endgenerate
  generate
  begin: FP_Port_In37_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In37_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In37_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In37_N_porty_1_3306 = out_tmp;
  end // FP_Port_In37_porty_Block
  endgenerate
  generate
  begin: FP_Port_In38_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In38_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In38_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In38_N_porty_1_3300 = out_tmp;
  end // FP_Port_In38_porty_Block
  endgenerate
  generate
  begin: FP_Port_In39_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In39_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In39_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In39_N_porty_1_3294 = out_tmp;
  end // FP_Port_In39_porty_Block
  endgenerate
  generate
  begin: FP_Port_In4_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In4_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In4_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In4_N_porty_1_3288 = out_tmp;
  end // FP_Port_In4_porty_Block
  endgenerate
  generate
  begin: FP_Port_In40_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In40_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In40_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In40_N_porty_1_3282 = out_tmp;
  end // FP_Port_In40_porty_Block
  endgenerate
  generate
  begin: FP_Port_In41_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In41_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In41_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In41_N_porty_1_3276 = out_tmp;
  end // FP_Port_In41_porty_Block
  endgenerate
  generate
  begin: FP_Port_In42_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In42_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In42_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In42_N_porty_1_3270 = out_tmp;
  end // FP_Port_In42_porty_Block
  endgenerate
  generate
  begin: FP_Port_In43_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In43_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In43_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In43_N_porty_1_3264 = out_tmp;
  end // FP_Port_In43_porty_Block
  endgenerate
  generate
  begin: FP_Port_In44_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In44_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In44_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In44_N_porty_1_3258 = out_tmp;
  end // FP_Port_In44_porty_Block
  endgenerate
  generate
  begin: FP_Port_In45_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In45_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In45_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In45_N_porty_1_3252 = out_tmp;
  end // FP_Port_In45_porty_Block
  endgenerate
  generate
  begin: FP_Port_In46_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In46_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In46_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In46_N_porty_1_3246 = out_tmp;
  end // FP_Port_In46_porty_Block
  endgenerate
  generate
  begin: FP_Port_In47_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In47_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In47_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In47_N_porty_1_3240 = out_tmp;
  end // FP_Port_In47_porty_Block
  endgenerate
  generate
  begin: FP_Port_In48_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In48_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In48_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In48_N_porty_1_3234 = out_tmp;
  end // FP_Port_In48_porty_Block
  endgenerate
  generate
  begin: FP_Port_In49_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In49_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In49_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In49_N_porty_1_3228 = out_tmp;
  end // FP_Port_In49_porty_Block
  endgenerate
  generate
  begin: FP_Port_In5_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In5_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In5_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In5_N_porty_1_3222 = out_tmp;
  end // FP_Port_In5_porty_Block
  endgenerate
  generate
  begin: FP_Port_In50_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In50_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In50_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In50_N_porty_1_3216 = out_tmp;
  end // FP_Port_In50_porty_Block
  endgenerate
  generate
  begin: FP_Port_In51_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In51_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In51_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In51_N_porty_1_3210 = out_tmp;
  end // FP_Port_In51_porty_Block
  endgenerate
  generate
  begin: FP_Port_In52_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In52_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In52_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In52_N_porty_1_3204 = out_tmp;
  end // FP_Port_In52_porty_Block
  endgenerate
  generate
  begin: FP_Port_In53_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In53_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In53_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In53_N_porty_1_3198 = out_tmp;
  end // FP_Port_In53_porty_Block
  endgenerate
  generate
  begin: FP_Port_In54_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In54_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In54_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In54_N_porty_1_3192 = out_tmp;
  end // FP_Port_In54_porty_Block
  endgenerate
  generate
  begin: FP_Port_In55_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In55_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In55_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In55_N_porty_1_3186 = out_tmp;
  end // FP_Port_In55_porty_Block
  endgenerate
  generate
  begin: FP_Port_In56_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In56_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In56_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In56_N_porty_1_3180 = out_tmp;
  end // FP_Port_In56_porty_Block
  endgenerate
  generate
  begin: FP_Port_In57_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In57_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In57_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In57_N_porty_1_3174 = out_tmp;
  end // FP_Port_In57_porty_Block
  endgenerate
  generate
  begin: FP_Port_In58_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In58_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In58_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In58_N_porty_1_3168 = out_tmp;
  end // FP_Port_In58_porty_Block
  endgenerate
  generate
  begin: FP_Port_In59_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In59_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In59_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In59_N_porty_1_3162 = out_tmp;
  end // FP_Port_In59_porty_Block
  endgenerate
  generate
  begin: FP_Port_In6_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In6_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In6_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In6_N_porty_1_3156 = out_tmp;
  end // FP_Port_In6_porty_Block
  endgenerate
  generate
  begin: FP_Port_In60_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In60_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In60_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In60_N_porty_1_3150 = out_tmp;
  end // FP_Port_In60_porty_Block
  endgenerate
  generate
  begin: FP_Port_In61_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In61_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In61_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In61_N_porty_1_3144 = out_tmp;
  end // FP_Port_In61_porty_Block
  endgenerate
  generate
  begin: FP_Port_In62_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In62_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In62_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In62_N_porty_1_3138 = out_tmp;
  end // FP_Port_In62_porty_Block
  endgenerate
  generate
  begin: FP_Port_In63_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In63_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In63_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In63_N_porty_1_3132 = out_tmp;
  end // FP_Port_In63_porty_Block
  endgenerate
  generate
  begin: FP_Port_In64_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In64_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In64_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In64_N_porty_1_3126 = out_tmp;
  end // FP_Port_In64_porty_Block
  endgenerate
  generate
  begin: FP_Port_In7_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In7_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In7_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In7_N_porty_1_3120 = out_tmp;
  end // FP_Port_In7_porty_Block
  endgenerate
  generate
  begin: FP_Port_In8_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In8_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In8_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In8_N_porty_1_3114 = out_tmp;
  end // FP_Port_In8_porty_Block
  endgenerate
  generate
  begin: FP_Port_In9_porty_block
    wire [63:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [63:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_In9_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In9_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In9_N_porty_1_3108 = out_tmp;
  end // FP_Port_In9_porty_Block
  endgenerate
  generate
  begin: FP_Port_Out_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out_N_portx_1_3756;
  assign FP_Port_Out_portx = med;
  end // FP_Port_Out_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out1_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out1_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out1_N_portx_1_3757;
  assign FP_Port_Out1_portx = med;
  end // FP_Port_Out1_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out10_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out10_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out10_N_portx_1_3758;
  assign FP_Port_Out10_portx = med;
  end // FP_Port_Out10_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out11_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out11_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out11_N_portx_1_3759;
  assign FP_Port_Out11_portx = med;
  end // FP_Port_Out11_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out12_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out12_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out12_N_portx_1_3760;
  assign FP_Port_Out12_portx = med;
  end // FP_Port_Out12_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out13_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out13_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out13_N_portx_1_3761;
  assign FP_Port_Out13_portx = med;
  end // FP_Port_Out13_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out14_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out14_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out14_N_portx_1_3762;
  assign FP_Port_Out14_portx = med;
  end // FP_Port_Out14_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out15_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out15_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out15_N_portx_1_3763;
  assign FP_Port_Out15_portx = med;
  end // FP_Port_Out15_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out16_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out16_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out16_N_portx_1_3764;
  assign FP_Port_Out16_portx = med;
  end // FP_Port_Out16_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out17_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out17_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out17_N_portx_1_3765;
  assign FP_Port_Out17_portx = med;
  end // FP_Port_Out17_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out18_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out18_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out18_N_portx_1_3766;
  assign FP_Port_Out18_portx = med;
  end // FP_Port_Out18_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out19_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out19_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out19_N_portx_1_3767;
  assign FP_Port_Out19_portx = med;
  end // FP_Port_Out19_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out2_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out2_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out2_N_portx_1_3768;
  assign FP_Port_Out2_portx = med;
  end // FP_Port_Out2_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out20_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out20_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out20_N_portx_1_3769;
  assign FP_Port_Out20_portx = med;
  end // FP_Port_Out20_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out21_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out21_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out21_N_portx_1_3770;
  assign FP_Port_Out21_portx = med;
  end // FP_Port_Out21_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out22_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out22_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out22_N_portx_1_3771;
  assign FP_Port_Out22_portx = med;
  end // FP_Port_Out22_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out23_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out23_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out23_N_portx_1_3772;
  assign FP_Port_Out23_portx = med;
  end // FP_Port_Out23_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out24_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out24_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out24_N_portx_1_3773;
  assign FP_Port_Out24_portx = med;
  end // FP_Port_Out24_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out25_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out25_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out25_N_portx_1_3774;
  assign FP_Port_Out25_portx = med;
  end // FP_Port_Out25_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out26_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out26_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out26_N_portx_1_3775;
  assign FP_Port_Out26_portx = med;
  end // FP_Port_Out26_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out27_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out27_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out27_N_portx_1_3776;
  assign FP_Port_Out27_portx = med;
  end // FP_Port_Out27_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out28_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out28_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out28_N_portx_1_3777;
  assign FP_Port_Out28_portx = med;
  end // FP_Port_Out28_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out29_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out29_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out29_N_portx_1_3778;
  assign FP_Port_Out29_portx = med;
  end // FP_Port_Out29_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out3_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out3_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out3_N_portx_1_3779;
  assign FP_Port_Out3_portx = med;
  end // FP_Port_Out3_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out30_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out30_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out30_N_portx_1_3780;
  assign FP_Port_Out30_portx = med;
  end // FP_Port_Out30_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out31_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out31_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out31_N_portx_1_3781;
  assign FP_Port_Out31_portx = med;
  end // FP_Port_Out31_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out32_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out32_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out32_N_portx_1_3782;
  assign FP_Port_Out32_portx = med;
  end // FP_Port_Out32_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out33_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out33_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out33_N_portx_1_3783;
  assign FP_Port_Out33_portx = med;
  end // FP_Port_Out33_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out34_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out34_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out34_N_portx_1_3784;
  assign FP_Port_Out34_portx = med;
  end // FP_Port_Out34_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out35_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out35_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out35_N_portx_1_3785;
  assign FP_Port_Out35_portx = med;
  end // FP_Port_Out35_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out36_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out36_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out36_N_portx_1_3786;
  assign FP_Port_Out36_portx = med;
  end // FP_Port_Out36_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out37_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out37_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out37_N_portx_1_3787;
  assign FP_Port_Out37_portx = med;
  end // FP_Port_Out37_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out38_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out38_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out38_N_portx_1_3788;
  assign FP_Port_Out38_portx = med;
  end // FP_Port_Out38_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out39_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out39_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out39_N_portx_1_3789;
  assign FP_Port_Out39_portx = med;
  end // FP_Port_Out39_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out4_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out4_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out4_N_portx_1_3790;
  assign FP_Port_Out4_portx = med;
  end // FP_Port_Out4_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out40_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out40_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out40_N_portx_1_3791;
  assign FP_Port_Out40_portx = med;
  end // FP_Port_Out40_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out41_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out41_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out41_N_portx_1_3792;
  assign FP_Port_Out41_portx = med;
  end // FP_Port_Out41_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out42_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out42_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out42_N_portx_1_3793;
  assign FP_Port_Out42_portx = med;
  end // FP_Port_Out42_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out43_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out43_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out43_N_portx_1_3794;
  assign FP_Port_Out43_portx = med;
  end // FP_Port_Out43_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out44_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out44_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out44_N_portx_1_3795;
  assign FP_Port_Out44_portx = med;
  end // FP_Port_Out44_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out45_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out45_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out45_N_portx_1_3796;
  assign FP_Port_Out45_portx = med;
  end // FP_Port_Out45_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out46_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out46_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out46_N_portx_1_3797;
  assign FP_Port_Out46_portx = med;
  end // FP_Port_Out46_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out47_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out47_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out47_N_portx_1_3798;
  assign FP_Port_Out47_portx = med;
  end // FP_Port_Out47_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out48_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out48_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out48_N_portx_1_3799;
  assign FP_Port_Out48_portx = med;
  end // FP_Port_Out48_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out49_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out49_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out49_N_portx_1_3800;
  assign FP_Port_Out49_portx = med;
  end // FP_Port_Out49_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out5_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out5_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out5_N_portx_1_3801;
  assign FP_Port_Out5_portx = med;
  end // FP_Port_Out5_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out50_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out50_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out50_N_portx_1_3802;
  assign FP_Port_Out50_portx = med;
  end // FP_Port_Out50_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out51_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out51_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out51_N_portx_1_3803;
  assign FP_Port_Out51_portx = med;
  end // FP_Port_Out51_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out52_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out52_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out52_N_portx_1_3804;
  assign FP_Port_Out52_portx = med;
  end // FP_Port_Out52_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out53_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out53_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out53_N_portx_1_3805;
  assign FP_Port_Out53_portx = med;
  end // FP_Port_Out53_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out54_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out54_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out54_N_portx_1_3806;
  assign FP_Port_Out54_portx = med;
  end // FP_Port_Out54_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out55_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out55_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out55_N_portx_1_3807;
  assign FP_Port_Out55_portx = med;
  end // FP_Port_Out55_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out56_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out56_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out56_N_portx_1_3808;
  assign FP_Port_Out56_portx = med;
  end // FP_Port_Out56_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out57_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out57_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out57_N_portx_1_3809;
  assign FP_Port_Out57_portx = med;
  end // FP_Port_Out57_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out58_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out58_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out58_N_portx_1_3810;
  assign FP_Port_Out58_portx = med;
  end // FP_Port_Out58_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out59_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out59_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out59_N_portx_1_3811;
  assign FP_Port_Out59_portx = med;
  end // FP_Port_Out59_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out6_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out6_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out6_N_portx_1_3812;
  assign FP_Port_Out6_portx = med;
  end // FP_Port_Out6_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out60_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out60_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out60_N_portx_1_3813;
  assign FP_Port_Out60_portx = med;
  end // FP_Port_Out60_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out61_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out61_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out61_N_portx_1_3814;
  assign FP_Port_Out61_portx = med;
  end // FP_Port_Out61_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out62_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out62_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out62_N_portx_1_3815;
  assign FP_Port_Out62_portx = med;
  end // FP_Port_Out62_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out63_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out63_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out63_N_portx_1_3816;
  assign FP_Port_Out63_portx = med;
  end // FP_Port_Out63_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out7_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out7_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out7_N_portx_1_3817;
  assign FP_Port_Out7_portx = med;
  end // FP_Port_Out7_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out8_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out8_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out8_N_portx_1_3818;
  assign FP_Port_Out8_portx = med;
  end // FP_Port_Out8_portx_Block
  endgenerate
  generate
  begin: FP_Port_Out9_portx_block
    reg [63:0] med;
    wire [63:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: FP_Port_Out9_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out9_N_portx_1_3819;
  assign FP_Port_Out9_portx = med;
  end // FP_Port_Out9_portx_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

