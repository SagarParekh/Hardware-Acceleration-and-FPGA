// ********************************************************************
//
// Copyright (C) 1994-2016 Synopsys, Inc. All rights reserved. This Synopsys software and all associated documentation are proprietary to Synopsys, Inc. and may only be used pursuant to the terms and conditions of a written license agreement with Synopsys, Inc. All other use, reproduction, modification, or distribution of the Synopsys software or the associated documentation is strictly prohibited.

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler L-2016.03, Build 2009R, Feb 25 2016
// Date written:             Sat Feb 24 23:22:36 2018

// ********************************************************************

// Generated from /afs/asu.edu/users/s/j/p/sjparekh/asap7_sagar/FPGA/HW2/Question_5_2.slx Version 1.217 Last modified date Sat Feb 24 23:19:38 2018
module Subsystem_Subsystem (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [13:0] Out1, // ufix14_En7
  input [7:0] a_ij, // ufix8_En7
  input [7:0] x_i // ufix8_En7
);
wire [13:0] N_5;  
wire [7:0] N_4;  
wire [13:0] N_3;  
wire [7:0] N_1;  
wire [7:0] N_2;  
wire [7:0] N_x_i_0_494;  
wire [7:0] N_a_ij_0_495;  
wire [13:0] N_Out1_1_496;  
wire GlobalResetSel;
assign Out1 = N_3;
  assign N_2 = a_ij;
  assign N_1 = x_i;
  generate
  begin: Add_block
    wire enab;
    wire [14:0] tmpOut;
    wire  [14:0] tmp_N_5_0;
    wire  [14:0] tmp_N_4_1;
    wire [14:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_5_0 = ($unsigned(N_5) << 0);
    assign tmp_N_4_1 = ($unsigned(N_4) << 0);
    assign  tmpOutPre =   tmp_N_5_0 + tmp_N_4_1;
    synDelayWithEnable #( .bitwidth(15), .preferRAMImpl(2), .delaylength(9) ) delayForLatency_block ( .clk(clk), .en(enab), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpOutPre), .outp(tmpOut) );
    synBusSatRnd #( .inp_width(15), .out_width(14), .infrac(7), .outfrac(7), .round(0), .sat(0), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_3) );
  end // Add_block
  endgenerate
    synDelayWithEnable #( .bitwidth(14), .preferRAMImpl(2), .delaylength(7) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_3), .outp(N_5) );
  generate
  begin: Mult_block
    wire  [15:0] tmpOut;
    wire  [7:0] tmpin1;
    wire  [7:0] tmpin2;
    wire  [7:0] tmpin1_dly;
    wire  [7:0] tmpin2_dly;
    wire  [15:0] med;
    assign med = tmpOut ;
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(2) ) multOut_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(med[14:7]), .outp(N_4) );
    assign tmpin1 = $unsigned({1'b0,N_1});
    assign tmpin2 = $unsigned({1'b0,N_2});
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) multInp1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin1), .outp(tmpin1_dly) );
    synDelayWithEnable #( .bitwidth(8), .preferRAMImpl(2), .delaylength(1) ) multInp2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(tmpin2), .outp(tmpin2_dly) );
    assign tmpOut = tmpin1_dly * tmpin2_dly;
  end // Mult_block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Sequence_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [3:0] inp;
output [3:0] outp;
wire [3:0] Sequence_ROM_CT [0:15];
wire rstSig;
assign rstSig = rst;
wire [3:0] outBuf;
reg  [3:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
  assign outBuf = romReg;
assign  outp=outBuf;
  generate
  begin: gen_Sequence_ROM
    assign Sequence_ROM_CT[0]=4'b0000;
    assign Sequence_ROM_CT[1]=4'b0001;
    assign Sequence_ROM_CT[2]=4'b0010;
    assign Sequence_ROM_CT[3]=4'b0011;
    assign Sequence_ROM_CT[4]=4'b0100;
    assign Sequence_ROM_CT[5]=4'b0101;
    assign Sequence_ROM_CT[6]=4'b0110;
    assign Sequence_ROM_CT[7]=4'b0111;
    assign Sequence_ROM_CT[8]=4'b1000;
    assign Sequence_ROM_CT[9]=4'b1001;
    assign Sequence_ROM_CT[10]=4'b1010;
    assign Sequence_ROM_CT[11]=4'b1011;
    assign Sequence_ROM_CT[12]=4'b1100;
    assign Sequence_ROM_CT[13]=4'b1101;
    assign Sequence_ROM_CT[14]=4'b1110;
    assign Sequence_ROM_CT[15]=4'b1111;
  end //gen_Sequence_ROM
  endgenerate
  always @(posedge clk or posedge   rstSig)
  begin: Sequence_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 4'b0;
     end
      else if(en) begin
        romReg <= Sequence_ROM_CT[inp];
  end // if en
  end // Sequence_ROM_proc
endmodule

//----------------------------------------------------

module Sequence (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [3:0] seq // ufix4_En0
);
wire [3:0] N_2;  
wire [3:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen154_1_218;  
wire [0:0] N_GlobalEnable1_0_376;  
wire [3:0] N_seq_1_377;  
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen154_1_218 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [3:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen154_1_218[0];
    assign inbuf=N_1[3:0];
    Sequence_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen154_1_218[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(15),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Sequence1_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [3:0] inp;
output [3:0] outp;
wire [3:0] Sequence1_ROM_CT [0:15];
wire rstSig;
assign rstSig = rst;
wire [3:0] outBuf;
reg  [3:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
  assign outBuf = romReg;
assign  outp=outBuf;
  generate
  begin: gen_Sequence1_ROM
    assign Sequence1_ROM_CT[0]=4'b0100;
    assign Sequence1_ROM_CT[1]=4'b0101;
    assign Sequence1_ROM_CT[2]=4'b0110;
    assign Sequence1_ROM_CT[3]=4'b0111;
    assign Sequence1_ROM_CT[4]=4'b1000;
    assign Sequence1_ROM_CT[5]=4'b1001;
    assign Sequence1_ROM_CT[6]=4'b1010;
    assign Sequence1_ROM_CT[7]=4'b1011;
    assign Sequence1_ROM_CT[8]=4'b1100;
    assign Sequence1_ROM_CT[9]=4'b1101;
    assign Sequence1_ROM_CT[10]=4'b1110;
    assign Sequence1_ROM_CT[11]=4'b1111;
    assign Sequence1_ROM_CT[12]=4'b0000;
    assign Sequence1_ROM_CT[13]=4'b0001;
    assign Sequence1_ROM_CT[14]=4'b0010;
    assign Sequence1_ROM_CT[15]=4'b0011;
  end //gen_Sequence1_ROM
  endgenerate
  always @(posedge clk or posedge   rstSig)
  begin: Sequence1_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 4'b0;
     end
      else if(en) begin
        romReg <= Sequence1_ROM_CT[inp];
  end // if en
  end // Sequence1_ROM_proc
endmodule

//----------------------------------------------------

module Sequence1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [3:0] seq // ufix4_En0
);
wire [3:0] N_2;  
wire [3:0] N_1;  
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen155_1_219;  
wire [0:0] N_GlobalEnable1_0_378;  
wire [3:0] N_seq_1_379;  
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen155_1_219 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [3:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen155_1_219[0];
    assign inbuf=N_1[3:0];
    Sequence1_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [3:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen155_1_219[0]);
    assign rst = 0;
assign ldIn = 4'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(15),
        .bitwidth(4),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Subsystem (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [13:0] Out16, // ufix14_En7
  output [13:0] Out15, // ufix14_En7
  output [13:0] Out14, // ufix14_En7
  output [13:0] Out13, // ufix14_En7
  output [13:0] Out12, // ufix14_En7
  output [13:0] Out11, // ufix14_En7
  output [13:0] Out10, // ufix14_En7
  output [13:0] Out9, // ufix14_En7
  output [13:0] Out8, // ufix14_En7
  output [13:0] Out7, // ufix14_En7
  output [13:0] Out6, // ufix14_En7
  output [13:0] Out5, // ufix14_En7
  output [13:0] Out4, // ufix14_En7
  output [13:0] Out3, // ufix14_En7
  output [13:0] Out2, // ufix14_En7
  output [13:0] Out1, // ufix14_En7
  input [7:0] In19, // ufix8_En7
  input [7:0] In18, // ufix8_En7
  input [7:0] In17, // ufix8_En7
  input [7:0] In16, // ufix8_En7
  input [7:0] In15, // ufix8_En7
  input [7:0] In14, // ufix8_En7
  input [7:0] In13, // ufix8_En7
  input [7:0] In12, // ufix8_En7
  input [7:0] In11, // ufix8_En7
  input [7:0] In10, // ufix8_En7
  input [7:0] In9, // ufix8_En7
  input [7:0] In8, // ufix8_En7
  input [7:0] In7, // ufix8_En7
  input [7:0] In6, // ufix8_En7
  input [7:0] In5, // ufix8_En7
  input [7:0] In4, // ufix8_En7
  input [7:0] x, // ufix8_En7
  input [3:0] In2, // ufix4_En0
  input [3:0] In1 // ufix4_En0
);
wire [3:0] N_19;  
wire [13:0] N_20;  
wire [3:0] N_18;  
wire [7:0] N_16;  
wire [7:0] N_15;  
wire [7:0] N_14;  
wire [7:0] N_13;  
wire [7:0] N_12;  
wire [7:0] N_11;  
wire [7:0] N_10;  
wire [7:0] N_9;  
wire [7:0] N_8;  
wire [7:0] N_7;  
wire [7:0] N_6;  
wire [7:0] N_5;  
wire [7:0] N_4;  
wire [7:0] N_3;  
wire [7:0] N_2;  
wire [7:0] N_1;  
wire [13:0] N_27;  
wire [13:0] N_26;  
wire [13:0] N_25;  
wire [13:0] N_22;  
wire [13:0] N_23;  
wire [13:0] N_24;  
wire [13:0] N_28;  
wire [13:0] N_37;  
wire [13:0] N_36;  
wire [13:0] N_35;  
wire [13:0] N_34;  
wire [13:0] N_33;  
wire [13:0] N_32;  
wire [13:0] N_30;  
wire [13:0] N_31;  
wire [13:0] N_29;  
wire [7:0] N_17;  
wire [7:0] N_21;  
wire [3:0] N_In1_0_497;  
wire [3:0] N_In2_0_498;  
wire [7:0] N_x_0_499;  
wire [7:0] N_In4_0_500;  
wire [7:0] N_In5_0_501;  
wire [7:0] N_In6_0_502;  
wire [7:0] N_In7_0_503;  
wire [7:0] N_In8_0_504;  
wire [7:0] N_In9_0_505;  
wire [7:0] N_In10_0_506;  
wire [7:0] N_In11_0_507;  
wire [7:0] N_In12_0_508;  
wire [7:0] N_In13_0_509;  
wire [7:0] N_In14_0_510;  
wire [7:0] N_In15_0_511;  
wire [7:0] N_In16_0_512;  
wire [7:0] N_In17_0_513;  
wire [7:0] N_In18_0_514;  
wire [7:0] N_In19_0_515;  
wire [13:0] N_Out1_1_516;  
wire [13:0] N_Out2_1_517;  
wire [13:0] N_Out3_1_518;  
wire [13:0] N_Out4_1_519;  
wire [13:0] N_Out5_1_520;  
wire [13:0] N_Out6_1_521;  
wire [13:0] N_Out7_1_522;  
wire [13:0] N_Out8_1_523;  
wire [13:0] N_Out9_1_524;  
wire [13:0] N_Out10_1_525;  
wire [13:0] N_Out11_1_526;  
wire [13:0] N_Out12_1_527;  
wire [13:0] N_Out13_1_528;  
wire [13:0] N_Out14_1_529;  
wire [13:0] N_Out15_1_530;  
wire [13:0] N_Out16_1_531;  
wire GlobalResetSel;
assign Out16 = N_27;
assign Out15 = N_26;
assign Out14 = N_25;
assign Out13 = N_22;
assign Out12 = N_23;
assign Out11 = N_24;
assign Out10 = N_28;
assign Out9 = N_37;
assign Out8 = N_36;
assign Out7 = N_35;
assign Out6 = N_34;
assign Out5 = N_33;
assign Out4 = N_32;
assign Out3 = N_30;
assign Out2 = N_31;
assign Out1 = N_29;
  assign N_1 = In19;
  assign N_2 = In18;
  assign N_3 = In17;
  assign N_4 = In16;
  assign N_5 = In15;
  assign N_6 = In14;
  assign N_7 = In13;
  assign N_8 = In12;
  assign N_9 = In11;
  assign N_10 = In10;
  assign N_11 = In9;
  assign N_12 = In8;
  assign N_13 = In7;
  assign N_14 = In6;
  assign N_15 = In5;
  assign N_16 = In4;
  assign N_17 = x;
  assign N_18 = In2;
  assign N_19 = In1;
  //start Demux
assign N_29 = $unsigned(N_19[3:0])==0 ? N_20 : 0;
assign N_31 = $unsigned(N_19[3:0])==1 ? N_20 : 0;
assign N_30 = $unsigned(N_19[3:0])==2 ? N_20 : 0;
assign N_32 = $unsigned(N_19[3:0])==3 ? N_20 : 0;
assign N_33 = $unsigned(N_19[3:0])==4 ? N_20 : 0;
assign N_34 = $unsigned(N_19[3:0])==5 ? N_20 : 0;
assign N_35 = $unsigned(N_19[3:0])==6 ? N_20 : 0;
assign N_36 = $unsigned(N_19[3:0])==7 ? N_20 : 0;
assign N_37 = $unsigned(N_19[3:0])==8 ? N_20 : 0;
assign N_28 = $unsigned(N_19[3:0])==9 ? N_20 : 0;
assign N_24 = $unsigned(N_19[3:0])==10 ? N_20 : 0;
assign N_23 = $unsigned(N_19[3:0])==11 ? N_20 : 0;
assign N_22 = $unsigned(N_19[3:0])==12 ? N_20 : 0;
assign N_25 = $unsigned(N_19[3:0])==13 ? N_20 : 0;
assign N_26 = $unsigned(N_19[3:0])==14 ? N_20 : 0;
assign N_27 = $unsigned(N_19[3:0])==15 ? N_20 : 0;
  //end Demux
  generate
  begin: Mux_block
    wire [7:0] med  [15:0];
    reg [7:0] tmpOut;
    assign med[0] = $unsigned(N_16) ;
    assign med[1] = $unsigned(N_15) ;
    assign med[2] = $unsigned(N_14) ;
    assign med[3] = $unsigned(N_13) ;
    assign med[4] = $unsigned(N_12) ;
    assign med[5] = $unsigned(N_11) ;
    assign med[6] = $unsigned(N_10) ;
    assign med[7] = $unsigned(N_9) ;
    assign med[8] = $unsigned(N_8) ;
    assign med[9] = $unsigned(N_7) ;
    assign med[10] = $unsigned(N_6) ;
    assign med[11] = $unsigned(N_5) ;
    assign med[12] = $unsigned(N_4) ;
    assign med[13] = $unsigned(N_3) ;
    assign med[14] = $unsigned(N_2) ;
    assign med[15] = $unsigned(N_1) ;

    always@(*)
    begin
      if(N_18[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_18[3:0]];
    end

    assign N_21 = tmpOut;
  end // Mux_Block
  endgenerate
    Subsystem_Subsystem  mySubsystem (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_i(N_17),
      .a_ij(N_21),
      .Out1(N_20)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module Question_5_2 (
  input clk,
  input GlobalReset,
  output [13:0] Port_Out9, // ufix14_En7
  output [13:0] Port_Out8, // ufix14_En7
  output [13:0] Port_Out7, // ufix14_En7
  output [13:0] Port_Out63, // ufix14_En7
  output [13:0] Port_Out62, // ufix14_En7
  output [13:0] Port_Out61, // ufix14_En7
  output [13:0] Port_Out60, // ufix14_En7
  output [13:0] Port_Out6, // ufix14_En7
  output [13:0] Port_Out59, // ufix14_En7
  output [13:0] Port_Out58, // ufix14_En7
  output [13:0] Port_Out57, // ufix14_En7
  output [13:0] Port_Out56, // ufix14_En7
  output [13:0] Port_Out55, // ufix14_En7
  output [13:0] Port_Out54, // ufix14_En7
  output [13:0] Port_Out53, // ufix14_En7
  output [13:0] Port_Out52, // ufix14_En7
  output [13:0] Port_Out51, // ufix14_En7
  output [13:0] Port_Out50, // ufix14_En7
  output [13:0] Port_Out5, // ufix14_En7
  output [13:0] Port_Out49, // ufix14_En7
  output [13:0] Port_Out48, // ufix14_En7
  output [13:0] Port_Out47, // ufix14_En7
  output [13:0] Port_Out46, // ufix14_En7
  output [13:0] Port_Out45, // ufix14_En7
  output [13:0] Port_Out44, // ufix14_En7
  output [13:0] Port_Out43, // ufix14_En7
  output [13:0] Port_Out42, // ufix14_En7
  output [13:0] Port_Out41, // ufix14_En7
  output [13:0] Port_Out40, // ufix14_En7
  output [13:0] Port_Out4, // ufix14_En7
  output [13:0] Port_Out39, // ufix14_En7
  output [13:0] Port_Out38, // ufix14_En7
  output [13:0] Port_Out37, // ufix14_En7
  output [13:0] Port_Out36, // ufix14_En7
  output [13:0] Port_Out35, // ufix14_En7
  output [13:0] Port_Out34, // ufix14_En7
  output [13:0] Port_Out33, // ufix14_En7
  output [13:0] Port_Out32, // ufix14_En7
  output [13:0] Port_Out31, // ufix14_En7
  output [13:0] Port_Out30, // ufix14_En7
  output [13:0] Port_Out3, // ufix14_En7
  output [13:0] Port_Out29, // ufix14_En7
  output [13:0] Port_Out28, // ufix14_En7
  output [13:0] Port_Out27, // ufix14_En7
  output [13:0] Port_Out26, // ufix14_En7
  output [13:0] Port_Out25, // ufix14_En7
  output [13:0] Port_Out24, // ufix14_En7
  output [13:0] Port_Out23, // ufix14_En7
  output [13:0] Port_Out22, // ufix14_En7
  output [13:0] Port_Out21, // ufix14_En7
  output [13:0] Port_Out20, // ufix14_En7
  output [13:0] Port_Out2, // ufix14_En7
  output [13:0] Port_Out19, // ufix14_En7
  output [13:0] Port_Out18, // ufix14_En7
  output [13:0] Port_Out17, // ufix14_En7
  output [13:0] Port_Out16, // ufix14_En7
  output [13:0] Port_Out15, // ufix14_En7
  output [13:0] Port_Out14, // ufix14_En7
  output [13:0] Port_Out13, // ufix14_En7
  output [13:0] Port_Out12, // ufix14_En7
  output [13:0] Port_Out11, // ufix14_En7
  output [13:0] Port_Out10, // ufix14_En7
  output [13:0] Port_Out1, // ufix14_En7
  output [13:0] Port_Out, // ufix14_En7
  input [7:0] Port_In9, // ufix8_En7
  input [7:0] Port_In8, // ufix8_En7
  input [7:0] Port_In7, // ufix8_En7
  input [7:0] Port_In66, // ufix8_En7
  input [7:0] Port_In65, // ufix8_En7
  input [7:0] Port_In64, // ufix8_En7
  input [7:0] Port_In63, // ufix8_En7
  input [7:0] Port_In62, // ufix8_En7
  input [7:0] Port_In61, // ufix8_En7
  input [7:0] Port_In60, // ufix8_En7
  input [7:0] Port_In6, // ufix8_En7
  input [7:0] Port_In59, // ufix8_En7
  input [7:0] Port_In57, // ufix8_En7
  input [7:0] Port_In56, // ufix8_En7
  input [7:0] Port_In55, // ufix8_En7
  input [7:0] Port_In54, // ufix8_En7
  input [7:0] Port_In53, // ufix8_En7
  input [7:0] Port_In52, // ufix8_En7
  input [7:0] Port_In51, // ufix8_En7
  input [7:0] Port_In50, // ufix8_En7
  input [7:0] Port_In5, // ufix8_En7
  input [7:0] Port_In49, // ufix8_En7
  input [7:0] Port_In48, // ufix8_En7
  input [7:0] Port_In47, // ufix8_En7
  input [7:0] Port_In46, // ufix8_En7
  input [7:0] Port_In45, // ufix8_En7
  input [7:0] Port_In44, // ufix8_En7
  input [7:0] Port_In43, // ufix8_En7
  input [7:0] Port_In42, // ufix8_En7
  input [7:0] Port_In41, // ufix8_En7
  input [7:0] Port_In40, // ufix8_En7
  input [7:0] Port_In4, // ufix8_En7
  input [7:0] Port_In39, // ufix8_En7
  input [7:0] Port_In38, // ufix8_En7
  input [7:0] Port_In37, // ufix8_En7
  input [7:0] Port_In36, // ufix8_En7
  input [7:0] Port_In35, // ufix8_En7
  input [7:0] Port_In34, // ufix8_En7
  input [7:0] Port_In33, // ufix8_En7
  input [7:0] Port_In32, // ufix8_En7
  input [7:0] Port_In31, // ufix8_En7
  input [7:0] Port_In30, // ufix8_En7
  input [7:0] Port_In3, // ufix8_En7
  input [7:0] Port_In29, // ufix8_En7
  input [7:0] Port_In28, // ufix8_En7
  input [7:0] Port_In27, // ufix8_En7
  input [7:0] Port_In26, // ufix8_En7
  input [7:0] Port_In24, // ufix8_En7
  input [7:0] Port_In23, // ufix8_En7
  input [7:0] Port_In22, // ufix8_En7
  input [7:0] Port_In21, // ufix8_En7
  input [7:0] Port_In20, // ufix8_En7
  input [7:0] Port_In2, // ufix8_En7
  input [7:0] Port_In19, // ufix8_En7
  input [7:0] Port_In18, // ufix8_En7
  input [7:0] Port_In17, // ufix8_En7
  input [7:0] Port_In16, // ufix8_En7
  input [7:0] Port_In15, // ufix8_En7
  input [7:0] Port_In14, // ufix8_En7
  input [7:0] Port_In13, // ufix8_En7
  input [7:0] Port_In12, // ufix8_En7
  input [7:0] Port_In11, // ufix8_En7
  input [7:0] Port_In10, // ufix8_En7
  input [7:0] Port_In1, // ufix8_En7
  input [7:0] Port_In // ufix8_En7
//@
);
//@

wire [7:0] N_33;  
wire [7:0] N_34;  
wire [7:0] N_35;  
wire [7:0] N_36;  
wire [7:0] N_37;  
wire [7:0] N_38;  
wire [7:0] N_39;  
wire [7:0] N_40;  
wire [7:0] N_41;  
wire [7:0] N_42;  
wire [7:0] N_43;  
wire [7:0] N_44;  
wire [7:0] N_45;  
wire [7:0] N_46;  
wire [7:0] N_47;  
wire [7:0] N_48;  
wire [7:0] N_81;  
wire [7:0] N_82;  
wire [7:0] N_83;  
wire [7:0] N_84;  
wire [7:0] N_85;  
wire [7:0] N_86;  
wire [7:0] N_87;  
wire [7:0] N_88;  
wire [7:0] N_89;  
wire [7:0] N_90;  
wire [7:0] N_91;  
wire [7:0] N_92;  
wire [7:0] N_93;  
wire [7:0] N_94;  
wire [7:0] N_95;  
wire [7:0] N_96;  
wire [7:0] N_129;  
wire [7:0] N_130;  
wire [7:0] N_131;  
wire [7:0] N_132;  
wire [7:0] N_133;  
wire [7:0] N_134;  
wire [7:0] N_135;  
wire [7:0] N_136;  
wire [7:0] N_137;  
wire [7:0] N_138;  
wire [7:0] N_139;  
wire [7:0] N_140;  
wire [7:0] N_141;  
wire [7:0] N_142;  
wire [7:0] N_143;  
wire [7:0] N_144;  
wire [7:0] N_177;  
wire [7:0] N_178;  
wire [7:0] N_179;  
wire [7:0] N_180;  
wire [7:0] N_181;  
wire [7:0] N_182;  
wire [7:0] N_183;  
wire [7:0] N_184;  
wire [7:0] N_185;  
wire [7:0] N_186;  
wire [7:0] N_187;  
wire [7:0] N_188;  
wire [7:0] N_189;  
wire [7:0] N_190;  
wire [7:0] N_191;  
wire [7:0] N_192;  
wire [7:0] N_195;  
wire [0:0] GlobalEnableSignal1;  
wire [13:0] N_17;  
wire [13:0] N_18;  
wire [13:0] N_19;  
wire [13:0] N_20;  
wire [13:0] N_29;  
wire [13:0] N_28;  
wire [13:0] N_27;  
wire [13:0] N_26;  
wire [13:0] N_25;  
wire [13:0] N_24;  
wire [13:0] N_21;  
wire [13:0] N_22;  
wire [13:0] N_23;  
wire [13:0] N_32;  
wire [13:0] N_31;  
wire [13:0] N_30;  
wire [13:0] N_65;  
wire [13:0] N_66;  
wire [13:0] N_67;  
wire [13:0] N_68;  
wire [13:0] N_77;  
wire [13:0] N_76;  
wire [13:0] N_75;  
wire [13:0] N_74;  
wire [13:0] N_73;  
wire [13:0] N_72;  
wire [13:0] N_69;  
wire [13:0] N_70;  
wire [13:0] N_71;  
wire [13:0] N_80;  
wire [13:0] N_79;  
wire [13:0] N_78;  
wire [13:0] N_113;  
wire [13:0] N_114;  
wire [13:0] N_115;  
wire [13:0] N_116;  
wire [13:0] N_125;  
wire [13:0] N_124;  
wire [13:0] N_123;  
wire [13:0] N_122;  
wire [13:0] N_121;  
wire [13:0] N_120;  
wire [13:0] N_117;  
wire [13:0] N_118;  
wire [13:0] N_119;  
wire [13:0] N_128;  
wire [13:0] N_127;  
wire [13:0] N_126;  
wire [13:0] N_161;  
wire [13:0] N_162;  
wire [13:0] N_163;  
wire [13:0] N_164;  
wire [13:0] N_173;  
wire [13:0] N_172;  
wire [13:0] N_171;  
wire [13:0] N_170;  
wire [13:0] N_169;  
wire [13:0] N_168;  
wire [13:0] N_165;  
wire [13:0] N_166;  
wire [13:0] N_167;  
wire [13:0] N_176;  
wire [13:0] N_175;  
wire [13:0] N_174;  
wire [3:0] N_193;  
wire [3:0] N_194;  
wire GlobalResetSel;
  wire GlobalEnable1;
  assign GlobalEnable1 = 1;
    Sequence  mySequence (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_194)    );
    Sequence1  mySequence1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_193)    );
    Subsystem  mySubsystem3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .In2(N_194),
      .x(N_195),
      .In4(N_177),
      .In5(N_178),
      .In6(N_179),
      .In7(N_180),
      .In8(N_181),
      .In9(N_182),
      .In10(N_183),
      .In11(N_184),
      .In12(N_185),
      .In13(N_186),
      .In14(N_187),
      .In15(N_188),
      .In16(N_189),
      .In17(N_190),
      .In18(N_191),
      .In19(N_192),
      .Out1(N_161) ,
      .Out2(N_162) ,
      .Out3(N_163) ,
      .Out4(N_164) ,
      .Out5(N_173) ,
      .Out6(N_172) ,
      .Out7(N_171) ,
      .Out8(N_170) ,
      .Out9(N_169) ,
      .Out10(N_168) ,
      .Out11(N_165) ,
      .Out12(N_166) ,
      .Out13(N_167) ,
      .Out14(N_176) ,
      .Out15(N_175) ,
      .Out16(N_174)    );
    Subsystem  mySubsystem2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .In2(N_194),
      .x(N_195),
      .In4(N_129),
      .In5(N_130),
      .In6(N_131),
      .In7(N_132),
      .In8(N_133),
      .In9(N_134),
      .In10(N_135),
      .In11(N_136),
      .In12(N_137),
      .In13(N_138),
      .In14(N_139),
      .In15(N_140),
      .In16(N_141),
      .In17(N_142),
      .In18(N_143),
      .In19(N_144),
      .Out1(N_113) ,
      .Out2(N_114) ,
      .Out3(N_115) ,
      .Out4(N_116) ,
      .Out5(N_125) ,
      .Out6(N_124) ,
      .Out7(N_123) ,
      .Out8(N_122) ,
      .Out9(N_121) ,
      .Out10(N_120) ,
      .Out11(N_117) ,
      .Out12(N_118) ,
      .Out13(N_119) ,
      .Out14(N_128) ,
      .Out15(N_127) ,
      .Out16(N_126)    );
    Subsystem  mySubsystem1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .In2(N_194),
      .x(N_195),
      .In4(N_81),
      .In5(N_82),
      .In6(N_83),
      .In7(N_84),
      .In8(N_85),
      .In9(N_86),
      .In10(N_87),
      .In11(N_88),
      .In12(N_89),
      .In13(N_90),
      .In14(N_91),
      .In15(N_92),
      .In16(N_93),
      .In17(N_94),
      .In18(N_95),
      .In19(N_96),
      .Out1(N_65) ,
      .Out2(N_66) ,
      .Out3(N_67) ,
      .Out4(N_68) ,
      .Out5(N_77) ,
      .Out6(N_76) ,
      .Out7(N_75) ,
      .Out8(N_74) ,
      .Out9(N_73) ,
      .Out10(N_72) ,
      .Out11(N_69) ,
      .Out12(N_70) ,
      .Out13(N_71) ,
      .Out14(N_80) ,
      .Out15(N_79) ,
      .Out16(N_78)    );
    Subsystem  mySubsystem (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .In1(N_193),
      .In2(N_194),
      .x(N_195),
      .In4(N_33),
      .In5(N_34),
      .In6(N_35),
      .In7(N_36),
      .In8(N_37),
      .In9(N_38),
      .In10(N_39),
      .In11(N_40),
      .In12(N_41),
      .In13(N_42),
      .In14(N_43),
      .In15(N_44),
      .In16(N_45),
      .In17(N_46),
      .In18(N_47),
      .In19(N_48),
      .Out1(N_17) ,
      .Out2(N_18) ,
      .Out3(N_19) ,
      .Out4(N_20) ,
      .Out5(N_29) ,
      .Out6(N_28) ,
      .Out7(N_27) ,
      .Out8(N_26) ,
      .Out9(N_25) ,
      .Out10(N_24) ,
      .Out11(N_21) ,
      .Out12(N_22) ,
      .Out13(N_23) ,
      .Out14(N_32) ,
      .Out15(N_31) ,
      .Out16(N_30)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
  generate
  begin: Port_Out9_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out9_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_24;
  assign Port_Out9 = med;
  end // Port_Out9_Block
  endgenerate
  generate
  begin: Port_Out8_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out8_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_25;
  assign Port_Out8 = med;
  end // Port_Out8_Block
  endgenerate
  generate
  begin: Port_Out7_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out7_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_26;
  assign Port_Out7 = med;
  end // Port_Out7_Block
  endgenerate
  generate
  begin: Port_Out63_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out63_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_168;
  assign Port_Out63 = med;
  end // Port_Out63_Block
  endgenerate
  generate
  begin: Port_Out62_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out62_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_169;
  assign Port_Out62 = med;
  end // Port_Out62_Block
  endgenerate
  generate
  begin: Port_Out61_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out61_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_170;
  assign Port_Out61 = med;
  end // Port_Out61_Block
  endgenerate
  generate
  begin: Port_Out60_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out60_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_171;
  assign Port_Out60 = med;
  end // Port_Out60_Block
  endgenerate
  generate
  begin: Port_Out6_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out6_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_27;
  assign Port_Out6 = med;
  end // Port_Out6_Block
  endgenerate
  generate
  begin: Port_Out59_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out59_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_172;
  assign Port_Out59 = med;
  end // Port_Out59_Block
  endgenerate
  generate
  begin: Port_Out58_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out58_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_173;
  assign Port_Out58 = med;
  end // Port_Out58_Block
  endgenerate
  generate
  begin: Port_Out57_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out57_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_164;
  assign Port_Out57 = med;
  end // Port_Out57_Block
  endgenerate
  generate
  begin: Port_Out56_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out56_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_163;
  assign Port_Out56 = med;
  end // Port_Out56_Block
  endgenerate
  generate
  begin: Port_Out55_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out55_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_174;
  assign Port_Out55 = med;
  end // Port_Out55_Block
  endgenerate
  generate
  begin: Port_Out54_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out54_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_175;
  assign Port_Out54 = med;
  end // Port_Out54_Block
  endgenerate
  generate
  begin: Port_Out53_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out53_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_176;
  assign Port_Out53 = med;
  end // Port_Out53_Block
  endgenerate
  generate
  begin: Port_Out52_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out52_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_167;
  assign Port_Out52 = med;
  end // Port_Out52_Block
  endgenerate
  generate
  begin: Port_Out51_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out51_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_166;
  assign Port_Out51 = med;
  end // Port_Out51_Block
  endgenerate
  generate
  begin: Port_Out50_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out50_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_165;
  assign Port_Out50 = med;
  end // Port_Out50_Block
  endgenerate
  generate
  begin: Port_Out5_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out5_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_28;
  assign Port_Out5 = med;
  end // Port_Out5_Block
  endgenerate
  generate
  begin: Port_Out49_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out49_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_162;
  assign Port_Out49 = med;
  end // Port_Out49_Block
  endgenerate
  generate
  begin: Port_Out48_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out48_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_161;
  assign Port_Out48 = med;
  end // Port_Out48_Block
  endgenerate
  generate
  begin: Port_Out47_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out47_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_120;
  assign Port_Out47 = med;
  end // Port_Out47_Block
  endgenerate
  generate
  begin: Port_Out46_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out46_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_121;
  assign Port_Out46 = med;
  end // Port_Out46_Block
  endgenerate
  generate
  begin: Port_Out45_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out45_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_122;
  assign Port_Out45 = med;
  end // Port_Out45_Block
  endgenerate
  generate
  begin: Port_Out44_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out44_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_123;
  assign Port_Out44 = med;
  end // Port_Out44_Block
  endgenerate
  generate
  begin: Port_Out43_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out43_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_124;
  assign Port_Out43 = med;
  end // Port_Out43_Block
  endgenerate
  generate
  begin: Port_Out42_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out42_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_125;
  assign Port_Out42 = med;
  end // Port_Out42_Block
  endgenerate
  generate
  begin: Port_Out41_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out41_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_116;
  assign Port_Out41 = med;
  end // Port_Out41_Block
  endgenerate
  generate
  begin: Port_Out40_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out40_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_115;
  assign Port_Out40 = med;
  end // Port_Out40_Block
  endgenerate
  generate
  begin: Port_Out4_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out4_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_29;
  assign Port_Out4 = med;
  end // Port_Out4_Block
  endgenerate
  generate
  begin: Port_Out39_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out39_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_126;
  assign Port_Out39 = med;
  end // Port_Out39_Block
  endgenerate
  generate
  begin: Port_Out38_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out38_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_127;
  assign Port_Out38 = med;
  end // Port_Out38_Block
  endgenerate
  generate
  begin: Port_Out37_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out37_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_128;
  assign Port_Out37 = med;
  end // Port_Out37_Block
  endgenerate
  generate
  begin: Port_Out36_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out36_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_119;
  assign Port_Out36 = med;
  end // Port_Out36_Block
  endgenerate
  generate
  begin: Port_Out35_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out35_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_118;
  assign Port_Out35 = med;
  end // Port_Out35_Block
  endgenerate
  generate
  begin: Port_Out34_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out34_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_117;
  assign Port_Out34 = med;
  end // Port_Out34_Block
  endgenerate
  generate
  begin: Port_Out33_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out33_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_114;
  assign Port_Out33 = med;
  end // Port_Out33_Block
  endgenerate
  generate
  begin: Port_Out32_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out32_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_113;
  assign Port_Out32 = med;
  end // Port_Out32_Block
  endgenerate
  generate
  begin: Port_Out31_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out31_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_72;
  assign Port_Out31 = med;
  end // Port_Out31_Block
  endgenerate
  generate
  begin: Port_Out30_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out30_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_73;
  assign Port_Out30 = med;
  end // Port_Out30_Block
  endgenerate
  generate
  begin: Port_Out3_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out3_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_20;
  assign Port_Out3 = med;
  end // Port_Out3_Block
  endgenerate
  generate
  begin: Port_Out29_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out29_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_74;
  assign Port_Out29 = med;
  end // Port_Out29_Block
  endgenerate
  generate
  begin: Port_Out28_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out28_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_75;
  assign Port_Out28 = med;
  end // Port_Out28_Block
  endgenerate
  generate
  begin: Port_Out27_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out27_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_76;
  assign Port_Out27 = med;
  end // Port_Out27_Block
  endgenerate
  generate
  begin: Port_Out26_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out26_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_77;
  assign Port_Out26 = med;
  end // Port_Out26_Block
  endgenerate
  generate
  begin: Port_Out25_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out25_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_68;
  assign Port_Out25 = med;
  end // Port_Out25_Block
  endgenerate
  generate
  begin: Port_Out24_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out24_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_67;
  assign Port_Out24 = med;
  end // Port_Out24_Block
  endgenerate
  generate
  begin: Port_Out23_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out23_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_78;
  assign Port_Out23 = med;
  end // Port_Out23_Block
  endgenerate
  generate
  begin: Port_Out22_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out22_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_79;
  assign Port_Out22 = med;
  end // Port_Out22_Block
  endgenerate
  generate
  begin: Port_Out21_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out21_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_80;
  assign Port_Out21 = med;
  end // Port_Out21_Block
  endgenerate
  generate
  begin: Port_Out20_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out20_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_71;
  assign Port_Out20 = med;
  end // Port_Out20_Block
  endgenerate
  generate
  begin: Port_Out2_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out2_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_19;
  assign Port_Out2 = med;
  end // Port_Out2_Block
  endgenerate
  generate
  begin: Port_Out19_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out19_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_70;
  assign Port_Out19 = med;
  end // Port_Out19_Block
  endgenerate
  generate
  begin: Port_Out18_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out18_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_69;
  assign Port_Out18 = med;
  end // Port_Out18_Block
  endgenerate
  generate
  begin: Port_Out17_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out17_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_66;
  assign Port_Out17 = med;
  end // Port_Out17_Block
  endgenerate
  generate
  begin: Port_Out16_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out16_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_65;
  assign Port_Out16 = med;
  end // Port_Out16_Block
  endgenerate
  generate
  begin: Port_Out15_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out15_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_30;
  assign Port_Out15 = med;
  end // Port_Out15_Block
  endgenerate
  generate
  begin: Port_Out14_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out14_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_31;
  assign Port_Out14 = med;
  end // Port_Out14_Block
  endgenerate
  generate
  begin: Port_Out13_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out13_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_32;
  assign Port_Out13 = med;
  end // Port_Out13_Block
  endgenerate
  generate
  begin: Port_Out12_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out12_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_23;
  assign Port_Out12 = med;
  end // Port_Out12_Block
  endgenerate
  generate
  begin: Port_Out11_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out11_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_22;
  assign Port_Out11 = med;
  end // Port_Out11_Block
  endgenerate
  generate
  begin: Port_Out10_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out10_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_21;
  assign Port_Out10 = med;
  end // Port_Out10_Block
  endgenerate
  generate
  begin: Port_Out1_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out1_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_18;
  assign Port_Out1 = med;
  end // Port_Out1_Block
  endgenerate
  generate
  begin: Port_Out_block
    reg [13:0] med;
    wire [13:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_Out_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_17;
  assign Port_Out = med;
  end // Port_Out_Block
  endgenerate
  generate
  begin: Port_In9_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In9_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In9;
  end // inProc
  assign out_tmp = med;
  assign N_41 = out_tmp;
  end // Port_In9_Block
  endgenerate
  generate
  begin: Port_In8_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In8_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In8;
  end // inProc
  assign out_tmp = med;
  assign N_40 = out_tmp;
  end // Port_In8_Block
  endgenerate
  generate
  begin: Port_In7_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In7_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In7;
  end // inProc
  assign out_tmp = med;
  assign N_39 = out_tmp;
  end // Port_In7_Block
  endgenerate
  generate
  begin: Port_In66_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In66_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In66;
  end // inProc
  assign out_tmp = med;
  assign N_138 = out_tmp;
  end // Port_In66_Block
  endgenerate
  generate
  begin: Port_In65_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In65_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In65;
  end // inProc
  assign out_tmp = med;
  assign N_137 = out_tmp;
  end // Port_In65_Block
  endgenerate
  generate
  begin: Port_In64_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In64_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In64;
  end // inProc
  assign out_tmp = med;
  assign N_136 = out_tmp;
  end // Port_In64_Block
  endgenerate
  generate
  begin: Port_In63_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In63_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In63;
  end // inProc
  assign out_tmp = med;
  assign N_135 = out_tmp;
  end // Port_In63_Block
  endgenerate
  generate
  begin: Port_In62_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In62_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In62;
  end // inProc
  assign out_tmp = med;
  assign N_134 = out_tmp;
  end // Port_In62_Block
  endgenerate
  generate
  begin: Port_In61_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In61_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In61;
  end // inProc
  assign out_tmp = med;
  assign N_133 = out_tmp;
  end // Port_In61_Block
  endgenerate
  generate
  begin: Port_In60_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In60_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In60;
  end // inProc
  assign out_tmp = med;
  assign N_132 = out_tmp;
  end // Port_In60_Block
  endgenerate
  generate
  begin: Port_In6_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In6_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In6;
  end // inProc
  assign out_tmp = med;
  assign N_38 = out_tmp;
  end // Port_In6_Block
  endgenerate
  generate
  begin: Port_In59_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In59_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In59;
  end // inProc
  assign out_tmp = med;
  assign N_131 = out_tmp;
  end // Port_In59_Block
  endgenerate
  generate
  begin: Port_In57_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In57_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In57;
  end // inProc
  assign out_tmp = med;
  assign N_144 = out_tmp;
  end // Port_In57_Block
  endgenerate
  generate
  begin: Port_In56_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In56_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In56;
  end // inProc
  assign out_tmp = med;
  assign N_143 = out_tmp;
  end // Port_In56_Block
  endgenerate
  generate
  begin: Port_In55_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In55_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In55;
  end // inProc
  assign out_tmp = med;
  assign N_142 = out_tmp;
  end // Port_In55_Block
  endgenerate
  generate
  begin: Port_In54_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In54_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In54;
  end // inProc
  assign out_tmp = med;
  assign N_141 = out_tmp;
  end // Port_In54_Block
  endgenerate
  generate
  begin: Port_In53_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In53_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In53;
  end // inProc
  assign out_tmp = med;
  assign N_140 = out_tmp;
  end // Port_In53_Block
  endgenerate
  generate
  begin: Port_In52_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In52_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In52;
  end // inProc
  assign out_tmp = med;
  assign N_139 = out_tmp;
  end // Port_In52_Block
  endgenerate
  generate
  begin: Port_In51_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In51_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In51;
  end // inProc
  assign out_tmp = med;
  assign N_130 = out_tmp;
  end // Port_In51_Block
  endgenerate
  generate
  begin: Port_In50_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In50_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In50;
  end // inProc
  assign out_tmp = med;
  assign N_90 = out_tmp;
  end // Port_In50_Block
  endgenerate
  generate
  begin: Port_In5_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In5_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In5;
  end // inProc
  assign out_tmp = med;
  assign N_37 = out_tmp;
  end // Port_In5_Block
  endgenerate
  generate
  begin: Port_In49_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In49_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In49;
  end // inProc
  assign out_tmp = med;
  assign N_89 = out_tmp;
  end // Port_In49_Block
  endgenerate
  generate
  begin: Port_In48_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In48_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In48;
  end // inProc
  assign out_tmp = med;
  assign N_88 = out_tmp;
  end // Port_In48_Block
  endgenerate
  generate
  begin: Port_In47_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In47_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In47;
  end // inProc
  assign out_tmp = med;
  assign N_87 = out_tmp;
  end // Port_In47_Block
  endgenerate
  generate
  begin: Port_In46_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In46_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In46;
  end // inProc
  assign out_tmp = med;
  assign N_86 = out_tmp;
  end // Port_In46_Block
  endgenerate
  generate
  begin: Port_In45_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In45_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In45;
  end // inProc
  assign out_tmp = med;
  assign N_85 = out_tmp;
  end // Port_In45_Block
  endgenerate
  generate
  begin: Port_In44_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In44_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In44;
  end // inProc
  assign out_tmp = med;
  assign N_84 = out_tmp;
  end // Port_In44_Block
  endgenerate
  generate
  begin: Port_In43_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In43_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In43;
  end // inProc
  assign out_tmp = med;
  assign N_83 = out_tmp;
  end // Port_In43_Block
  endgenerate
  generate
  begin: Port_In42_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In42_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In42;
  end // inProc
  assign out_tmp = med;
  assign N_129 = out_tmp;
  end // Port_In42_Block
  endgenerate
  generate
  begin: Port_In41_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In41_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In41;
  end // inProc
  assign out_tmp = med;
  assign N_96 = out_tmp;
  end // Port_In41_Block
  endgenerate
  generate
  begin: Port_In40_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In40_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In40;
  end // inProc
  assign out_tmp = med;
  assign N_95 = out_tmp;
  end // Port_In40_Block
  endgenerate
  generate
  begin: Port_In4_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In4_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In4;
  end // inProc
  assign out_tmp = med;
  assign N_36 = out_tmp;
  end // Port_In4_Block
  endgenerate
  generate
  begin: Port_In39_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In39_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In39;
  end // inProc
  assign out_tmp = med;
  assign N_94 = out_tmp;
  end // Port_In39_Block
  endgenerate
  generate
  begin: Port_In38_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In38_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In38;
  end // inProc
  assign out_tmp = med;
  assign N_93 = out_tmp;
  end // Port_In38_Block
  endgenerate
  generate
  begin: Port_In37_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In37_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In37;
  end // inProc
  assign out_tmp = med;
  assign N_92 = out_tmp;
  end // Port_In37_Block
  endgenerate
  generate
  begin: Port_In36_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In36_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In36;
  end // inProc
  assign out_tmp = med;
  assign N_91 = out_tmp;
  end // Port_In36_Block
  endgenerate
  generate
  begin: Port_In35_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In35_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In35;
  end // inProc
  assign out_tmp = med;
  assign N_82 = out_tmp;
  end // Port_In35_Block
  endgenerate
  generate
  begin: Port_In34_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In34_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In34;
  end // inProc
  assign out_tmp = med;
  assign N_81 = out_tmp;
  end // Port_In34_Block
  endgenerate
  generate
  begin: Port_In33_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In33_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In33;
  end // inProc
  assign out_tmp = med;
  assign N_186 = out_tmp;
  end // Port_In33_Block
  endgenerate
  generate
  begin: Port_In32_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In32_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In32;
  end // inProc
  assign out_tmp = med;
  assign N_185 = out_tmp;
  end // Port_In32_Block
  endgenerate
  generate
  begin: Port_In31_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In31_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In31;
  end // inProc
  assign out_tmp = med;
  assign N_184 = out_tmp;
  end // Port_In31_Block
  endgenerate
  generate
  begin: Port_In30_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In30_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In30;
  end // inProc
  assign out_tmp = med;
  assign N_183 = out_tmp;
  end // Port_In30_Block
  endgenerate
  generate
  begin: Port_In3_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In3_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In3;
  end // inProc
  assign out_tmp = med;
  assign N_35 = out_tmp;
  end // Port_In3_Block
  endgenerate
  generate
  begin: Port_In29_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In29_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In29;
  end // inProc
  assign out_tmp = med;
  assign N_182 = out_tmp;
  end // Port_In29_Block
  endgenerate
  generate
  begin: Port_In28_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In28_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In28;
  end // inProc
  assign out_tmp = med;
  assign N_181 = out_tmp;
  end // Port_In28_Block
  endgenerate
  generate
  begin: Port_In27_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In27_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In27;
  end // inProc
  assign out_tmp = med;
  assign N_180 = out_tmp;
  end // Port_In27_Block
  endgenerate
  generate
  begin: Port_In26_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In26_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In26;
  end // inProc
  assign out_tmp = med;
  assign N_179 = out_tmp;
  end // Port_In26_Block
  endgenerate
  generate
  begin: Port_In24_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In24_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In24;
  end // inProc
  assign out_tmp = med;
  assign N_192 = out_tmp;
  end // Port_In24_Block
  endgenerate
  generate
  begin: Port_In23_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In23_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In23;
  end // inProc
  assign out_tmp = med;
  assign N_191 = out_tmp;
  end // Port_In23_Block
  endgenerate
  generate
  begin: Port_In22_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In22_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In22;
  end // inProc
  assign out_tmp = med;
  assign N_190 = out_tmp;
  end // Port_In22_Block
  endgenerate
  generate
  begin: Port_In21_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In21_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In21;
  end // inProc
  assign out_tmp = med;
  assign N_189 = out_tmp;
  end // Port_In21_Block
  endgenerate
  generate
  begin: Port_In20_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In20_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In20;
  end // inProc
  assign out_tmp = med;
  assign N_188 = out_tmp;
  end // Port_In20_Block
  endgenerate
  generate
  begin: Port_In2_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In2_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In2;
  end // inProc
  assign out_tmp = med;
  assign N_34 = out_tmp;
  end // Port_In2_Block
  endgenerate
  generate
  begin: Port_In19_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In19_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In19;
  end // inProc
  assign out_tmp = med;
  assign N_187 = out_tmp;
  end // Port_In19_Block
  endgenerate
  generate
  begin: Port_In18_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In18_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In18;
  end // inProc
  assign out_tmp = med;
  assign N_178 = out_tmp;
  end // Port_In18_Block
  endgenerate
  generate
  begin: Port_In17_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In17_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In17;
  end // inProc
  assign out_tmp = med;
  assign N_177 = out_tmp;
  end // Port_In17_Block
  endgenerate
  generate
  begin: Port_In16_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In16_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In16;
  end // inProc
  assign out_tmp = med;
  assign N_48 = out_tmp;
  end // Port_In16_Block
  endgenerate
  generate
  begin: Port_In15_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In15_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In15;
  end // inProc
  assign out_tmp = med;
  assign N_47 = out_tmp;
  end // Port_In15_Block
  endgenerate
  generate
  begin: Port_In14_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In14_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In14;
  end // inProc
  assign out_tmp = med;
  assign N_46 = out_tmp;
  end // Port_In14_Block
  endgenerate
  generate
  begin: Port_In13_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In13_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In13;
  end // inProc
  assign out_tmp = med;
  assign N_45 = out_tmp;
  end // Port_In13_Block
  endgenerate
  generate
  begin: Port_In12_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In12_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In12;
  end // inProc
  assign out_tmp = med;
  assign N_44 = out_tmp;
  end // Port_In12_Block
  endgenerate
  generate
  begin: Port_In11_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In11_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In11;
  end // inProc
  assign out_tmp = med;
  assign N_43 = out_tmp;
  end // Port_In11_Block
  endgenerate
  generate
  begin: Port_In10_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In10_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In10;
  end // inProc
  assign out_tmp = med;
  assign N_42 = out_tmp;
  end // Port_In10_Block
  endgenerate
  generate
  begin: Port_In1_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In1_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In1;
  end // inProc
  assign out_tmp = med;
  assign N_33 = out_tmp;
  end // Port_In1_Block
  endgenerate
  generate
  begin: Port_In_block
    wire [7:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [7:0] med;
  always @(posedge clk or posedge GlobalResetSel)
  begin: Port_In_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In;
  end // inProc
  assign out_tmp = med;
  assign N_195 = out_tmp;
  end // Port_In_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

