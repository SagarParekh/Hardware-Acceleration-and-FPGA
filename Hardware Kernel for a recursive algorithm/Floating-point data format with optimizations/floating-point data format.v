// ********************************************************************
//
// Copyright (C) 1994-2016 Synopsys, Inc. All rights reserved. This Synopsys software and all associated documentation are proprietary to Synopsys, Inc. and may only be used pursuant to the terms and conditions of a written license agreement with Synopsys, Inc. All other use, reproduction, modification, or distribution of the Synopsys software or the associated documentation is strictly prohibited.

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler L-2016.03, Build 2009R, Feb 25 2016
// Date written:             Thu Mar 22 01:53:48 2018

// ********************************************************************

// Generated from /afs/asu.edu/users/s/j/p/sjparekh/asap7_sagar/FPGA/HW3/HW3.slx Version 1.9 Last modified date Thu Mar 22 01:50:13 2018
module Multi_Add_FP_Add_getmsbpos1_LZDPstg1_2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input x2_sel, // ufix1
  input [3:0] x2, // ufix4_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [3:0] N_6 ;
wire [0:0] N_4 ;
wire [0:0] N_8 ;
wire [3:0] N_7 ;
wire [3:0] N_5 ;
wire [0:0] N_1 ;
wire [3:0] N_2 ;
wire [0:0] N_3 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen132_1_144 ;
wire [0:0] N_GlobalEnable1_0_219 ;
wire [3:0] N_x1_0_220 ;
wire [0:0] N_x1_sel_0_221 ;
wire [3:0] N_x2_0_222 ;
wire [0:0] N_x2_sel_0_223 ;
wire [3:0] N_y_1_224 ;
wire [0:0] N_y_sel_1_225 ;
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen132_1_144 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  assign N_6 = (N_8 == 0) ? N_7 : N_5; // mux block
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDPstg1_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input x2_sel, // ufix1
  input [2:0] x2, // ufix3_En0
  input x1_sel, // ufix1
  input [1:0] x1 // ufix2_En0
);
wire [2:0] N_6 ;
wire [0:0] N_4 ;
wire [0:0] N_8 ;
wire [2:0] N_7 ;
wire [1:0] N_5 ;
wire [0:0] N_1 ;
wire [2:0] N_2 ;
wire [0:0] N_3 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen131_1_143 ;
wire [0:0] N_GlobalEnable1_0_226 ;
wire [1:0] N_x1_0_227 ;
wire [0:0] N_x1_sel_0_228 ;
wire [2:0] N_x2_0_229 ;
wire [0:0] N_x2_sel_0_230 ;
wire [2:0] N_y_1_231 ;
wire [0:0] N_y_sel_1_232 ;
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_3 = x2_sel;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen131_1_143 = GlobalEnable1;
    assign N_2 = N_6;
    assign N_1 = N_4;
  generate
  begin: Mux_block
    wire [2:0] med  [1:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_4 = (N_8 | N_3);
  end // Binary_Logic_block;
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDP1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [1:0] y, // ufix2_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5 ;
wire [1:0] N_4 ;
wire [0:0] N_3 ;
wire [1:0] N_6 ;
wire [1:0] N_7 ;
wire [0:0] N_8 ;
wire [0:0] N_9 ;
wire [0:0] N_1 ;
wire [1:0] N_2 ;
wire [3:0] N_sel_0_233 ;
wire [1:0] N_y_1_234 ;
wire [0:0] N_y_sel_1_235 ;
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_9 = 1'b0;
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [1:0] med  [15:0];
    reg [1:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 2'b11;
assign N_7 = 2'b10;
assign N_8 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDP2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [2:0] y, // ufix3_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5 ;
wire [2:0] N_4 ;
wire [0:0] N_3 ;
wire [2:0] N_6 ;
wire [2:0] N_7 ;
wire [2:0] N_8 ;
wire [2:0] N_9 ;
wire [0:0] N_1 ;
wire [2:0] N_2 ;
wire [3:0] N_sel_0_236 ;
wire [2:0] N_y_1_237 ;
wire [0:0] N_y_sel_1_238 ;
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [2:0] med  [15:0];
    reg [2:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 3'b111;
assign N_7 = 3'b110;
assign N_8 = 3'b101;
assign N_9 = 3'b100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDP3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5 ;
wire [3:0] N_4 ;
wire [0:0] N_3 ;
wire [3:0] N_6 ;
wire [3:0] N_7 ;
wire [3:0] N_8 ;
wire [3:0] N_9 ;
wire [0:0] N_1 ;
wire [3:0] N_2 ;
wire [3:0] N_sel_0_239 ;
wire [3:0] N_y_1_240 ;
wire [0:0] N_y_sel_1_241 ;
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1011;
assign N_7 = 4'b1010;
assign N_8 = 4'b1001;
assign N_9 = 4'b1000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDP4 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output y_sel, // ufix1
  output [3:0] y, // ufix4_En0
  input [3:0] sel // ufix4_En0
);
wire [3:0] N_5 ;
wire [3:0] N_4 ;
wire [0:0] N_3 ;
wire [3:0] N_6 ;
wire [3:0] N_7 ;
wire [3:0] N_8 ;
wire [3:0] N_9 ;
wire [0:0] N_1 ;
wire [3:0] N_2 ;
wire [3:0] N_sel_0_242 ;
wire [3:0] N_y_1_243 ;
wire [0:0] N_y_sel_1_244 ;
wire GlobalResetSel;
assign y_sel = N_1;
assign y = N_2;
  assign N_5 = sel;
  generate
  begin: Comparator_block
  wire  [3:0] med1;
  wire  [3:0] med2;
  wire outp;
  assign med1 = $unsigned(N_5) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_3 = outp;
    synComparator #(
      .bitwidth(4),
      .datatype("unsign"),
      .opr("neq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
    assign N_2 = N_4;
    assign N_1 = N_3;
  generate
  begin: Mux_block
    wire [3:0] med  [15:0];
    reg [3:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 4'b1111;
assign N_7 = 4'b1110;
assign N_8 = 4'b1101;
assign N_9 = 4'b1100;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDP5 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [3:0] sel // ufix4_En0
);
wire [4:0] N_4 ;
wire [3:0] N_5 ;
wire [4:0] N_6 ;
wire [4:0] N_7 ;
wire [4:0] N_8 ;
wire [4:0] N_9 ;
wire [4:0] N_2 ;
wire [3:0] N_sel_0_245 ;
wire [4:0] N_y_1_246 ;
wire GlobalResetSel;
assign y = N_2;
  assign N_5 = sel;
    assign N_2 = N_4;
  generate
  begin: Mux_block
    wire [4:0] med  [15:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_6) ;
    assign med[1] = $unsigned(N_6) ;
    assign med[2] = $unsigned(N_7) ;
    assign med[3] = $unsigned(N_7) ;
    assign med[4] = $unsigned(N_8) ;
    assign med[5] = $unsigned(N_8) ;
    assign med[6] = $unsigned(N_8) ;
    assign med[7] = $unsigned(N_8) ;
    assign med[8] = $unsigned(N_9) ;
    assign med[9] = $unsigned(N_9) ;
    assign med[10] = $unsigned(N_9) ;
    assign med[11] = $unsigned(N_9) ;
    assign med[12] = $unsigned(N_9) ;
    assign med[13] = $unsigned(N_9) ;
    assign med[14] = $unsigned(N_9) ;
    assign med[15] = $unsigned(N_9) ;

    always@(*)
    begin
      if(N_5[3:0] >= 16)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[3:0]];
    end

    assign N_4 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_6 = 5'b10011;
assign N_7 = 5'b10010;
assign N_8 = 5'b10001;
assign N_9 = 5'b10000;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDPodd (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [4:0] x, // ufix5_En0
  input msb // ufix1
);
wire [4:0] N_7 ;
wire [0:0] N_3 ;
wire [5:0] N_6 ;
wire [0:0] N_5 ;
wire [5:0] N_4 ;
wire [0:0] N_2 ;
wire [5:0] N_1 ;
wire [0:0] N_msb_0_247 ;
wire [4:0] N_x_0_248 ;
wire [5:0] N_y_1_249 ;
wire GlobalResetSel;
assign y = N_1;
  assign N_7 = x;
  assign N_5 = msb;
  generate
  begin: Add_block
    wire enab;
    wire [5:0] tmpOut;
    wire  [5:0] tmp_N_7_0;
    wire  [5:0] tmp_N_3_1;
    wire [5:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_7_0 = ($unsigned(N_7) << 0);
    assign tmp_N_3_1 = ($unsigned(N_3) << 0);
    assign  tmpOutPre =   tmp_N_7_0 + tmp_N_3_1;
    assign tmpOut = tmpOutPre;
    assign N_4 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
assign N_2 = 1'b0;
    assign N_1 = N_6;
  generate
  begin: Mux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_4) ;
    assign med[1] = $unsigned(N_2) ;

    always@(*)
    begin
      if(N_5[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_5[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign N_3 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDPstg2_1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [2:0] x1 // ufix3_En0
);
wire [4:0] N_6 ;
wire [0:0] N_8 ;
wire [4:0] N_7 ;
wire [2:0] N_5 ;
wire [4:0] N_2 ;
wire [2:0] N_x1_0_250 ;
wire [0:0] N_x1_sel_0_251 ;
wire [4:0] N_x2_0_252 ;
wire [4:0] N_y_1_253 ;
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1_LZDPstg1_3 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [4:0] y, // ufix5_En0
  input [4:0] x2, // ufix5_En0
  input x1_sel, // ufix1
  input [3:0] x1 // ufix4_En0
);
wire [4:0] N_6 ;
wire [0:0] N_8 ;
wire [4:0] N_7 ;
wire [3:0] N_5 ;
wire [4:0] N_2 ;
wire [3:0] N_x1_0_254 ;
wire [0:0] N_x1_sel_0_255 ;
wire [4:0] N_x2_0_256 ;
wire [4:0] N_y_1_257 ;
wire GlobalResetSel;
assign y = N_2;
  assign N_7 = x2;
  assign N_8 = x1_sel;
  assign N_5 = x1;
    assign N_2 = N_6;
  generate
  begin: Mux_block
    wire [4:0] med  [1:0];
    reg [4:0] tmpOut;
    assign med[0] = $unsigned(N_7) ;
    assign med[1] = $unsigned(N_5) ;

    always@(*)
    begin
      if(N_8[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_8[0:0]];
    end

    assign N_6 = tmpOut;
  end // Mux_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add_getmsbpos1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [5:0] y, // ufix6_En0
  input [20:0] x // ufix21_En0
);
wire [20:0] N_25 ;
wire [0:0] N_27 ;
wire [5:0] N_24 ;
wire [4:0] N_28 ;
wire [5:0] N_29 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen130_1_142 ;
wire [3:0] N_5 ;
wire [0:0] N_6 ;
wire [3:0] N_7 ;
wire [0:0] N_8 ;
wire [1:0] N_1 ;
wire [0:0] N_2 ;
wire [2:0] N_3 ;
wire [0:0] N_4 ;
wire [3:0] N_19 ;
wire [3:0] N_20 ;
wire [3:0] N_21 ;
wire [3:0] N_22 ;
wire [3:0] N_23 ;
wire [0:0] N_17 ;
wire [4:0] N_18 ;
wire [2:0] N_13 ;
wire [0:0] N_14 ;
wire [4:0] N_15 ;
wire [3:0] N_9 ;
wire [0:0] N_10 ;
wire [4:0] N_11 ;
wire [0:0] N_GlobalEnable1_0_258 ;
wire [20:0] N_x_0_259 ;
wire [5:0] N_y_1_260 ;
wire GlobalResetSel;
assign y = N_29;
  assign N_25 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen130_1_142 = GlobalEnable1;
  //start Extract
    assign N_17[0] = N_25[20];
    assign N_19[0] = N_25[16];
    assign N_19[1] = N_25[17];
    assign N_19[2] = N_25[18];
    assign N_19[3] = N_25[19];
    assign N_20[0] = N_25[12];
    assign N_20[1] = N_25[13];
    assign N_20[2] = N_25[14];
    assign N_20[3] = N_25[15];
    assign N_21[0] = N_25[8];
    assign N_21[1] = N_25[9];
    assign N_21[2] = N_25[10];
    assign N_21[3] = N_25[11];
    assign N_22[0] = N_25[4];
    assign N_22[1] = N_25[5];
    assign N_22[2] = N_25[6];
    assign N_22[3] = N_25[7];
    assign N_23[0] = N_25[0];
    assign N_23[1] = N_25[1];
    assign N_23[2] = N_25[2];
    assign N_23[3] = N_25[3];
  //end Extract
  generate
  begin: Zmux_block
    wire [5:0] med  [1:0];
    reg [5:0] tmpOut;
    assign med[0] = $unsigned(N_24) ;
    assign med[1] = $unsigned(N_28) ;

    always@(*)
    begin
      if(N_27[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_27[0:0]];
    end

    assign N_29 = tmpOut;
  end // Zmux_Block
  endgenerate
  generate
  begin: Zcomp_block
  wire  [20:0] med1;
  wire  [20:0] med2;
  wire outp;
  assign med1 = $unsigned(N_25) ;
  assign med2 = $unsigned(1'b0) ;
  assign N_27 = outp;
    synComparator #(
      .bitwidth(21),
      .datatype("unsign"),
      .opr("equ")
    ) Zcomp (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Zcomp_block;
  endgenerate
assign N_28 = 5'b10101;
    Multi_Add_FP_Add_getmsbpos1_LZDPstg1_2  myLZDPstg1_2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_5),
      .x1_sel(N_6),
      .x2(N_7),
      .x2_sel(N_8),
      .y(N_9) ,
      .y_sel(N_10)    );
    Multi_Add_FP_Add_getmsbpos1_LZDPstg1_1  myLZDPstg1_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_1),
      .x1_sel(N_2),
      .x2(N_3),
      .x2_sel(N_4),
      .y(N_13) ,
      .y_sel(N_14)    );
    Multi_Add_FP_Add_getmsbpos1_LZDP1  myLZDP1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_19),
      .y(N_1) ,
      .y_sel(N_2)    );
    Multi_Add_FP_Add_getmsbpos1_LZDP2  myLZDP2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_20),
      .y(N_3) ,
      .y_sel(N_4)    );
    Multi_Add_FP_Add_getmsbpos1_LZDP3  myLZDP3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_21),
      .y(N_5) ,
      .y_sel(N_6)    );
    Multi_Add_FP_Add_getmsbpos1_LZDP4  myLZDP4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_22),
      .y(N_7) ,
      .y_sel(N_8)    );
    Multi_Add_FP_Add_getmsbpos1_LZDP5  myLZDP5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .sel(N_23),
      .y(N_11)    );
    Multi_Add_FP_Add_getmsbpos1_LZDPodd  myLZDPodd (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .msb(N_17),
      .x(N_18),
      .y(N_24)    );
    Multi_Add_FP_Add_getmsbpos1_LZDPstg2_1  myLZDPstg2_1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_13),
      .x1_sel(N_14),
      .x2(N_15),
      .y(N_18)    );
    Multi_Add_FP_Add_getmsbpos1_LZDPstg1_3  myLZDPstg1_3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x1(N_9),
      .x1_sel(N_10),
      .x2(N_11),
      .y(N_15)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [28:0] z, // ufix29_En0
  input [28:0] y, // ufix29_En0
  input [52:0] x // sfix53_En8
);
wire [22:0] N_73 ;
wire [7:0] N_51 ;
wire [0:0] N_29 ;
wire [7:0] N_41 ;
wire [7:0] N_42 ;
wire [7:0] N_53 ;
wire [30:0] N_47 ;
wire [30:0] N_48 ;
wire [5:0] N_97 ;
wire [22:0] N_52 ;
wire [0:0] N_56 ;
wire [7:0] N_54 ;
wire [19:0] N_55 ;
wire [0:0] N_30 ;
wire [19:0] N_77 ;
wire [0:0] N_31 ;
wire [19:0] N_83 ;
wire [9:0] N_90 ;
wire [8:0] N_71 ;
wire [8:0] N_72 ;
wire [20:0] N_27 ;
wire [20:0] N_28 ;
wire [20:0] N_80 ;
wire [20:0] N_96 ;
wire [31:0] N_16 ;
wire [20:0] N_89 ;
wire [7:0] N_86 ;
wire [7:0] N_75 ;
wire [29:0] N_94 ;
wire [29:0] N_95 ;
wire [0:0] N_64 ;
wire [0:0] N_70 ;
wire [30:0] N_87 ;
wire [30:0] N_88 ;
wire [22:0] N_12 ;
wire [7:0] N_49 ;
wire [7:0] N_82 ;
wire [7:0] N_32 ;
wire [19:0] N_84 ;
wire [0:0] N_22 ;
wire [20:0] N_35 ;
wire [20:0] N_36 ;
wire [0:0] N_74 ;
wire [0:0] N_81 ;
wire [0:0] N_69 ;
wire [8:0] N_14 ;
wire [8:0] N_15 ;
wire [22:0] N_39 ;
wire [52:0] N_3 ;
wire [22:0] N_50 ;
wire [28:0] N_4 ;
wire [20:0] N_40 ;
wire [0:0] N_21 ;
wire [0:0] N_45 ;
wire [29:0] N_43 ;
wire [30:0] N_92 ;
wire [0:0] N_46 ;
wire [29:0] N_44 ;
wire [30:0] N_93 ;
wire [0:0] N_79 ;
wire [20:0] N_38 ;
wire [20:0] N_37 ;
wire [9:0] N_17 ;
wire [8:0] N_13 ;
wire [20:0] N_57 ;
wire [8:0] N_33 ;
wire [20:0] N_58 ;
wire [8:0] N_34 ;
wire [20:0] N_76 ;
wire [28:0] N_26 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen129_1_141 ;
wire [0:0] N_GlobalEnable1_0_261 ;
wire [52:0] N_x_0_262 ;
wire [28:0] N_y_0_263 ;
wire [28:0] N_z_1_264 ;
wire GlobalResetSel;
assign z = N_26;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen129_1_141 = GlobalEnable1;
  generate
  begin: Abs_syn_block
    wire signed [23:0] med;
    wire [23:0] medo;
    wire [23:0] tmpOut;
    assign med = $signed(N_73);
    assign medo = $unsigned(tmpOut) ;
    assign N_12 = medo[22:0];
    synAbs #(
      .bitwidth(24)
    ) Abs_syn (
      .inp(med),
      .outp(tmpOut)
    );
  end // Abs_syn_block
  endgenerate
  generate
  begin: Add_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_51_0;
    wire  [8:0] tmp_N_29_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_29_1 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 + tmp_N_29_1;
    assign tmpOut = tmpOutPre;
    assign N_13 = $unsigned(tmpOut) << 0;
  end // Add_block
  endgenerate
  generate
  begin: Add1_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_41_0;
    wire  [8:0] tmp_N_42_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_42_1 = ($unsigned(N_42) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_42_1;
    assign tmpOut = tmpOutPre;
    assign N_14 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_41_0;
    wire  [8:0] tmp_N_53_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_41_0 = ($unsigned(N_41) << 0);
    assign tmp_N_53_1 = ($unsigned(N_53) << 0);
    assign  tmpOutPre =   tmp_N_41_0 - tmp_N_53_1;
    assign tmpOut = tmpOutPre;
    assign N_15 = $signed(tmpOut) << 0;
  end // Add2_block
  endgenerate
  generate
  begin: Add3_block
    wire enab;
    wire [31:0] tmpOut;
    wire signed [31:0] tmp_N_47_0;
    wire signed [31:0] tmp_N_48_1;
    wire [31:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_47_0 = ($signed(N_47) << 0);
    assign tmp_N_48_1 = ($signed(N_48) << 0);
    assign  tmpOutPre =   tmp_N_47_0 + tmp_N_48_1;
    assign tmpOut = tmpOutPre;
    assign N_16 = $signed(tmpOut) << 0;
  end // Add3_block
  endgenerate
  generate
  begin: Add4_block
    wire enab;
    wire [9:0] tmpOut;
    wire  [9:0] tmp_N_51_0;
    wire  [9:0] tmp_N_97_1;
    wire  [9:0] tmp_N_29_2;
    wire [9:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_51_0 = ($unsigned(N_51) << 0);
    assign tmp_N_97_1 = ($unsigned(N_97) << 0);
    assign tmp_N_29_2 = ($unsigned(N_29) << 0);
    assign  tmpOutPre =   tmp_N_51_0 - tmp_N_97_1 + tmp_N_29_2;
    assign tmpOut = tmpOutPre;
    assign N_17 = $signed(tmpOut) << 0;
  end // Add4_block
  endgenerate
  generate
  begin: Comparator1_block
  wire signed [22:0] med1;
  wire signed [22:0] med2;
  wire outp;
  assign med1 = $signed(N_52) ;
  assign med2 = $signed(21'b000000000000000000000) ;
  assign N_22 = outp;
    synComparator #(
      .bitwidth(23),
      .datatype("signed"),
      .opr("les")
    ) Comparator1 (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator1_block;
  endgenerate
  generate
  begin: Concat_block
    wire [28:0] med;
    assign med = { N_56, N_54, N_55 };
    assign N_26 = med[28:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [20:0] med;
    assign med = { N_30, N_77 };
    assign N_27 = med[20:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [20:0] med;
    assign med = { N_31, N_83 };
    assign N_28 = med[20:0];  end // Concat2_block
  endgenerate
  synBusAdapter #(
      .inp_width(10),
      .out_width(8),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert (
      .inp(N_90),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(9),
      .out_width(9),
      .datatype("signed"),
      .preshift(0)
    ) Convert1 (
      .inp(N_71),
      .outp(N_33)
   );
  synBusAdapter #(
      .inp_width(9),
      .out_width(9),
      .datatype("signed"),
      .preshift(0)
    ) Convert2 (
      .inp(N_72),
      .outp(N_34)
   );
  synBusAdapter #(
      .inp_width(21),
      .out_width(21),
      .datatype("unsign"),
      .preshift(0)
    ) Convert3 (
      .inp(N_27),
      .outp(N_35)
   );
  synBusAdapter #(
      .inp_width(21),
      .out_width(21),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_28),
      .outp(N_36)
   );
  synBusAdapter #(
      .inp_width(21),
      .out_width(21),
      .datatype("unsign"),
      .preshift(1)
    ) Convert5 (
      .inp(N_80),
      .outp(N_37)
   );
  synBusAdapter #(
      .inp_width(21),
      .out_width(21),
      .datatype("unsign"),
      .preshift(0)
    ) Convert6 (
      .inp(N_96),
      .outp(N_38)
   );
  synBusAdapter #(
      .inp_width(32),
      .out_width(23),
      .datatype("signed"),
      .preshift(0),

      .infrac(30),
      .outfrac(20),
      .sat(0),
      .round(2),
      .saType("SS")
    ) Convert7 (
      .inp(N_16),
      .outp(N_39)
   );
  synBusAdapter #(
      .inp_width(21),
      .out_width(21),
      .datatype("unsign"),
      .preshift(0)
    ) Convert8 (
      .inp(N_89),
      .outp(N_40)
   );
    synDelayWithEnable #( .bitwidth(8), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(8), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(30), .delaylength(3) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_94), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(30), .delaylength(3) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_95), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(3) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_64), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(3) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_46) );
    synDelayWithEnable #( .bitwidth(31), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_47) );
    synDelayWithEnable #( .bitwidth(31), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_48) );
    synDelayWithEnable #( .bitwidth(8), .delaylength(6) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_41), .outp(N_49) );
    synDelayWithEnable #( .bitwidth(23), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_50) );
    synDelayWithEnable #( .bitwidth(8), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_51) );
    synDelayWithEnable #( .bitwidth(23), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_52) );
    synDelayWithEnable #( .bitwidth(8), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_53) );
    synDelayWithEnable #( .bitwidth(8), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_54) );
    synDelayWithEnable #( .bitwidth(20), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_55) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_22), .outp(N_56) );
    synDelayWithEnable #( .bitwidth(21), .delaylength(2) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_35), .outp(N_57) );
    synDelayWithEnable #( .bitwidth(21), .delaylength(2) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(2) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_74), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_69), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(9), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(9), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_72) );
    synDelayWithEnable #( .bitwidth(23), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_39), .outp(N_73) );
  //start Extract
    assign N_74[0] = N_3[52];
  //end Extract
  //start Extract1
    assign N_75[0] = N_3[20];
    assign N_75[1] = N_3[21];
    assign N_75[2] = N_3[22];
    assign N_75[3] = N_3[23];
    assign N_75[4] = N_3[24];
    assign N_75[5] = N_3[25];
    assign N_75[6] = N_3[26];
    assign N_75[7] = N_3[27];
  //end Extract1
  //start Extract10
    assign N_76[0] = N_50[0];
    assign N_76[1] = N_50[1];
    assign N_76[2] = N_50[2];
    assign N_76[3] = N_50[3];
    assign N_76[4] = N_50[4];
    assign N_76[5] = N_50[5];
    assign N_76[6] = N_50[6];
    assign N_76[7] = N_50[7];
    assign N_76[8] = N_50[8];
    assign N_76[9] = N_50[9];
    assign N_76[10] = N_50[10];
    assign N_76[11] = N_50[11];
    assign N_76[12] = N_50[12];
    assign N_76[13] = N_50[13];
    assign N_76[14] = N_50[14];
    assign N_76[15] = N_50[15];
    assign N_76[16] = N_50[16];
    assign N_76[17] = N_50[17];
    assign N_76[18] = N_50[18];
    assign N_76[19] = N_50[19];
    assign N_76[20] = N_50[20];
  //end Extract10
  //start Extract2
    assign N_77[0] = N_3[0];
    assign N_77[1] = N_3[1];
    assign N_77[2] = N_3[2];
    assign N_77[3] = N_3[3];
    assign N_77[4] = N_3[4];
    assign N_77[5] = N_3[5];
    assign N_77[6] = N_3[6];
    assign N_77[7] = N_3[7];
    assign N_77[8] = N_3[8];
    assign N_77[9] = N_3[9];
    assign N_77[10] = N_3[10];
    assign N_77[11] = N_3[11];
    assign N_77[12] = N_3[12];
    assign N_77[13] = N_3[13];
    assign N_77[14] = N_3[14];
    assign N_77[15] = N_3[15];
    assign N_77[16] = N_3[16];
    assign N_77[17] = N_3[17];
    assign N_77[18] = N_3[18];
    assign N_77[19] = N_3[19];
  //end Extract2
  //start Extract4
    assign N_79[0] = N_50[21];
  //end Extract4
  //start Extract5
    assign N_80[0] = N_50[0];
    assign N_80[1] = N_50[1];
    assign N_80[2] = N_50[2];
    assign N_80[3] = N_50[3];
    assign N_80[4] = N_50[4];
    assign N_80[5] = N_50[5];
    assign N_80[6] = N_50[6];
    assign N_80[7] = N_50[7];
    assign N_80[8] = N_50[8];
    assign N_80[9] = N_50[9];
    assign N_80[10] = N_50[10];
    assign N_80[11] = N_50[11];
    assign N_80[12] = N_50[12];
    assign N_80[13] = N_50[13];
    assign N_80[14] = N_50[14];
    assign N_80[15] = N_50[15];
    assign N_80[16] = N_50[16];
    assign N_80[17] = N_50[17];
    assign N_80[18] = N_50[18];
    assign N_80[19] = N_50[19];
    assign N_80[20] = N_50[20];
  //end Extract5
  //start Extract6
    assign N_81[0] = N_4[28];
  //end Extract6
  //start Extract7
    assign N_82[0] = N_4[20];
    assign N_82[1] = N_4[21];
    assign N_82[2] = N_4[22];
    assign N_82[3] = N_4[23];
    assign N_82[4] = N_4[24];
    assign N_82[5] = N_4[25];
    assign N_82[6] = N_4[26];
    assign N_82[7] = N_4[27];
  //end Extract7
  //start Extract8
    assign N_83[0] = N_4[0];
    assign N_83[1] = N_4[1];
    assign N_83[2] = N_4[2];
    assign N_83[3] = N_4[3];
    assign N_83[4] = N_4[4];
    assign N_83[5] = N_4[5];
    assign N_83[6] = N_4[6];
    assign N_83[7] = N_4[7];
    assign N_83[8] = N_4[8];
    assign N_83[9] = N_4[9];
    assign N_83[10] = N_4[10];
    assign N_83[11] = N_4[11];
    assign N_83[12] = N_4[12];
    assign N_83[13] = N_4[13];
    assign N_83[14] = N_4[14];
    assign N_83[15] = N_4[15];
    assign N_83[16] = N_4[16];
    assign N_83[17] = N_4[17];
    assign N_83[18] = N_4[18];
    assign N_83[19] = N_4[19];
  //end Extract8
  //start Extract9
    assign N_84[0] = N_40[0];
    assign N_84[1] = N_40[1];
    assign N_84[2] = N_40[2];
    assign N_84[3] = N_40[3];
    assign N_84[4] = N_40[4];
    assign N_84[5] = N_40[5];
    assign N_84[6] = N_40[6];
    assign N_84[7] = N_40[7];
    assign N_84[8] = N_40[8];
    assign N_84[9] = N_40[9];
    assign N_84[10] = N_40[10];
    assign N_84[11] = N_40[11];
    assign N_84[12] = N_40[12];
    assign N_84[13] = N_40[13];
    assign N_84[14] = N_40[14];
    assign N_84[15] = N_40[15];
    assign N_84[16] = N_40[16];
    assign N_84[17] = N_40[17];
    assign N_84[18] = N_40[18];
    assign N_84[19] = N_40[19];
  //end Extract9
  assign N_86 = (N_21 == 0) ? N_82 : N_75; // mux block
  generate
  begin: Mux1_block
    wire [30:0] med  [1:0];
    reg [30:0] tmpOut;
    assign med[0] = $unsigned(N_43) ;
    assign med[1] = $signed(N_92) ;

    always@(*)
    begin
      if(N_45[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_45[0:0]];
    end

    assign N_87 = tmpOut;
  end // Mux1_Block
  endgenerate
  generate
  begin: Mux2_block
    wire [30:0] med  [1:0];
    reg [30:0] tmpOut;
    assign med[0] = $unsigned(N_44) ;
    assign med[1] = $signed(N_93) ;

    always@(*)
    begin
      if(N_46[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_46[0:0]];
    end

    assign N_88 = tmpOut;
  end // Mux2_Block
  endgenerate
  assign N_89 = (N_79 == 0) ? N_38 : N_37; // mux block
  generate
  begin: Mux4_block
    wire [9:0] med  [1:0];
    reg [9:0] tmpOut;
    assign med[0] = $signed(N_17) ;
    assign med[1] = $unsigned(N_13) ;

    always@(*)
    begin
      if(N_79[0:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_79[0:0]];
    end

    assign N_90 = tmpOut;
  end // Mux4_Block
  endgenerate
  generate
  begin: Negate_block
    wire  [30:0] med ;
    wire signed [30:0] medo;
    wire [30:0] tmpOut;
    assign med = $unsigned(N_43);
    assign medo = $signed(tmpOut) ;
    assign N_92 = medo[30:0];
    synNegate #(
      .bitwidth(31)
    ) Negate (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate_block;
  endgenerate
  generate
  begin: Negate1_block
    wire  [30:0] med ;
    wire signed [30:0] medo;
    wire [30:0] tmpOut;
    assign med = $unsigned(N_44);
    assign medo = $signed(tmpOut) ;
    assign N_93 = medo[30:0];
    synNegate #(
      .bitwidth(31)
    ) Negate1 (
      .inp(med),
      .outp(tmpOut)
    );
  end // Negate1_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [29:0] medo;
    wire [29:0] tmpIn;
    assign tmpIn = (N_57) <<< 9;
    assign N_94 = medo[29:0];
    synShifter #(
      .inpBitW(30),
      .outBitW(30),
      .shfBitW(9),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_33[8:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [29:0] medo;
    wire [29:0] tmpIn;
    assign tmpIn = (N_58) <<< 9;
    assign N_95 = medo[29:0];
    synShifter #(
      .inpBitW(30),
      .outBitW(30),
      .shfBitW(9),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_34[8:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [20:0] medo;
    wire [20:0] tmpIn;
    assign tmpIn = (N_76) ;
    assign N_96 = medo[20:0];
    synShifter #(
      .inpBitW(21),
      .outBitW(21),
      .shfBitW(6),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_97[5:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Comparator_block
  wire  [7:0] med1;
  wire  [7:0] med2;
  wire outp;
  assign med1 = $unsigned(N_75) ;
  assign med2 = $unsigned(N_82) ;
  assign N_21 = outp;
    synComparator #(
      .bitwidth(8),
      .datatype("unsign"),
      .opr("geq")
    ) Comparator (
      .inpA(med1),
      .inpB(med2),
      .outp(outp)
    );
  end // Comparator_block;
  endgenerate
assign N_31 = 1'b1;
assign N_30 = 1'b1;
assign N_29 = 1'b1;
    Multi_Add_FP_Add_getmsbpos1  mygetmsbpos1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_76),
      .y(N_97)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_Sequence1_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [9:0] inp;
output [15:0] outp;
wire [15:0] Multi_Add_Sequence1_ROM_CT [0:1023];
wire rstSig;
assign rstSig = rst;
wire [15:0] outBuf;
reg  [15:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
wire [9:0] inpTr;
wire valid, validReg;
  assign outBuf = validReg == 1 ? romReg : 16'b0;
  assign valid = (inp >= 900) ? 0 : 1;
  assign inpTr = inp[9:0];
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) validDly_block ( .clk(clk), .en(en), .grst(rstSig), .rst(1'b0), .inp(valid), .outp(validReg) );
assign  outp=outBuf;
  generate
  begin: gen_Multi_Add_Sequence1_ROM
    assign Multi_Add_Sequence1_ROM_CT[0]=16'b0000000100000000;
    assign Multi_Add_Sequence1_ROM_CT[1]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[2]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[3]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[4]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[5]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[6]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[7]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[8]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[9]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[10]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[11]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[12]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[13]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[14]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[15]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[16]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[17]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[18]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[19]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[20]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[21]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[22]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[23]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[24]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[25]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[26]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[27]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[28]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[29]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[30]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[31]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[32]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[33]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[34]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[35]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[36]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[37]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[38]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[39]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[40]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[41]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[42]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[43]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[44]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[45]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[46]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[47]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[48]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[49]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[50]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[51]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[52]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[53]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[54]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[55]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[56]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[57]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[58]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[59]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[60]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[61]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[62]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[63]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[64]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[65]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[66]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[67]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[68]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[69]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[70]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[71]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[72]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[73]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[74]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[75]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[76]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[77]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[78]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[79]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[80]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[81]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[82]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[83]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[84]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[85]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[86]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[87]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[88]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[89]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[90]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[91]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[92]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[93]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[94]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[95]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[96]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[97]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[98]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[99]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[100]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[101]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[102]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[103]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[104]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[105]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[106]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[107]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[108]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[109]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[110]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[111]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[112]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[113]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[114]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[115]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[116]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[117]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[118]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[119]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[120]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[121]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[122]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[123]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[124]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[125]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[126]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[127]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[128]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[129]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[130]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[131]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[132]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[133]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[134]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[135]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[136]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[137]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[138]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[139]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[140]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[141]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[142]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[143]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[144]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[145]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[146]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[147]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[148]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[149]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[150]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[151]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[152]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[153]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[154]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[155]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[156]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[157]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[158]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[159]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[160]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[161]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[162]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[163]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[164]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[165]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[166]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[167]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[168]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[169]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[170]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[171]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[172]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[173]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[174]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[175]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[176]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[177]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[178]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[179]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[180]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[181]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[182]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[183]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[184]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[185]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[186]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[187]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[188]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[189]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[190]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[191]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[192]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[193]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[194]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[195]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[196]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[197]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[198]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[199]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[200]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[201]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[202]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[203]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[204]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[205]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[206]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[207]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[208]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[209]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[210]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[211]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[212]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[213]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[214]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[215]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[216]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[217]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[218]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[219]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[220]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[221]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[222]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[223]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[224]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[225]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[226]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[227]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[228]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[229]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[230]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[231]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[232]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[233]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[234]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[235]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[236]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[237]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[238]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[239]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[240]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[241]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[242]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[243]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[244]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[245]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[246]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[247]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[248]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[249]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[250]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[251]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[252]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[253]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[254]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[255]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[256]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[257]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[258]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[259]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[260]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[261]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[262]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[263]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[264]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[265]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[266]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[267]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[268]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[269]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[270]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[271]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[272]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[273]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[274]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[275]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[276]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[277]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[278]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[279]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[280]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[281]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[282]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[283]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[284]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[285]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[286]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[287]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[288]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[289]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[290]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[291]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[292]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[293]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[294]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[295]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[296]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[297]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[298]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[299]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[300]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[301]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[302]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[303]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[304]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[305]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[306]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[307]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[308]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[309]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[310]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[311]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[312]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[313]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[314]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[315]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[316]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[317]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[318]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[319]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[320]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[321]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[322]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[323]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[324]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[325]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[326]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[327]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[328]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[329]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[330]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[331]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[332]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[333]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[334]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[335]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[336]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[337]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[338]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[339]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[340]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[341]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[342]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[343]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[344]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[345]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[346]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[347]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[348]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[349]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[350]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[351]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[352]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[353]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[354]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[355]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[356]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[357]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[358]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[359]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[360]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[361]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[362]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[363]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[364]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[365]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[366]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[367]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[368]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[369]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[370]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[371]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[372]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[373]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[374]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[375]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[376]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[377]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[378]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[379]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[380]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[381]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[382]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[383]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[384]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[385]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[386]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[387]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[388]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[389]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[390]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[391]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[392]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[393]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[394]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[395]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[396]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[397]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[398]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[399]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[400]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[401]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[402]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[403]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[404]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[405]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[406]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[407]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[408]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[409]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[410]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[411]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[412]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[413]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[414]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[415]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[416]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[417]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[418]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[419]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[420]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[421]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[422]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[423]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[424]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[425]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[426]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[427]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[428]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[429]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[430]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[431]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[432]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[433]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[434]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[435]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[436]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[437]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[438]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[439]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[440]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[441]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[442]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[443]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[444]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[445]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[446]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[447]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[448]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[449]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[450]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[451]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[452]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[453]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[454]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[455]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[456]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[457]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[458]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[459]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[460]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[461]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[462]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[463]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[464]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[465]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[466]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[467]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[468]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[469]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[470]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[471]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[472]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[473]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[474]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[475]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[476]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[477]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[478]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[479]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[480]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[481]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[482]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[483]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[484]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[485]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[486]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[487]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[488]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[489]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[490]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[491]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[492]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[493]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[494]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[495]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[496]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[497]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[498]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[499]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[500]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[501]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[502]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[503]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[504]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[505]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[506]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[507]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[508]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[509]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[510]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[511]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[512]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[513]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[514]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[515]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[516]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[517]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[518]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[519]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[520]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[521]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[522]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[523]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[524]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[525]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[526]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[527]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[528]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[529]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[530]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[531]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[532]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[533]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[534]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[535]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[536]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[537]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[538]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[539]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[540]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[541]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[542]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[543]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[544]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[545]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[546]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[547]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[548]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[549]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[550]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[551]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[552]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[553]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[554]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[555]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[556]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[557]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[558]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[559]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[560]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[561]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[562]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[563]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[564]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[565]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[566]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[567]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[568]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[569]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[570]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[571]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[572]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[573]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[574]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[575]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[576]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[577]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[578]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[579]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[580]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[581]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[582]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[583]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[584]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[585]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[586]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[587]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[588]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[589]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[590]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[591]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[592]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[593]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[594]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[595]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[596]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[597]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[598]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[599]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[600]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[601]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[602]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[603]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[604]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[605]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[606]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[607]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[608]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[609]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[610]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[611]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[612]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[613]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[614]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[615]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[616]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[617]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[618]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[619]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[620]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[621]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[622]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[623]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[624]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[625]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[626]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[627]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[628]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[629]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[630]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[631]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[632]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[633]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[634]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[635]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[636]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[637]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[638]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[639]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[640]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[641]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[642]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[643]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[644]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[645]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[646]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[647]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[648]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[649]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[650]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[651]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[652]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[653]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[654]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[655]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[656]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[657]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[658]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[659]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[660]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[661]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[662]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[663]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[664]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[665]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[666]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[667]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[668]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[669]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[670]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[671]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[672]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[673]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[674]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[675]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[676]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[677]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[678]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[679]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[680]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[681]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[682]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[683]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[684]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[685]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[686]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[687]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[688]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[689]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[690]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[691]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[692]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[693]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[694]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[695]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[696]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[697]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[698]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[699]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[700]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[701]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[702]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[703]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[704]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[705]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[706]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[707]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[708]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[709]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[710]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[711]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[712]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[713]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[714]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[715]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[716]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[717]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[718]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[719]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[720]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[721]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[722]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[723]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[724]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[725]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[726]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[727]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[728]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[729]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[730]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[731]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[732]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[733]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[734]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[735]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[736]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[737]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[738]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[739]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[740]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[741]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[742]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[743]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[744]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[745]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[746]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[747]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[748]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[749]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[750]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[751]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[752]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[753]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[754]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[755]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[756]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[757]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[758]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[759]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[760]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[761]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[762]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[763]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[764]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[765]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[766]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[767]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[768]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[769]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[770]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[771]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[772]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[773]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[774]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[775]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[776]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[777]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[778]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[779]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[780]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[781]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[782]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[783]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[784]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[785]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[786]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[787]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[788]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[789]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[790]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[791]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[792]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[793]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[794]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[795]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[796]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[797]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[798]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[799]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[800]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[801]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[802]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[803]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[804]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[805]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[806]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[807]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[808]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[809]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[810]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[811]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[812]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[813]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[814]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[815]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[816]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[817]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[818]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[819]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[820]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[821]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[822]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[823]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[824]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[825]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[826]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[827]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[828]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[829]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[830]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[831]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[832]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[833]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[834]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[835]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[836]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[837]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[838]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[839]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[840]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[841]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[842]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[843]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[844]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[845]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[846]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[847]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[848]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[849]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[850]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[851]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[852]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[853]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[854]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[855]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[856]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[857]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[858]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[859]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[860]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[861]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[862]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[863]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[864]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[865]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[866]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[867]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[868]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[869]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[870]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[871]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[872]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[873]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[874]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[875]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[876]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[877]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[878]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[879]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[880]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[881]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[882]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[883]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[884]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[885]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[886]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[887]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[888]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[889]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[890]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[891]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[892]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[893]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[894]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[895]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[896]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[897]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[898]=16'b0000000000000000;
    assign Multi_Add_Sequence1_ROM_CT[899]=16'b0000000000000000;
    genvar i;
    for (i=900; i<1024; i=i+1)
    begin: axes_Multi_Add_Sequence1_ROM
      assign Multi_Add_Sequence1_ROM_CT[i] = 16'b0;
    end
  end //gen_Multi_Add_Sequence1_ROM
  endgenerate
  always @(posedge clk)
  begin: Multi_Add_Sequence1_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 16'b0;
     end
      else if(en) begin
        romReg <= Multi_Add_Sequence1_ROM_CT[inpTr];
  end // if en
  end // Multi_Add_Sequence1_ROM_proc
endmodule

//----------------------------------------------------

module Multi_Add_Sequence1 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [15:0] seq // sfix16_En8
);
wire [15:0] N_2 ;
wire [9:0] N_1 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen135_1_147 ;
wire [0:0] N_GlobalEnable1_0_265 ;
wire [15:0] N_seq_1_266 ;
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen135_1_147 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [9:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen135_1_147[0];
    assign inbuf=N_1[9:0];
    Multi_Add_Sequence1_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [9:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen135_1_147[0]);
    assign rst = 0;
assign ldIn = 10'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(899),
        .bitwidth(10),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_Sequence_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [9:0] inp;
output [15:0] outp;
wire [15:0] Multi_Add_Sequence_ROM_CT [0:1023];
wire rstSig;
assign rstSig = rst;
wire [15:0] outBuf;
reg  [15:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
wire [9:0] inpTr;
wire valid, validReg;
  assign outBuf = validReg == 1 ? romReg : 16'b0;
  assign valid = (inp >= 1008) ? 0 : 1;
  assign inpTr = inp[9:0];
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) validDly_block ( .clk(clk), .en(en), .grst(rstSig), .rst(1'b0), .inp(valid), .outp(validReg) );
assign  outp=outBuf;
  generate
  begin: gen_Multi_Add_Sequence_ROM
    assign Multi_Add_Sequence_ROM_CT[0]=16'b0000000100000000;
    assign Multi_Add_Sequence_ROM_CT[1]=16'b0000000100000000;
    assign Multi_Add_Sequence_ROM_CT[2]=16'b0000000100000000;
    assign Multi_Add_Sequence_ROM_CT[3]=16'b0000000100000000;
    assign Multi_Add_Sequence_ROM_CT[4]=16'b0000000100000000;
    assign Multi_Add_Sequence_ROM_CT[5]=16'b0000000100000000;
    assign Multi_Add_Sequence_ROM_CT[6]=16'b0000000100000000;
    assign Multi_Add_Sequence_ROM_CT[7]=16'b0000000100000000;
    assign Multi_Add_Sequence_ROM_CT[8]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[9]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[10]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[11]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[12]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[13]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[14]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[15]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[16]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[17]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[18]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[19]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[20]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[21]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[22]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[23]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[24]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[25]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[26]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[27]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[28]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[29]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[30]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[31]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[32]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[33]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[34]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[35]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[36]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[37]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[38]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[39]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[40]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[41]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[42]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[43]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[44]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[45]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[46]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[47]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[48]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[49]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[50]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[51]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[52]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[53]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[54]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[55]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[56]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[57]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[58]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[59]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[60]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[61]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[62]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[63]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[64]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[65]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[66]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[67]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[68]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[69]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[70]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[71]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[72]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[73]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[74]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[75]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[76]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[77]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[78]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[79]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[80]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[81]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[82]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[83]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[84]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[85]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[86]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[87]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[88]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[89]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[90]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[91]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[92]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[93]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[94]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[95]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[96]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[97]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[98]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[99]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[100]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[101]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[102]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[103]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[104]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[105]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[106]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[107]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[108]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[109]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[110]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[111]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[112]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[113]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[114]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[115]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[116]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[117]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[118]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[119]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[120]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[121]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[122]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[123]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[124]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[125]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[126]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[127]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[128]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[129]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[130]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[131]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[132]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[133]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[134]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[135]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[136]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[137]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[138]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[139]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[140]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[141]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[142]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[143]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[144]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[145]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[146]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[147]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[148]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[149]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[150]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[151]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[152]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[153]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[154]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[155]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[156]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[157]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[158]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[159]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[160]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[161]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[162]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[163]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[164]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[165]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[166]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[167]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[168]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[169]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[170]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[171]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[172]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[173]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[174]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[175]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[176]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[177]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[178]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[179]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[180]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[181]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[182]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[183]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[184]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[185]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[186]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[187]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[188]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[189]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[190]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[191]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[192]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[193]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[194]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[195]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[196]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[197]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[198]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[199]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[200]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[201]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[202]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[203]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[204]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[205]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[206]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[207]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[208]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[209]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[210]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[211]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[212]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[213]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[214]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[215]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[216]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[217]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[218]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[219]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[220]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[221]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[222]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[223]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[224]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[225]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[226]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[227]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[228]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[229]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[230]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[231]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[232]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[233]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[234]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[235]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[236]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[237]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[238]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[239]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[240]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[241]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[242]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[243]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[244]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[245]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[246]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[247]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[248]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[249]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[250]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[251]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[252]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[253]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[254]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[255]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[256]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[257]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[258]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[259]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[260]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[261]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[262]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[263]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[264]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[265]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[266]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[267]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[268]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[269]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[270]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[271]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[272]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[273]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[274]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[275]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[276]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[277]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[278]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[279]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[280]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[281]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[282]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[283]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[284]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[285]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[286]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[287]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[288]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[289]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[290]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[291]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[292]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[293]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[294]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[295]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[296]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[297]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[298]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[299]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[300]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[301]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[302]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[303]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[304]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[305]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[306]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[307]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[308]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[309]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[310]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[311]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[312]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[313]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[314]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[315]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[316]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[317]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[318]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[319]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[320]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[321]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[322]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[323]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[324]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[325]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[326]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[327]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[328]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[329]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[330]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[331]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[332]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[333]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[334]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[335]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[336]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[337]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[338]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[339]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[340]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[341]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[342]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[343]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[344]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[345]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[346]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[347]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[348]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[349]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[350]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[351]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[352]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[353]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[354]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[355]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[356]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[357]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[358]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[359]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[360]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[361]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[362]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[363]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[364]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[365]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[366]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[367]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[368]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[369]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[370]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[371]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[372]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[373]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[374]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[375]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[376]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[377]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[378]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[379]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[380]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[381]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[382]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[383]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[384]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[385]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[386]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[387]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[388]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[389]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[390]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[391]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[392]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[393]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[394]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[395]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[396]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[397]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[398]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[399]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[400]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[401]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[402]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[403]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[404]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[405]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[406]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[407]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[408]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[409]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[410]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[411]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[412]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[413]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[414]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[415]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[416]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[417]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[418]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[419]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[420]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[421]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[422]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[423]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[424]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[425]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[426]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[427]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[428]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[429]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[430]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[431]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[432]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[433]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[434]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[435]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[436]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[437]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[438]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[439]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[440]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[441]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[442]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[443]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[444]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[445]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[446]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[447]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[448]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[449]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[450]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[451]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[452]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[453]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[454]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[455]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[456]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[457]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[458]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[459]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[460]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[461]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[462]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[463]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[464]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[465]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[466]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[467]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[468]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[469]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[470]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[471]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[472]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[473]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[474]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[475]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[476]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[477]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[478]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[479]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[480]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[481]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[482]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[483]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[484]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[485]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[486]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[487]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[488]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[489]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[490]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[491]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[492]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[493]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[494]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[495]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[496]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[497]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[498]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[499]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[500]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[501]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[502]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[503]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[504]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[505]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[506]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[507]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[508]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[509]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[510]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[511]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[512]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[513]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[514]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[515]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[516]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[517]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[518]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[519]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[520]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[521]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[522]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[523]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[524]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[525]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[526]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[527]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[528]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[529]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[530]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[531]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[532]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[533]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[534]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[535]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[536]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[537]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[538]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[539]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[540]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[541]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[542]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[543]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[544]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[545]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[546]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[547]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[548]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[549]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[550]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[551]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[552]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[553]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[554]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[555]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[556]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[557]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[558]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[559]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[560]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[561]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[562]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[563]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[564]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[565]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[566]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[567]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[568]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[569]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[570]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[571]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[572]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[573]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[574]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[575]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[576]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[577]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[578]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[579]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[580]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[581]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[582]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[583]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[584]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[585]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[586]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[587]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[588]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[589]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[590]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[591]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[592]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[593]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[594]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[595]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[596]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[597]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[598]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[599]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[600]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[601]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[602]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[603]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[604]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[605]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[606]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[607]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[608]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[609]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[610]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[611]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[612]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[613]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[614]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[615]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[616]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[617]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[618]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[619]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[620]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[621]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[622]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[623]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[624]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[625]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[626]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[627]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[628]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[629]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[630]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[631]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[632]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[633]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[634]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[635]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[636]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[637]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[638]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[639]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[640]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[641]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[642]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[643]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[644]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[645]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[646]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[647]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[648]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[649]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[650]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[651]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[652]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[653]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[654]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[655]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[656]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[657]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[658]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[659]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[660]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[661]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[662]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[663]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[664]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[665]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[666]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[667]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[668]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[669]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[670]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[671]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[672]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[673]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[674]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[675]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[676]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[677]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[678]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[679]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[680]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[681]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[682]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[683]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[684]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[685]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[686]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[687]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[688]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[689]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[690]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[691]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[692]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[693]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[694]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[695]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[696]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[697]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[698]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[699]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[700]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[701]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[702]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[703]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[704]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[705]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[706]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[707]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[708]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[709]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[710]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[711]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[712]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[713]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[714]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[715]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[716]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[717]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[718]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[719]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[720]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[721]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[722]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[723]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[724]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[725]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[726]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[727]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[728]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[729]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[730]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[731]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[732]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[733]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[734]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[735]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[736]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[737]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[738]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[739]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[740]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[741]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[742]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[743]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[744]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[745]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[746]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[747]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[748]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[749]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[750]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[751]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[752]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[753]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[754]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[755]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[756]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[757]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[758]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[759]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[760]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[761]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[762]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[763]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[764]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[765]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[766]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[767]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[768]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[769]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[770]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[771]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[772]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[773]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[774]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[775]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[776]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[777]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[778]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[779]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[780]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[781]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[782]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[783]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[784]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[785]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[786]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[787]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[788]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[789]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[790]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[791]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[792]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[793]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[794]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[795]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[796]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[797]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[798]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[799]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[800]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[801]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[802]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[803]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[804]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[805]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[806]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[807]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[808]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[809]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[810]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[811]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[812]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[813]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[814]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[815]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[816]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[817]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[818]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[819]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[820]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[821]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[822]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[823]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[824]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[825]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[826]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[827]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[828]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[829]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[830]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[831]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[832]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[833]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[834]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[835]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[836]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[837]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[838]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[839]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[840]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[841]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[842]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[843]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[844]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[845]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[846]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[847]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[848]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[849]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[850]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[851]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[852]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[853]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[854]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[855]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[856]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[857]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[858]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[859]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[860]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[861]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[862]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[863]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[864]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[865]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[866]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[867]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[868]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[869]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[870]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[871]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[872]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[873]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[874]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[875]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[876]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[877]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[878]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[879]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[880]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[881]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[882]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[883]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[884]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[885]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[886]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[887]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[888]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[889]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[890]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[891]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[892]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[893]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[894]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[895]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[896]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[897]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[898]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[899]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[900]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[901]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[902]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[903]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[904]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[905]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[906]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[907]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[908]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[909]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[910]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[911]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[912]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[913]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[914]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[915]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[916]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[917]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[918]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[919]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[920]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[921]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[922]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[923]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[924]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[925]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[926]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[927]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[928]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[929]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[930]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[931]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[932]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[933]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[934]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[935]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[936]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[937]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[938]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[939]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[940]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[941]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[942]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[943]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[944]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[945]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[946]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[947]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[948]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[949]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[950]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[951]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[952]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[953]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[954]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[955]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[956]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[957]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[958]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[959]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[960]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[961]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[962]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[963]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[964]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[965]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[966]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[967]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[968]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[969]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[970]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[971]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[972]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[973]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[974]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[975]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[976]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[977]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[978]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[979]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[980]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[981]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[982]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[983]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[984]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[985]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[986]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[987]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[988]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[989]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[990]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[991]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[992]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[993]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[994]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[995]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[996]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[997]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[998]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[999]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[1000]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[1001]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[1002]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[1003]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[1004]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[1005]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[1006]=16'b0000000000000000;
    assign Multi_Add_Sequence_ROM_CT[1007]=16'b0000000000000000;
    genvar i;
    for (i=1008; i<1024; i=i+1)
    begin: axes_Multi_Add_Sequence_ROM
      assign Multi_Add_Sequence_ROM_CT[i] = 16'b0;
    end
  end //gen_Multi_Add_Sequence_ROM
  endgenerate
  always @(posedge clk)
  begin: Multi_Add_Sequence_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 16'b0;
     end
      else if(en) begin
        romReg <= Multi_Add_Sequence_ROM_CT[inpTr];
  end // if en
  end // Multi_Add_Sequence_ROM_proc
endmodule

//----------------------------------------------------

module Multi_Add_Sequence (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [15:0] seq // sfix16_En8
);
wire [15:0] N_2 ;
wire [9:0] N_1 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen134_1_146 ;
wire [0:0] N_GlobalEnable1_0_267 ;
wire [15:0] N_seq_1_268 ;
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen134_1_146 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [9:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen134_1_146[0];
    assign inbuf=N_1[9:0];
    Multi_Add_Sequence_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [9:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen134_1_146[0]);
    assign rst = 0;
assign ldIn = 10'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(1007),
        .bitwidth(10),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add_FP_Mult (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [28:0] z, // ufix29_En0
  input [28:0] y, // ufix29_En0
  input [37:0] x // sfix38_En8
);
wire [8:0] N_57 ;
wire [0:0] N_74 ;
wire [6:0] N_26 ;
wire [7:0] N_29 ;
wire [0:0] N_30 ;
wire [7:0] N_59 ;
wire [7:0] N_60 ;
wire [40:0] N_67 ;
wire [0:0] N_23 ;
wire [0:0] N_24 ;
wire [19:0] N_69 ;
wire [0:0] N_25 ;
wire [19:0] N_72 ;
wire [0:0] N_45 ;
wire [7:0] N_44 ;
wire [19:0] N_43 ;
wire [20:0] N_20 ;
wire [41:0] N_58 ;
wire [42:0] N_27 ;
wire [9:0] N_39 ;
wire [20:0] N_21 ;
wire [20:0] N_32 ;
wire [20:0] N_33 ;
wire [0:0] N_63 ;
wire [9:0] N_11 ;
wire [0:0] N_62 ;
wire [0:0] N_70 ;
wire [0:0] N_40 ;
wire [19:0] N_73 ;
wire [7:0] N_31 ;
wire [0:0] N_42 ;
wire [41:0] N_36 ;
wire [41:0] N_66 ;
wire [8:0] N_61 ;
wire [41:0] N_75 ;
wire [7:0] N_68 ;
wire [7:0] N_71 ;
wire [8:0] N_12 ;
wire [0:0] N_14 ;
wire [37:0] N_3 ;
wire [41:0] N_56 ;
wire [41:0] N_37 ;
wire [28:0] N_4 ;
wire [20:0] N_28 ;
wire [20:0] N_34 ;
wire [20:0] N_35 ;
wire [0:0] N_64 ;
wire [41:0] N_19 ;
wire [28:0] N_22 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen133_1_145 ;
wire [0:0] N_38 ;
wire [0:0] N_41 ;
wire [0:0] N_GlobalEnable1_0_269 ;
wire [37:0] N_x_0_270 ;
wire [28:0] N_y_0_271 ;
wire [28:0] N_z_1_272 ;
wire GlobalResetSel;
assign z = N_22;
  assign N_4 = y;
  assign N_3 = x;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen133_1_145 = GlobalEnable1;
  generate
  begin: Add1_block
    wire enab;
    wire [9:0] tmpOut;
    wire  [9:0] tmp_N_57_0;
    wire  [9:0] tmp_N_74_1;
    wire  [9:0] tmp_N_26_2;
    wire [9:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_57_0 = ($unsigned(N_57) << 0);
    assign tmp_N_74_1 = ($unsigned(N_74) << 0);
    assign tmp_N_26_2 = ($unsigned(N_26) << 0);
    assign  tmpOutPre =   tmp_N_57_0 - tmp_N_74_1 - tmp_N_26_2;
    assign tmpOut = tmpOutPre;
    assign N_11 = $signed(tmpOut) << 0;
  end // Add1_block
  endgenerate
  generate
  begin: Add2_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_29_0;
    wire  [8:0] tmp_N_30_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_29_0 = ($unsigned(N_29) << 0);
    assign tmp_N_30_1 = ($unsigned(N_30) << 0);
    assign  tmpOutPre =   tmp_N_29_0 + tmp_N_30_1;
    assign tmpOut = tmpOutPre;
    synBusSatRnd #( .inp_width(9), .out_width(8), .infrac(0), .outfrac(0), .round(0), .sat(1), .datatype("UU") )
    sat_tmpOut ( .inp(tmpOut), .outp(N_31) );
  end // Add2_block
  endgenerate
  generate
  begin: Add5_block
    wire enab;
    wire [8:0] tmpOut;
    wire  [8:0] tmp_N_59_0;
    wire  [8:0] tmp_N_60_1;
    wire [8:0] tmpOutPre;
    assign  enab= GlobalEnable1;
    assign tmp_N_59_0 = ($unsigned(N_59) << 0);
    assign tmp_N_60_1 = ($unsigned(N_60) << 0);
    assign  tmpOutPre =   tmp_N_59_0 + tmp_N_60_1;
    assign tmpOut = tmpOutPre;
    assign N_12 = $unsigned(tmpOut) << 0;
  end // Add5_block
  endgenerate
  generate
  begin: Concat_block
    wire [41:0] med;
    assign med = { N_67, N_23 };
    assign N_19 = med[41:0];  end // Concat_block
  endgenerate
  generate
  begin: Concat1_block
    wire [20:0] med;
    assign med = { N_24, N_69 };
    assign N_20 = med[20:0];  end // Concat1_block
  endgenerate
  generate
  begin: Concat2_block
    wire [20:0] med;
    assign med = { N_25, N_72 };
    assign N_21 = med[20:0];  end // Concat2_block
  endgenerate
  generate
  begin: Concat3_block
    wire [28:0] med;
    assign med = { N_45, N_44, N_43 };
    assign N_22 = med[28:0];  end // Concat3_block
  endgenerate
assign N_23 = 1'b0;
  synBusAdapter #(
      .inp_width(21),
      .out_width(21),
      .datatype("unsign"),
      .preshift(0)
    ) Convert (
      .inp(N_20),
      .outp(N_32)
   );
  synBusAdapter #(
      .inp_width(42),
      .out_width(43),
      .datatype("unsign"),
      .preshift(0)
    ) Convert1 (
      .inp(N_58),
      .outp(N_27)
   );
  synBusAdapter #(
      .inp_width(43),
      .out_width(21),
      .datatype("unsign"),
      .preshift(-1),

      .infrac(42),
      .outfrac(20),
      .sat(1),
      .round(2),
      .saType("UU")
    ) Convert2 (
      .inp(N_27),
      .outp(N_28)
   );
  synBusAdapter #(
      .inp_width(10),
      .out_width(8),
      .datatype("signed"),
      .preshift(0),

      .infrac(0),
      .outfrac(0),
      .sat(1),
      .round(0),
      .saType("SU")
    ) Convert3 (
      .inp(N_39),
      .outp(N_29)
   );
  synBusAdapter #(
      .inp_width(21),
      .out_width(21),
      .datatype("unsign"),
      .preshift(0)
    ) Convert4 (
      .inp(N_21),
      .outp(N_33)
   );
    synDelayWithEnable #( .bitwidth(21), .delaylength(1) ) Delay_syn_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_32), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(21), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_33), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_63), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(10), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_39) );
    assign N_40 = N_62;
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_70), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_40), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(20), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_73), .outp(N_43) );
    synDelayWithEnable #( .bitwidth(8), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_31), .outp(N_44) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_42), .outp(N_45) );
    synDelayWithEnable #( .bitwidth(42), .delaylength(4) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_37) );
    assign N_56 = N_66;
    assign N_57 = N_61;
    synDelayWithEnable #( .bitwidth(42), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_75), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(8), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_68), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(8), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_71), .outp(N_60) );
    synDelayWithEnable #( .bitwidth(9), .delaylength(4) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_61) );
    synDelayWithEnable #( .bitwidth(1), .delaylength(4) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_62) );
  //start Extract
    assign N_63[0] = N_3[37];
  //end Extract
  //start Extract1
    assign N_64[0] = N_56[41];
  //end Extract1
  //start Extract11
    assign N_30[0] = N_27[42];
  //end Extract11
  //start Extract2
    assign N_66[0] = N_37[0];
    assign N_66[1] = N_37[1];
    assign N_66[2] = N_37[2];
    assign N_66[3] = N_37[3];
    assign N_66[4] = N_37[4];
    assign N_66[5] = N_37[5];
    assign N_66[6] = N_37[6];
    assign N_66[7] = N_37[7];
    assign N_66[8] = N_37[8];
    assign N_66[9] = N_37[9];
    assign N_66[10] = N_37[10];
    assign N_66[11] = N_37[11];
    assign N_66[12] = N_37[12];
    assign N_66[13] = N_37[13];
    assign N_66[14] = N_37[14];
    assign N_66[15] = N_37[15];
    assign N_66[16] = N_37[16];
    assign N_66[17] = N_37[17];
    assign N_66[18] = N_37[18];
    assign N_66[19] = N_37[19];
    assign N_66[20] = N_37[20];
    assign N_66[21] = N_37[21];
    assign N_66[22] = N_37[22];
    assign N_66[23] = N_37[23];
    assign N_66[24] = N_37[24];
    assign N_66[25] = N_37[25];
    assign N_66[26] = N_37[26];
    assign N_66[27] = N_37[27];
    assign N_66[28] = N_37[28];
    assign N_66[29] = N_37[29];
    assign N_66[30] = N_37[30];
    assign N_66[31] = N_37[31];
    assign N_66[32] = N_37[32];
    assign N_66[33] = N_37[33];
    assign N_66[34] = N_37[34];
    assign N_66[35] = N_37[35];
    assign N_66[36] = N_37[36];
    assign N_66[37] = N_37[37];
    assign N_66[38] = N_37[38];
    assign N_66[39] = N_37[39];
    assign N_66[40] = N_37[40];
    assign N_66[41] = N_37[41];
  //end Extract2
  //start Extract3
    assign N_67[0] = N_56[0];
    assign N_67[1] = N_56[1];
    assign N_67[2] = N_56[2];
    assign N_67[3] = N_56[3];
    assign N_67[4] = N_56[4];
    assign N_67[5] = N_56[5];
    assign N_67[6] = N_56[6];
    assign N_67[7] = N_56[7];
    assign N_67[8] = N_56[8];
    assign N_67[9] = N_56[9];
    assign N_67[10] = N_56[10];
    assign N_67[11] = N_56[11];
    assign N_67[12] = N_56[12];
    assign N_67[13] = N_56[13];
    assign N_67[14] = N_56[14];
    assign N_67[15] = N_56[15];
    assign N_67[16] = N_56[16];
    assign N_67[17] = N_56[17];
    assign N_67[18] = N_56[18];
    assign N_67[19] = N_56[19];
    assign N_67[20] = N_56[20];
    assign N_67[21] = N_56[21];
    assign N_67[22] = N_56[22];
    assign N_67[23] = N_56[23];
    assign N_67[24] = N_56[24];
    assign N_67[25] = N_56[25];
    assign N_67[26] = N_56[26];
    assign N_67[27] = N_56[27];
    assign N_67[28] = N_56[28];
    assign N_67[29] = N_56[29];
    assign N_67[30] = N_56[30];
    assign N_67[31] = N_56[31];
    assign N_67[32] = N_56[32];
    assign N_67[33] = N_56[33];
    assign N_67[34] = N_56[34];
    assign N_67[35] = N_56[35];
    assign N_67[36] = N_56[36];
    assign N_67[37] = N_56[37];
    assign N_67[38] = N_56[38];
    assign N_67[39] = N_56[39];
    assign N_67[40] = N_56[40];
  //end Extract3
  //start Extract4
    assign N_68[0] = N_3[20];
    assign N_68[1] = N_3[21];
    assign N_68[2] = N_3[22];
    assign N_68[3] = N_3[23];
    assign N_68[4] = N_3[24];
    assign N_68[5] = N_3[25];
    assign N_68[6] = N_3[26];
    assign N_68[7] = N_3[27];
  //end Extract4
  //start Extract5
    assign N_69[0] = N_3[0];
    assign N_69[1] = N_3[1];
    assign N_69[2] = N_3[2];
    assign N_69[3] = N_3[3];
    assign N_69[4] = N_3[4];
    assign N_69[5] = N_3[5];
    assign N_69[6] = N_3[6];
    assign N_69[7] = N_3[7];
    assign N_69[8] = N_3[8];
    assign N_69[9] = N_3[9];
    assign N_69[10] = N_3[10];
    assign N_69[11] = N_3[11];
    assign N_69[12] = N_3[12];
    assign N_69[13] = N_3[13];
    assign N_69[14] = N_3[14];
    assign N_69[15] = N_3[15];
    assign N_69[16] = N_3[16];
    assign N_69[17] = N_3[17];
    assign N_69[18] = N_3[18];
    assign N_69[19] = N_3[19];
  //end Extract5
  //start Extract6
    assign N_70[0] = N_4[28];
  //end Extract6
  //start Extract7
    assign N_71[0] = N_4[20];
    assign N_71[1] = N_4[21];
    assign N_71[2] = N_4[22];
    assign N_71[3] = N_4[23];
    assign N_71[4] = N_4[24];
    assign N_71[5] = N_4[25];
    assign N_71[6] = N_4[26];
    assign N_71[7] = N_4[27];
  //end Extract7
  //start Extract8
    assign N_72[0] = N_4[0];
    assign N_72[1] = N_4[1];
    assign N_72[2] = N_4[2];
    assign N_72[3] = N_4[3];
    assign N_72[4] = N_4[4];
    assign N_72[5] = N_4[5];
    assign N_72[6] = N_4[6];
    assign N_72[7] = N_4[7];
    assign N_72[8] = N_4[8];
    assign N_72[9] = N_4[9];
    assign N_72[10] = N_4[10];
    assign N_72[11] = N_4[11];
    assign N_72[12] = N_4[12];
    assign N_72[13] = N_4[13];
    assign N_72[14] = N_4[14];
    assign N_72[15] = N_4[15];
    assign N_72[16] = N_4[16];
    assign N_72[17] = N_4[17];
    assign N_72[18] = N_4[18];
    assign N_72[19] = N_4[19];
  //end Extract8
  //start Extract9
    assign N_73[0] = N_28[0];
    assign N_73[1] = N_28[1];
    assign N_73[2] = N_28[2];
    assign N_73[3] = N_28[3];
    assign N_73[4] = N_28[4];
    assign N_73[5] = N_28[5];
    assign N_73[6] = N_28[6];
    assign N_73[7] = N_28[7];
    assign N_73[8] = N_28[8];
    assign N_73[9] = N_28[9];
    assign N_73[10] = N_28[10];
    assign N_73[11] = N_28[11];
    assign N_73[12] = N_28[12];
    assign N_73[13] = N_28[13];
    assign N_73[14] = N_28[14];
    assign N_73[15] = N_28[15];
    assign N_73[16] = N_28[16];
    assign N_73[17] = N_28[17];
    assign N_73[18] = N_28[18];
    assign N_73[19] = N_28[19];
  //end Extract9
  generate
  begin: Mult5_block
    wire  [41:0] tmpOut;
    wire  [20:0] tmpin1;
    wire  [20:0] tmpin2;
    wire  [41:0] med;
    assign med = tmpOut ;
    assign N_36 = med[41:0];
    assign tmpin1 = $unsigned({1'b0,N_34});
    assign tmpin2 = $unsigned({1'b0,N_35});
    assign tmpOut = tmpin1 * tmpin2;
  end // Mult5_block
  endgenerate
  assign N_75 = (N_64 == 0) ? N_19 : N_56; // mux block
  //begin Inverter 
    wire   [0:0] Inverter_medo;
    wire  [0:0] Inverter_tmpOut;
    assign Inverter_medo = $unsigned(Inverter_tmpOut) ;
    assign N_74 = Inverter_medo[0:0];
    synInverter #(1) Inverter(.inp(N_64),.outp(Inverter_tmpOut));
  //end Inverter 
  generate
  begin: Binary_Logic1_block
    assign N_14 = (N_38 ^ N_41);
  end // Binary_Logic1_block;
  endgenerate
assign N_26 = 7'b1111111;
assign N_25 = 1'b1;
assign N_24 = 1'b1;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Port_In (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [28:0] y, // ufix29_En0
  input [28:0] porty // ufix29_En0
);
wire [28:0] N_1 ;
wire [28:0] N_porty_0_215 ;
wire [28:0] N_y_1_216 ;
wire GlobalResetSel;
assign y = N_1;
  assign N_1 = porty;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module FP_Port_Out (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [28:0] portx, // ufix29_En0
  input [28:0] x // ufix29_En0
);
wire [28:0] N_3 ;
wire [28:0] N_x_0_217 ;
wire [28:0] N_portx_1_218 ;
wire GlobalResetSel;
assign portx = N_3;
  assign N_3 = x;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Multi_Add (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [28:0] Out1, // ufix29_En0
  output [28:0] FP_Port_Out_portx, // ufix29_En0
  input [28:0] In1, // ufix29_En0
  input [28:0] FP_Port_In_porty // ufix29_En0
);
wire [28:0] N_9 ;
wire [15:0] N_5 ;
wire [28:0] N_4 ;
wire [28:0] N_12 ;
wire [15:0] N_10 ;
wire [43:0] N_11 ;
wire [28:0] N_portx_1_137 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen128_1_140 ;
wire [52:0] N_13 ;
wire [28:0] N_7 ;
wire [37:0] N_3 ;
wire [28:0] N_2 ;
wire [28:0] N_porty_1_7 ;
wire [0:0] N_GlobalEnable1_0_277 ;
wire [28:0] N_FP_Port_In_porty_0_278 ;
wire [28:0] N_In1_0_279 ;
wire [28:0] N_FP_Port_Out_portx_1_280 ;
wire [28:0] N_Out1_1_281 ;
wire GlobalResetSel;
assign Out1 = N_12;
assign FP_Port_Out_portx = N_portx_1_137;
  assign N_2 = In1;
  assign N_porty_1_7 = FP_Port_In_porty;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen128_1_140 = GlobalEnable1;
  generate
  begin: Mux_block
    wire [37:0] med  [1:0];
    reg [37:0] tmpOut;
    assign med[0] = $signed(N_5) ;
    assign med[1] = $unsigned(N_4) <<< 8;

    always@(*)
    begin
      if(N_9[28:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_9[28:0]];
    end

    assign N_3 = tmpOut;
  end // Mux_Block
  endgenerate
  generate
  begin: Mux1_block
    wire [52:0] med  [1:0];
    reg [52:0] tmpOut;
    assign med[0] = $signed(N_10) ;
    assign med[1] = $unsigned(N_11) <<< 8;

    always@(*)
    begin
      if(N_12[28:0] >= 2)
        tmpOut <= med[0];
      else
        tmpOut <= med[N_12[28:0]];
    end

    assign N_13 = tmpOut;
  end // Mux1_Block
  endgenerate
assign N_4 = 29'b01000000000000000000000000000;
assign N_11 = 44'b01000000000000000001100000000000000000000000;
    Multi_Add_FP_Add  myFP_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_13),
      .y(N_7),
      .z(N_12)    );
    Multi_Add_Sequence1  mySequence1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_5)    );
    Multi_Add_Sequence  mySequence (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_10)    );
    Multi_Add_FP_Mult  myFP_Mult (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_3),
      .y(N_2),
      .z(N_7)    );
    FP_Port_Out  myFP_Port_Out (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_7),
      .portx(N_portx_1_137)    );
    FP_Port_In  myFP_Port_In (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(N_porty_1_7),
      .y(N_9)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module HW3 (
  input clk,
  input GlobalReset,
  input [28:0] FP_Port_In_porty, // ufix29_En0
  output [28:0] FP_Port_Out_portx, // ufix29_En0
  output [28:0] Multi_Add_FP_Port_Out_portx, // ufix29_En0
  input [28:0] Multi_Add_FP_Port_In_porty // ufix29_En0
//@
);
//@

wire [28:0] Multi_Add_N_FP_Port_In_porty_1_112 ;
wire [28:0] FP_Port_In_N_porty_1_119 ;
wire [0:0] GlobalEnableSignal1 ;
wire [28:0] Multi_Add_N_FP_Port_Out_portx_1_128 ;
wire [28:0] N_2 ;
wire [28:0] FP_Port_Out_N_portx_1_127 ;
wire [28:0] N_1 ;
wire GlobalResetSel;
  wire GlobalEnable1;
  assign GlobalEnable1 = 1;
    FP_Port_In  myFP_Port_In (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .porty(FP_Port_In_N_porty_1_119),
      .y(N_1)    );
    FP_Port_Out  myFP_Port_Out (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x(N_2),
      .portx(FP_Port_Out_N_portx_1_127)    );
    Multi_Add  myMulti_Add (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .FP_Port_In_porty(Multi_Add_N_FP_Port_In_porty_1_112),
      .In1(N_1),
      .FP_Port_Out_portx(Multi_Add_N_FP_Port_Out_portx_1_128) ,
      .Out1(N_2)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
  generate
  begin: FP_Port_In_porty_block
    wire [28:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [28:0] med;
  always @(posedge clk)
  begin: FP_Port_In_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= FP_Port_In_porty;
  end // inProc
  assign out_tmp = med;
  assign FP_Port_In_N_porty_1_119 = out_tmp;
  end // FP_Port_In_porty_Block
  endgenerate
  generate
  begin: FP_Port_Out_portx_block
    reg [28:0] med;
    wire [28:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)
  begin: FP_Port_Out_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = FP_Port_Out_N_portx_1_127;
  assign FP_Port_Out_portx = med;
  end // FP_Port_Out_portx_Block
  endgenerate
  generate
  begin: Multi_Add_FP_Port_Out_portx_block
    reg [28:0] med;
    wire [28:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)
  begin: Multi_Add_FP_Port_Out_portx_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = Multi_Add_N_FP_Port_Out_portx_1_128;
  assign Multi_Add_FP_Port_Out_portx = med;
  end // Multi_Add_FP_Port_Out_portx_Block
  endgenerate
  generate
  begin: Multi_Add_FP_Port_In_porty_block
    wire [28:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [28:0] med;
  always @(posedge clk)
  begin: Multi_Add_FP_Port_In_porty_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Multi_Add_FP_Port_In_porty;
  end // inProc
  assign out_tmp = med;
  assign Multi_Add_N_FP_Port_In_porty_1_112 = out_tmp;
  end // Multi_Add_FP_Port_In_porty_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

