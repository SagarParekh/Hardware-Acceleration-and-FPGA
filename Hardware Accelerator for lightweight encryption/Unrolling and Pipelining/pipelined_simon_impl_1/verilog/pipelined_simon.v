// ********************************************************************
//
// Copyright (C) 1994-2016 Synopsys, Inc. All rights reserved. This Synopsys software and all associated documentation are proprietary to Synopsys, Inc. and may only be used pursuant to the terms and conditions of a written license agreement with Synopsys, Inc. All other use, reproduction, modification, or distribution of the Synopsys software or the associated documentation is strictly prohibited.

// This code was generated by Synopsys's Synphony Model Compiler product and
// is intended for use solely by licensed users of this product.

// VERILOG created by Synphony Model Compiler L-2016.03, Build 2009R, Feb 25 2016
// Date written:             Sat Apr 28 19:39:54 2018

// ********************************************************************

// Generated from /afs/asu.edu/users/v/c/h/vchand32/Downloads/pipelined_simon.slx Version 1.24 Last modified date Sat Apr 28 19:38:38 2018
module Simon_encryption_block_0Sequence11_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [0:0] inp;
output [15:0] outp;
wire [15:0] Simon_encryption_block_0Sequence11_ROM_CT [0:1];
wire rstSig;
assign rstSig = rst;
wire [15:0] outBuf;
reg  [15:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
wire [0:0] inpTr;
wire valid, validReg;
  assign outBuf = validReg == 1 ? romReg : 16'b0;
  assign valid = (inp >= 1) ? 0 : 1;
  assign inpTr = inp[0:0];
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) validDly_block ( .clk(clk), .en(en), .grst(rstSig), .rst(1'b0), .inp(valid), .outp(validReg) );
assign  outp=outBuf;
  generate
  begin: gen_Simon_encryption_block_0Sequence11_ROM
    assign Simon_encryption_block_0Sequence11_ROM_CT[0]=16'b0000000000000000;
    genvar i;
    for (i=1; i<2; i=i+1)
    begin: axes_Simon_encryption_block_0Sequence11_ROM
      assign Simon_encryption_block_0Sequence11_ROM_CT[i] = 16'b0;
    end
  end //gen_Simon_encryption_block_0Sequence11_ROM
  endgenerate
  always @(posedge clk)
  begin: Simon_encryption_block_0Sequence11_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 16'b0;
     end
      else if(en) begin
        romReg <= Simon_encryption_block_0Sequence11_ROM_CT[inpTr];
  end // if en
  end // Simon_encryption_block_0Sequence11_ROM_proc
endmodule

//----------------------------------------------------

module Simon_encryption_block_0Sequence11 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [15:0] seq // ufix16_En0
);
wire [15:0] N_2 ;
wire [0:0] N_1 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen913_1_919 ;
wire [0:0] N_GlobalEnable1_0_1593 ;
wire [15:0] N_seq_1_1594 ;
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen913_1_919 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [0:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen913_1_919[0];
    assign inbuf=N_1[0:0];
    Simon_encryption_block_0Sequence11_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [0:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen913_1_919[0]);
    assign rst = 0;
assign ldIn = 1'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(0),
        .bitwidth(1),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Simon_encryption_block_0Sequence_ROM (clk,rst,en,inp,outp);
input clk;
input  rst, en;
input [0:0] inp;
output [15:0] outp;
wire [15:0] Simon_encryption_block_0Sequence_ROM_CT [0:1];
wire rstSig;
assign rstSig = rst;
wire [15:0] outBuf;
reg  [15:0] romReg/*synthesis translate_off*/= 0/*synthesis translate_on*/;
wire [0:0] inpTr;
wire valid, validReg;
  assign outBuf = validReg == 1 ? romReg : 16'b0;
  assign valid = (inp >= 1) ? 0 : 1;
  assign inpTr = inp[0:0];
    synDelayWithEnable #( .bitwidth(1), .delaylength(1) ) validDly_block ( .clk(clk), .en(en), .grst(rstSig), .rst(1'b0), .inp(valid), .outp(validReg) );
assign  outp=outBuf;
  generate
  begin: gen_Simon_encryption_block_0Sequence_ROM
    assign Simon_encryption_block_0Sequence_ROM_CT[0]=16'b0000000000000001;
    genvar i;
    for (i=1; i<2; i=i+1)
    begin: axes_Simon_encryption_block_0Sequence_ROM
      assign Simon_encryption_block_0Sequence_ROM_CT[i] = 16'b0;
    end
  end //gen_Simon_encryption_block_0Sequence_ROM
  endgenerate
  always @(posedge clk)
  begin: Simon_encryption_block_0Sequence_ROM_proc
    integer i;
    if(  rstSig==1) 
     begin
       romReg <= 16'b0;
     end
      else if(en) begin
        romReg <= Simon_encryption_block_0Sequence_ROM_CT[inpTr];
  end // if en
  end // Simon_encryption_block_0Sequence_ROM_proc
endmodule

//----------------------------------------------------

module Simon_encryption_block_0Sequence (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [15:0] seq // ufix16_En0
);
wire [15:0] N_2 ;
wire [0:0] N_1 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen910_1_916 ;
wire [0:0] N_GlobalEnable1_0_1599 ;
wire [15:0] N_seq_1_1600 ;
wire GlobalResetSel;
assign seq = N_2;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen910_1_916 = GlobalEnable1;
  generate
  begin: ROM_block
    wire [0:0] inbuf;
    wire syn_en;
    assign syn_en = N_GlobalEnable1_SubSystem_Convert_AutoGen910_1_916[0];
    assign inbuf=N_1[0:0];
    Simon_encryption_block_0Sequence_ROM myROM (
     .clk(clk),
      .rst(GlobalResetSel),
      .en(syn_en),
     .inp(inbuf),
     .outp(N_2)
     );
  end // ROM_Block
  endgenerate
generate
begin:  Counter_block
wire [0:0] ldIn;
wire rst, en, enloc;
    assign enloc = 1;
    assign en = (enloc && N_GlobalEnable1_SubSystem_Convert_AutoGen910_1_916[0]);
    assign rst = 0;
assign ldIn = 1'b0;
    synCounter #(
        .en_exists('b1),
        .rst_exists('b0),
        .ld_exists('b0),
        .rdy_exists('b0),
        .ctype(2),
        .ival(0),
        .tval(0),
        .bitwidth(1),
        .isSigned('b0)
      ) myCounter (
        .clk(clk),
        .en(en),
        .grst(GlobalResetSel),
        .rst(rst),
        .up(1'b1),
        .ld(1'b0),
        .din(ldIn),
        .rdy(),
        .cnt(N_1)
      );
    end
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Simon_encryption_block_0Round_block (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [15:0] X_output, // ufix16_En0
  output [15:0] X_output1, // ufix16_En0
  input [15:0] k_i, // ufix16_En0
  input [15:0] x_input, // ufix16_En0
  input [15:0] _x_input1 // ufix16_En0
);
wire [15:0] N_8 ;
wire [3:0] N_4 ;
wire [3:0] N_10 ;
wire [3:0] N_5 ;
wire [3:0] N_14 ;
wire [3:0] N_18 ;
wire [3:0] N_20 ;
wire [15:0] N_6 ;
wire [15:0] N_19 ;
wire [15:0] N_21 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen878_1_884 ;
wire [15:0] N_15 ;
wire [15:0] N_16 ;
wire [15:0] N_2 ;
wire [15:0] N_22 ;
wire [15:0] N_11 ;
wire [15:0] N_12 ;
wire [15:0] N_7 ;
wire [15:0] N_1 ;
wire [15:0] N_3 ;
wire [15:0] N_9 ;
wire [15:0] N_13 ;
wire [15:0] N_17 ;
wire [0:0] N_GlobalEnable1_0_1787 ;
wire [15:0] N_0x_input1_0_1788 ;
wire [15:0] N_x_input_0_1789 ;
wire [15:0] N_k_i_0_1790 ;
wire [15:0] N_X_output1_1_1791 ;
wire [15:0] N_X_output_1_1792 ;
wire GlobalResetSel;
assign X_output = N_6;
assign X_output1 = N_8;
  assign N_9 = k_i;
  assign N_7 = x_input;
  assign N_8 = _x_input1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen878_1_884 = GlobalEnable1;
  generate
  begin: Shifter_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_8) ;
    assign N_11 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter (
      .inp(tmpIn),
      .shf(N_4[3:0]),
      .outp(medo)
   );
  end // Shifter_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_8) ;
    assign N_12 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_10[3:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_8) ;
    assign N_15 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_5[3:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_8) ;
    assign N_16 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_14[3:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Shifter4_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_8) ;
    assign N_19 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter4 (
      .inp(tmpIn),
      .shf(N_18[3:0]),
      .outp(medo)
   );
  end // Shifter4_block;
  endgenerate
  generate
  begin: Shifter5_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_8) ;
    assign N_21 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter5 (
      .inp(tmpIn),
      .shf(N_20[3:0]),
      .outp(medo)
   );
  end // Shifter5_block;
  endgenerate
  generate
  begin: Binary_Logic6_block
    assign N_22 = (N_19 | N_21);
  end // Binary_Logic6_block;
  endgenerate
  generate
  begin: Binary_Logic5_block
    assign N_17 = (N_15 | N_16);
  end // Binary_Logic5_block;
  endgenerate
  generate
  begin: Binary_Logic4_block
    assign N_3 = (N_2 ^ N_22);
  end // Binary_Logic4_block;
  endgenerate
  generate
  begin: Binary_Logic3_block
    assign N_13 = (N_11 | N_12);
  end // Binary_Logic3_block;
  endgenerate
  generate
  begin: Binary_Logic2_block
    assign N_2 = (N_7 ^ N_1);
  end // Binary_Logic2_block;
  endgenerate
  generate
  begin: Binary_Logic1_block
    assign N_6 = (N_3 ^ N_9);
  end // Binary_Logic1_block;
  endgenerate
  generate
  begin: Binary_Logic_block
    assign N_1 = (N_13 & N_17);
  end // Binary_Logic_block;
  endgenerate
assign N_20 = 4'b1110;
assign N_14 = 4'b1000;
assign N_10 = 4'b1111;
assign N_18 = 4'b0010;
assign N_5 = 4'b1000;
assign N_4 = 4'b0001;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Simon_encryption_block_0Key_expansion_block2 (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [15:0] Key_output3, // ufix16_En0
  output [15:0] Key_output2, // ufix16_En0
  output [15:0] Key_output1, // ufix16_En0
  output [15:0] Key_output, // ufix16_En0
  input [15:0] c, // ufix16_En0
  input [15:0] key_input3, // ufix16_En0
  input [15:0] key_input2, // ufix16_En0
  input [15:0] key_input1, // ufix16_En0
  input [15:0] key_input // ufix16_En0
);
wire [15:0] N_11 ;
wire [3:0] N_14 ;
wire [3:0] N_2 ;
wire [15:0] N_1 ;
wire [3:0] N_3 ;
wire [3:0] N_18 ;
wire [15:0] N_4 ;
wire [15:0] N_10 ;
wire [15:0] N_7 ;
wire [15:0] N_19 ;
wire [15:0] N_20 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen858_1_864 ;
wire [15:0] N_15 ;
wire [15:0] N_16 ;
wire [15:0] N_8 ;
wire [15:0] N_9 ;
wire [15:0] N_12 ;
wire [15:0] N_21 ;
wire [15:0] N_6 ;
wire [15:0] N_5 ;
wire [15:0] N_13 ;
wire [15:0] N_17 ;
wire [0:0] N_GlobalEnable1_0_1983 ;
wire [15:0] N_key_input_0_1984 ;
wire [15:0] N_key_input1_0_1985 ;
wire [15:0] N_key_input2_0_1986 ;
wire [15:0] N_key_input3_0_1987 ;
wire [15:0] N_c_0_1988 ;
wire [15:0] N_Key_output_1_1989 ;
wire [15:0] N_Key_output1_1_1990 ;
wire [15:0] N_Key_output2_1_1991 ;
wire [15:0] N_Key_output3_1_1992 ;
wire GlobalResetSel;
assign Key_output3 = N_4;
assign Key_output2 = N_11;
assign Key_output1 = N_10;
assign Key_output = N_7;
  assign N_9 = c;
  assign N_11 = key_input3;
  assign N_10 = key_input2;
  assign N_7 = key_input1;
  assign N_6 = key_input;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen858_1_864 = GlobalEnable1;
  generate
  begin: Shifter_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_11) ;
    assign N_16 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter (
      .inp(tmpIn),
      .shf(N_14[3:0]),
      .outp(medo)
   );
  end // Shifter_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_11) ;
    assign N_15 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_2[3:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_1) ;
    assign N_19 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_3[3:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_1) ;
    assign N_20 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_18[3:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Binary_Logic7_block
    assign N_21 = (N_19 | N_20);
  end // Binary_Logic7_block;
  endgenerate
  generate
  begin: Binary_Logic6_block
    assign N_17 = (N_15 | N_16);
  end // Binary_Logic6_block;
  endgenerate
  generate
  begin: Binary_Logic5_block
    assign N_13 = (N_8 ^ N_9);
  end // Binary_Logic5_block;
  endgenerate
  generate
  begin: Binary_Logic4_block
    assign N_5 = (N_12 ^ N_21);
  end // Binary_Logic4_block;
  endgenerate
  generate
  begin: Binary_Logic3_block
    assign N_12 = (N_6 ^ N_1);
  end // Binary_Logic3_block;
  endgenerate
  generate
  begin: Binary_Logic2_block
    assign N_4 = (N_5 ^ N_13);
  end // Binary_Logic2_block;
  endgenerate
  generate
  begin: Binary_Logic1_block
    assign N_1 = (N_7 ^ N_17);
  end // Binary_Logic1_block;
  endgenerate
assign N_8 = 16'b1111111111111100;
assign N_18 = 4'b1111;
assign N_14 = 4'b1101;
assign N_3 = 4'b0001;
assign N_2 = 4'b0011;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Simon_encryption_block_0Key_expansion_block (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [15:0] Key_output3, // ufix16_En0
  output [15:0] Key_output2, // ufix16_En0
  output [15:0] Key_output1, // ufix16_En0
  output [15:0] Key_output, // ufix16_En0
  input [15:0] z, // ufix16_En0
  input [15:0] key_input3, // ufix16_En0
  input [15:0] key_input2, // ufix16_En0
  input [15:0] key_input1, // ufix16_En0
  input [15:0] key_input // ufix16_En0
);
wire [15:0] N_11 ;
wire [3:0] N_14 ;
wire [3:0] N_2 ;
wire [15:0] N_1 ;
wire [3:0] N_3 ;
wire [3:0] N_18 ;
wire [15:0] N_4 ;
wire [15:0] N_10 ;
wire [15:0] N_7 ;
wire [15:0] N_19 ;
wire [15:0] N_20 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen846_1_852 ;
wire [15:0] N_15 ;
wire [15:0] N_16 ;
wire [15:0] N_8 ;
wire [15:0] N_9 ;
wire [15:0] N_12 ;
wire [15:0] N_21 ;
wire [15:0] N_6 ;
wire [15:0] N_5 ;
wire [15:0] N_13 ;
wire [15:0] N_17 ;
wire [0:0] N_GlobalEnable1_0_2103 ;
wire [15:0] N_key_input_0_2104 ;
wire [15:0] N_key_input1_0_2105 ;
wire [15:0] N_key_input2_0_2106 ;
wire [15:0] N_key_input3_0_2107 ;
wire [15:0] N_z_0_2108 ;
wire [15:0] N_Key_output_1_2109 ;
wire [15:0] N_Key_output1_1_2110 ;
wire [15:0] N_Key_output2_1_2111 ;
wire [15:0] N_Key_output3_1_2112 ;
wire GlobalResetSel;
assign Key_output3 = N_4;
assign Key_output2 = N_11;
assign Key_output1 = N_10;
assign Key_output = N_7;
  assign N_8 = z;
  assign N_11 = key_input3;
  assign N_10 = key_input2;
  assign N_7 = key_input1;
  assign N_6 = key_input;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen846_1_852 = GlobalEnable1;
  generate
  begin: Shifter_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_11) ;
    assign N_16 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter (
      .inp(tmpIn),
      .shf(N_14[3:0]),
      .outp(medo)
   );
  end // Shifter_block;
  endgenerate
  generate
  begin: Shifter1_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_11) ;
    assign N_15 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter1 (
      .inp(tmpIn),
      .shf(N_2[3:0]),
      .outp(medo)
   );
  end // Shifter1_block;
  endgenerate
  generate
  begin: Shifter2_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_1) ;
    assign N_19 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("rightshift")
    ) Shifter2 (
      .inp(tmpIn),
      .shf(N_3[3:0]),
      .outp(medo)
   );
  end // Shifter2_block;
  endgenerate
  generate
  begin: Shifter3_block
    wire [15:0] medo;
    wire [15:0] tmpIn;
    assign tmpIn = (N_1) ;
    assign N_20 = medo[15:0];
    synShifter #(
      .inpBitW(16),
      .outBitW(16),
      .shfBitW(4),
      .datatype("unsign"),
      .opr("leftshift")
    ) Shifter3 (
      .inp(tmpIn),
      .shf(N_18[3:0]),
      .outp(medo)
   );
  end // Shifter3_block;
  endgenerate
  generate
  begin: Binary_Logic7_block
    assign N_21 = (N_19 | N_20);
  end // Binary_Logic7_block;
  endgenerate
  generate
  begin: Binary_Logic6_block
    assign N_17 = (N_15 | N_16);
  end // Binary_Logic6_block;
  endgenerate
  generate
  begin: Binary_Logic5_block
    assign N_13 = (N_8 ^ N_9);
  end // Binary_Logic5_block;
  endgenerate
  generate
  begin: Binary_Logic4_block
    assign N_5 = (N_12 ^ N_21);
  end // Binary_Logic4_block;
  endgenerate
  generate
  begin: Binary_Logic3_block
    assign N_12 = (N_6 ^ N_1);
  end // Binary_Logic3_block;
  endgenerate
  generate
  begin: Binary_Logic2_block
    assign N_4 = (N_5 ^ N_13);
  end // Binary_Logic2_block;
  endgenerate
  generate
  begin: Binary_Logic1_block
    assign N_1 = (N_7 ^ N_17);
  end // Binary_Logic1_block;
  endgenerate
assign N_9 = 16'b1111111111111100;
assign N_18 = 4'b1111;
assign N_14 = 4'b1101;
assign N_3 = 4'b0001;
assign N_2 = 4'b0011;
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

module Simon_encryption_block (
  input clk,
  input GlobalEnable1,
  input GlobalReset,
  output [15:0] K_output3, // ufix16_En0
  output [15:0] K_output2, // ufix16_En0
  output [15:0] K_output1, // ufix16_En0
  output [15:0] K_output, // ufix16_En0
  output [15:0] X_output1, // ufix16_En0
  output [15:0] X_output, // ufix16_En0
  input [15:0] k_input3, // ufix16_En0
  input [15:0] k_input2, // ufix16_En0
  input [15:0] k_input1, // ufix16_En0
  input [15:0] k_input, // ufix16_En0
  input [15:0] x_input, // ufix16_En0
  input [15:0] x_input1 // ufix16_En0
);
wire [15:0] N_66 ;
wire [15:0] N_30 ;
wire [15:0] N_190 ;
wire [15:0] N_191 ;
wire [15:0] N_204 ;
wire [15:0] N_282 ;
wire [15:0] N_246 ;
wire [15:0] N_223 ;
wire [15:0] N_189 ;
wire [15:0] N_224 ;
wire [15:0] N_225 ;
wire [15:0] N_229 ;
wire [15:0] N_1 ;
wire [15:0] N_228 ;
wire [15:0] N_252 ;
wire [15:0] N_288 ;
wire [15:0] N_230 ;
wire [15:0] N_231 ;
wire [15:0] N_259 ;
wire [15:0] N_232 ;
wire [15:0] N_193 ;
wire [15:0] N_234 ;
wire [15:0] N_233 ;
wire [15:0] N_2 ;
wire [15:0] N_266 ;
wire [15:0] N_267 ;
wire [15:0] N_235 ;
wire [15:0] N_236 ;
wire [15:0] N_237 ;
wire [15:0] N_268 ;
wire [15:0] N_270 ;
wire [15:0] N_260 ;
wire [15:0] N_192 ;
wire [15:0] N_269 ;
wire [15:0] N_3 ;
wire [15:0] N_271 ;
wire [15:0] N_272 ;
wire [15:0] N_273 ;
wire [15:0] N_262 ;
wire [15:0] N_263 ;
wire [15:0] N_276 ;
wire [15:0] N_261 ;
wire [15:0] N_265 ;
wire [15:0] N_264 ;
wire [15:0] N_154 ;
wire [15:0] N_13 ;
wire [15:0] N_226 ;
wire [15:0] N_227 ;
wire [15:0] N_240 ;
wire [15:0] N_155 ;
wire [15:0] N_168 ;
wire [15:0] N_369 ;
wire [15:0] N_332 ;
wire [15:0] N_307 ;
wire [15:0] N_308 ;
wire [15:0] N_309 ;
wire [15:0] N_12 ;
wire [15:0] N_315 ;
wire [15:0] N_314 ;
wire [15:0] N_338 ;
wire [15:0] N_375 ;
wire [15:0] N_316 ;
wire [15:0] N_317 ;
wire [15:0] N_345 ;
wire [15:0] N_318 ;
wire [15:0] N_320 ;
wire [15:0] N_319 ;
wire [15:0] N_36 ;
wire [15:0] N_353 ;
wire [15:0] N_354 ;
wire [15:0] N_321 ;
wire [15:0] N_322 ;
wire [15:0] N_323 ;
wire [15:0] N_355 ;
wire [15:0] N_357 ;
wire [15:0] N_346 ;
wire [15:0] N_356 ;
wire [15:0] N_358 ;
wire [15:0] N_72 ;
wire [15:0] N_359 ;
wire [15:0] N_360 ;
wire [15:0] N_349 ;
wire [15:0] N_350 ;
wire [15:0] N_363 ;
wire [15:0] N_347 ;
wire [15:0] N_352 ;
wire [15:0] N_351 ;
wire [15:0] N_312 ;
wire [15:0] N_313 ;
wire [15:0] N_14 ;
wire [15:0] N_326 ;
wire [15:0] N_302 ;
wire [15:0] N_296 ;
wire [15:0] N_295 ;
wire [15:0] N_297 ;
wire [15:0] N_298 ;
wire [15:0] N_299 ;
wire [15:0] N_15 ;
wire [15:0] N_43 ;
wire [15:0] N_16 ;
wire [15:0] N_18 ;
wire [15:0] N_17 ;
wire [15:0] N_50 ;
wire [15:0] N_51 ;
wire [15:0] N_19 ;
wire [15:0] N_20 ;
wire [15:0] N_21 ;
wire [15:0] N_52 ;
wire [15:0] N_54 ;
wire [15:0] N_44 ;
wire [15:0] N_53 ;
wire [15:0] N_55 ;
wire [15:0] N_56 ;
wire [15:0] N_57 ;
wire [15:0] N_46 ;
wire [15:0] N_47 ;
wire [15:0] N_60 ;
wire [15:0] N_138 ;
wire [15:0] N_102 ;
wire [15:0] N_79 ;
wire [15:0] N_45 ;
wire [15:0] N_80 ;
wire [15:0] N_81 ;
wire [15:0] N_85 ;
wire [15:0] N_84 ;
wire [15:0] N_108 ;
wire [15:0] N_144 ;
wire [15:0] N_86 ;
wire [15:0] N_87 ;
wire [15:0] N_115 ;
wire [15:0] N_88 ;
wire [15:0] N_49 ;
wire [15:0] N_90 ;
wire [15:0] N_89 ;
wire [15:0] N_122 ;
wire [15:0] N_123 ;
wire [15:0] N_91 ;
wire [15:0] N_92 ;
wire [15:0] N_93 ;
wire [15:0] N_124 ;
wire [15:0] N_126 ;
wire [15:0] N_116 ;
wire [15:0] N_48 ;
wire [15:0] N_125 ;
wire [15:0] N_127 ;
wire [15:0] N_128 ;
wire [15:0] N_129 ;
wire [15:0] N_118 ;
wire [15:0] N_119 ;
wire [15:0] N_132 ;
wire [15:0] N_117 ;
wire [15:0] N_121 ;
wire [15:0] N_120 ;
wire [15:0] N_10 ;
wire [15:0] N_82 ;
wire [15:0] N_83 ;
wire [15:0] N_96 ;
wire [15:0] N_210 ;
wire [15:0] N_174 ;
wire [15:0] N_151 ;
wire [15:0] N_152 ;
wire [15:0] N_153 ;
wire [15:0] N_157 ;
wire [15:0] N_156 ;
wire [15:0] N_11 ;
wire [15:0] N_180 ;
wire [15:0] N_216 ;
wire [15:0] N_158 ;
wire [15:0] N_159 ;
wire [15:0] N_187 ;
wire [15:0] N_160 ;
wire [15:0] N_162 ;
wire [15:0] N_161 ;
wire [15:0] N_194 ;
wire [15:0] N_195 ;
wire [15:0] N_24 ;
wire [15:0] N_163 ;
wire [15:0] N_164 ;
wire [15:0] N_165 ;
wire [15:0] N_196 ;
wire [15:0] N_198 ;
wire [15:0] N_188 ;
wire [15:0] N_197 ;
wire [15:0] N_199 ;
wire [15:0] N_200 ;
wire [15:0] N_201 ;
wire [15:0] N_417 ;
wire [15:0] N_416 ;
wire [15:0] N_415 ;
wire [15:0] N_414 ;
wire [15:0] N_413 ;
wire [15:0] N_412 ;
wire [0:0] N_GlobalEnable1_SubSystem_Convert_AutoGen845_1_851 ;
wire [15:0] N_106 ;
wire [15:0] N_107 ;
wire [15:0] N_114 ;
wire [15:0] N_100 ;
wire [15:0] N_101 ;
wire [15:0] N_113 ;
wire [15:0] N_94 ;
wire [15:0] N_95 ;
wire [15:0] N_112 ;
wire [15:0] N_70 ;
wire [15:0] N_71 ;
wire [15:0] N_78 ;
wire [15:0] N_64 ;
wire [15:0] N_65 ;
wire [15:0] N_77 ;
wire [15:0] N_58 ;
wire [15:0] N_59 ;
wire [15:0] N_76 ;
wire [15:0] N_373 ;
wire [15:0] N_374 ;
wire [15:0] N_381 ;
wire [15:0] N_367 ;
wire [15:0] N_368 ;
wire [15:0] N_380 ;
wire [15:0] N_34 ;
wire [15:0] N_35 ;
wire [15:0] N_42 ;
wire [15:0] N_361 ;
wire [15:0] N_362 ;
wire [15:0] N_379 ;
wire [15:0] N_336 ;
wire [15:0] N_337 ;
wire [15:0] N_344 ;
wire [15:0] N_330 ;
wire [15:0] N_331 ;
wire [15:0] N_343 ;
wire [15:0] N_324 ;
wire [15:0] N_325 ;
wire [15:0] N_342 ;
wire [15:0] N_300 ;
wire [15:0] N_301 ;
wire [15:0] N_306 ;
wire [15:0] N_286 ;
wire [15:0] N_287 ;
wire [15:0] N_294 ;
wire [15:0] N_280 ;
wire [15:0] N_281 ;
wire [15:0] N_293 ;
wire [15:0] N_274 ;
wire [15:0] N_275 ;
wire [15:0] N_292 ;
wire [15:0] N_250 ;
wire [15:0] N_251 ;
wire [15:0] N_258 ;
wire [15:0] N_244 ;
wire [15:0] N_245 ;
wire [15:0] N_257 ;
wire [15:0] N_28 ;
wire [15:0] N_29 ;
wire [15:0] N_41 ;
wire [15:0] N_238 ;
wire [15:0] N_239 ;
wire [15:0] N_256 ;
wire [15:0] N_214 ;
wire [15:0] N_215 ;
wire [15:0] N_222 ;
wire [15:0] N_208 ;
wire [15:0] N_209 ;
wire [15:0] N_221 ;
wire [15:0] N_202 ;
wire [15:0] N_203 ;
wire [15:0] N_220 ;
wire [15:0] N_178 ;
wire [15:0] N_179 ;
wire [15:0] N_186 ;
wire [15:0] N_172 ;
wire [15:0] N_173 ;
wire [15:0] N_185 ;
wire [15:0] N_166 ;
wire [15:0] N_167 ;
wire [15:0] N_184 ;
wire [15:0] N_142 ;
wire [15:0] N_143 ;
wire [15:0] N_150 ;
wire [15:0] N_136 ;
wire [15:0] N_137 ;
wire [15:0] N_149 ;
wire [15:0] N_130 ;
wire [15:0] N_131 ;
wire [15:0] N_148 ;
wire [15:0] N_22 ;
wire [15:0] N_23 ;
wire [15:0] N_40 ;
wire [15:0] N_4 ;
wire [15:0] N_5 ;
wire [15:0] N_6 ;
wire [15:0] N_109 ;
wire [15:0] N_110 ;
wire [15:0] N_111 ;
wire [15:0] N_392 ;
wire [15:0] N_103 ;
wire [15:0] N_104 ;
wire [15:0] N_105 ;
wire [15:0] N_391 ;
wire [15:0] N_97 ;
wire [15:0] N_98 ;
wire [15:0] N_99 ;
wire [15:0] N_390 ;
wire [15:0] N_73 ;
wire [15:0] N_74 ;
wire [15:0] N_75 ;
wire [15:0] N_389 ;
wire [15:0] N_67 ;
wire [15:0] N_68 ;
wire [15:0] N_69 ;
wire [15:0] N_388 ;
wire [15:0] N_61 ;
wire [15:0] N_62 ;
wire [15:0] N_63 ;
wire [15:0] N_387 ;
wire [15:0] N_376 ;
wire [15:0] N_377 ;
wire [15:0] N_378 ;
wire [15:0] N_409 ;
wire [15:0] N_370 ;
wire [15:0] N_371 ;
wire [15:0] N_372 ;
wire [15:0] N_348 ;
wire [15:0] N_37 ;
wire [15:0] N_38 ;
wire [15:0] N_39 ;
wire [15:0] N_386 ;
wire [15:0] N_364 ;
wire [15:0] N_365 ;
wire [15:0] N_366 ;
wire [15:0] N_407 ;
wire [15:0] N_339 ;
wire [15:0] N_340 ;
wire [15:0] N_341 ;
wire [15:0] N_311 ;
wire [15:0] N_333 ;
wire [15:0] N_334 ;
wire [15:0] N_335 ;
wire [15:0] N_310 ;
wire [15:0] N_327 ;
wire [15:0] N_328 ;
wire [15:0] N_329 ;
wire [15:0] N_408 ;
wire [15:0] N_303 ;
wire [15:0] N_304 ;
wire [15:0] N_305 ;
wire [15:0] N_410 ;
wire [15:0] N_289 ;
wire [15:0] N_290 ;
wire [15:0] N_291 ;
wire [15:0] N_411 ;
wire [15:0] N_283 ;
wire [15:0] N_284 ;
wire [15:0] N_285 ;
wire [15:0] N_406 ;
wire [15:0] N_277 ;
wire [15:0] N_278 ;
wire [15:0] N_279 ;
wire [15:0] N_405 ;
wire [15:0] N_253 ;
wire [15:0] N_254 ;
wire [15:0] N_255 ;
wire [15:0] N_404 ;
wire [15:0] N_247 ;
wire [15:0] N_248 ;
wire [15:0] N_249 ;
wire [15:0] N_403 ;
wire [15:0] N_31 ;
wire [15:0] N_32 ;
wire [15:0] N_33 ;
wire [15:0] N_385 ;
wire [15:0] N_241 ;
wire [15:0] N_242 ;
wire [15:0] N_243 ;
wire [15:0] N_402 ;
wire [15:0] N_217 ;
wire [15:0] N_218 ;
wire [15:0] N_219 ;
wire [15:0] N_401 ;
wire [15:0] N_211 ;
wire [15:0] N_212 ;
wire [15:0] N_213 ;
wire [15:0] N_400 ;
wire [15:0] N_205 ;
wire [15:0] N_206 ;
wire [15:0] N_207 ;
wire [15:0] N_399 ;
wire [15:0] N_181 ;
wire [15:0] N_182 ;
wire [15:0] N_183 ;
wire [15:0] N_398 ;
wire [15:0] N_175 ;
wire [15:0] N_176 ;
wire [15:0] N_177 ;
wire [15:0] N_397 ;
wire [15:0] N_169 ;
wire [15:0] N_170 ;
wire [15:0] N_171 ;
wire [15:0] N_396 ;
wire [15:0] N_145 ;
wire [15:0] N_146 ;
wire [15:0] N_147 ;
wire [15:0] N_395 ;
wire [15:0] N_139 ;
wire [15:0] N_140 ;
wire [15:0] N_141 ;
wire [15:0] N_394 ;
wire [15:0] N_133 ;
wire [15:0] N_134 ;
wire [15:0] N_135 ;
wire [15:0] N_393 ;
wire [15:0] N_25 ;
wire [15:0] N_26 ;
wire [15:0] N_27 ;
wire [15:0] N_384 ;
wire [15:0] N_7 ;
wire [15:0] N_8 ;
wire [15:0] N_9 ;
wire [15:0] N_383 ;
wire [0:0] N_GlobalEnable1_0_2113 ;
wire [15:0] N_x_input1_0_2114 ;
wire [15:0] N_x_input_0_2115 ;
wire [15:0] N_k_input_0_2116 ;
wire [15:0] N_k_input1_0_2117 ;
wire [15:0] N_k_input2_0_2118 ;
wire [15:0] N_k_input3_0_2119 ;
wire [15:0] N_X_output_1_2120 ;
wire [15:0] N_X_output1_1_2121 ;
wire [15:0] N_K_output_1_2122 ;
wire [15:0] N_K_output1_1_2123 ;
wire [15:0] N_K_output2_1_2124 ;
wire [15:0] N_K_output3_1_2125 ;
wire GlobalResetSel;
assign K_output3 = N_417;
assign K_output2 = N_416;
assign K_output1 = N_415;
assign K_output = N_414;
assign X_output1 = N_413;
assign X_output = N_412;
  assign N_9 = k_input3;
  assign N_8 = k_input2;
  assign N_7 = k_input1;
  assign N_6 = k_input;
  assign N_5 = x_input;
  assign N_4 = x_input1;
  assign N_GlobalEnable1_SubSystem_Convert_AutoGen845_1_851 = GlobalEnable1;
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay1_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_66), .outp(N_77) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay10_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_30), .outp(N_41) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay100_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_190), .outp(N_202) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay101_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_191), .outp(N_203) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay102_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_204), .outp(N_220) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay103_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_282), .outp(N_293) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay104_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_246), .outp(N_257) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay105_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_223), .outp(N_241) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay106_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_189), .outp(N_207) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay107_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_224), .outp(N_242) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay108_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_225), .outp(N_243) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay109_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_229), .outp(N_244) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay11_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_1), .outp(N_25) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay110_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_228), .outp(N_245) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay111_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_252), .outp(N_258) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay112_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_288), .outp(N_294) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay113_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_230), .outp(N_247) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay114_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_231), .outp(N_248) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay115_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_259), .outp(N_277) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay116_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_232), .outp(N_249) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay117_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_193), .outp(N_208) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay118_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_234), .outp(N_250) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay119_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_233), .outp(N_251) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay12_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_2), .outp(N_26) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay120_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_266), .outp(N_283) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay121_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_267), .outp(N_284) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay122_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_235), .outp(N_253) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay123_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_236), .outp(N_254) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay124_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_237), .outp(N_255) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay125_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_268), .outp(N_285) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay126_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_270), .outp(N_286) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay127_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_260), .outp(N_278) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay128_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_192), .outp(N_209) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay129_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_269), .outp(N_287) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay13_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_3), .outp(N_27) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay130_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_271), .outp(N_289) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay131_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_272), .outp(N_290) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay132_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_273), .outp(N_291) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay133_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_262), .outp(N_274) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay134_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_263), .outp(N_275) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay135_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_276), .outp(N_292) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay136_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_261), .outp(N_279) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay137_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_265), .outp(N_280) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay138_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_264), .outp(N_281) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay139_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_154), .outp(N_166) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay14_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_13), .outp(N_28) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay140_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_226), .outp(N_238) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay141_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_227), .outp(N_239) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay142_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_240), .outp(N_256) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay143_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_155), .outp(N_167) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay144_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_168), .outp(N_184) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay145_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_369), .outp(N_380) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay146_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_332), .outp(N_343) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay147_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_307), .outp(N_327) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay148_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_308), .outp(N_328) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay149_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_309), .outp(N_329) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay15_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_12), .outp(N_29) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay150_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_315), .outp(N_330) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay151_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_314), .outp(N_331) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay152_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_338), .outp(N_344) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay153_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_375), .outp(N_381) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay154_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_316), .outp(N_333) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay155_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_317), .outp(N_334) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay156_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_345), .outp(N_364) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay157_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_318), .outp(N_335) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay158_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_320), .outp(N_336) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay159_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_319), .outp(N_337) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay16_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_36), .outp(N_42) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay160_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_353), .outp(N_370) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay161_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_354), .outp(N_371) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay162_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_321), .outp(N_339) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay163_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_322), .outp(N_340) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay164_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_323), .outp(N_341) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay165_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_355), .outp(N_372) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay166_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_357), .outp(N_373) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay167_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_346), .outp(N_365) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay168_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_356), .outp(N_374) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay169_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_358), .outp(N_376) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay17_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_72), .outp(N_78) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay170_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_359), .outp(N_377) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay171_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_360), .outp(N_378) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay172_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_349), .outp(N_361) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay173_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_350), .outp(N_362) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay174_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_363), .outp(N_379) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay175_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_347), .outp(N_366) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay176_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_352), .outp(N_367) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay177_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_351), .outp(N_368) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay178_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_312), .outp(N_324) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay179_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_313), .outp(N_325) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay18_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_14), .outp(N_31) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay180_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_326), .outp(N_342) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay181_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_302), .outp(N_306) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay182_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_296), .outp(N_300) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay183_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_295), .outp(N_301) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay184_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_297), .outp(N_303) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay185_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_298), .outp(N_304) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay186_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_299), .outp(N_305) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay19_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_15), .outp(N_32) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay2_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_43), .outp(N_61) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay20_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_16), .outp(N_33) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay21_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_18), .outp(N_34) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay22_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_17), .outp(N_35) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay23_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_50), .outp(N_67) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay24_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_51), .outp(N_68) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay25_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_19), .outp(N_37) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay26_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_20), .outp(N_38) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay27_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_21), .outp(N_39) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay28_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_52), .outp(N_69) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay29_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_54), .outp(N_70) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay3_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_44), .outp(N_62) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay30_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_53), .outp(N_71) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay31_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_55), .outp(N_73) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay32_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_56), .outp(N_74) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay33_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_57), .outp(N_75) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay34_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_46), .outp(N_58) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay35_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_47), .outp(N_59) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay36_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_60), .outp(N_76) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay37_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_138), .outp(N_149) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay38_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_102), .outp(N_113) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay39_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_79), .outp(N_97) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay4_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_45), .outp(N_63) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay40_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_80), .outp(N_98) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay41_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_81), .outp(N_99) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay42_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_85), .outp(N_100) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay43_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_84), .outp(N_101) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay44_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_108), .outp(N_114) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay45_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_144), .outp(N_150) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay46_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_86), .outp(N_103) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay47_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_87), .outp(N_104) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay48_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_115), .outp(N_133) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay49_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_88), .outp(N_105) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay5_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_49), .outp(N_64) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay50_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_90), .outp(N_106) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay51_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_89), .outp(N_107) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay52_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_122), .outp(N_139) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay53_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_123), .outp(N_140) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay54_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_91), .outp(N_109) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay55_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_92), .outp(N_110) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay56_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_93), .outp(N_111) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay57_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_124), .outp(N_141) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay58_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_126), .outp(N_142) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay59_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_116), .outp(N_134) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay6_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_48), .outp(N_65) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay60_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_125), .outp(N_143) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay61_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_127), .outp(N_145) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay62_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_128), .outp(N_146) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay63_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_129), .outp(N_147) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay64_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_118), .outp(N_130) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay65_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_119), .outp(N_131) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay66_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_132), .outp(N_148) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay67_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_117), .outp(N_135) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay68_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_121), .outp(N_136) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay69_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_120), .outp(N_137) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay7_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_10), .outp(N_22) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay70_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_82), .outp(N_94) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay71_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_83), .outp(N_95) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay72_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_96), .outp(N_112) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay73_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_210), .outp(N_221) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay74_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_174), .outp(N_185) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay75_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_151), .outp(N_169) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay76_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_152), .outp(N_170) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay77_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_153), .outp(N_171) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay78_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_157), .outp(N_172) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay79_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_156), .outp(N_173) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay8_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_11), .outp(N_23) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay80_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_180), .outp(N_186) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay81_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_216), .outp(N_222) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay82_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_158), .outp(N_175) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay83_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_159), .outp(N_176) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay84_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_187), .outp(N_205) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay85_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_160), .outp(N_177) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay86_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_162), .outp(N_178) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay87_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_161), .outp(N_179) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay88_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_194), .outp(N_211) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay89_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_195), .outp(N_212) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay9_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_24), .outp(N_40) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay90_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_163), .outp(N_181) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay91_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_164), .outp(N_182) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay92_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_165), .outp(N_183) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay93_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_196), .outp(N_213) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay94_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_198), .outp(N_214) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay95_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_188), .outp(N_206) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay96_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_197), .outp(N_215) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay97_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_199), .outp(N_217) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay98_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_200), .outp(N_218) );
    synDelayWithEnable #( .bitwidth(16), .delaylength(1) ) Delay99_block ( .clk(clk), .en(GlobalEnable1), .grst(GlobalResetSel), .rst(1'b0), .inp(N_201), .outp(N_219) );
    Simon_encryption_block_0Sequence11  mySequence9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_392)    );
    Simon_encryption_block_0Sequence11  mySequence8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_391)    );
    Simon_encryption_block_0Sequence11  mySequence7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_390)    );
    Simon_encryption_block_0Sequence  mySequence6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_389)    );
    Simon_encryption_block_0Sequence11  mySequence5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_388)    );
    Simon_encryption_block_0Sequence  mySequence4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_387)    );
    Simon_encryption_block_0Sequence11  mySequence31 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_409)    );
    Simon_encryption_block_0Sequence11  mySequence30 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_348)    );
    Simon_encryption_block_0Sequence  mySequence3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_386)    );
    Simon_encryption_block_0Sequence  mySequence29 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_407)    );
    Simon_encryption_block_0Sequence  mySequence28 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_311)    );
    Simon_encryption_block_0Sequence11  mySequence27 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_310)    );
    Simon_encryption_block_0Sequence11  mySequence26 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_408)    );
    Simon_encryption_block_0Sequence  mySequence25 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_410)    );
    Simon_encryption_block_0Sequence  mySequence24 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_411)    );
    Simon_encryption_block_0Sequence  mySequence23 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_406)    );
    Simon_encryption_block_0Sequence11  mySequence22 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_405)    );
    Simon_encryption_block_0Sequence11  mySequence21 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_404)    );
    Simon_encryption_block_0Sequence11  mySequence20 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_403)    );
    Simon_encryption_block_0Sequence  mySequence2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_385)    );
    Simon_encryption_block_0Sequence11  mySequence19 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_402)    );
    Simon_encryption_block_0Sequence  mySequence18 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_401)    );
    Simon_encryption_block_0Sequence  mySequence17 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_400)    );
    Simon_encryption_block_0Sequence11  mySequence16 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_399)    );
    Simon_encryption_block_0Sequence  mySequence15 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_398)    );
    Simon_encryption_block_0Sequence11  mySequence14 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_397)    );
    Simon_encryption_block_0Sequence  mySequence13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_396)    );
    Simon_encryption_block_0Sequence11  mySequence12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_395)    );
    Simon_encryption_block_0Sequence11  mySequence11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_394)    );
    Simon_encryption_block_0Sequence  mySequence10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_393)    );
    Simon_encryption_block_0Sequence  mySequence1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_384)    );
    Simon_encryption_block_0Sequence  mySequence (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .seq(N_383)    );
    Simon_encryption_block_0Round_block  myRound_block9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_106),
      .x_input(N_107),
      .k_i(N_114),
      .X_output1(N_119) ,
      .X_output(N_118)    );
    Simon_encryption_block_0Round_block  myRound_block8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_100),
      .x_input(N_101),
      .k_i(N_113),
      .X_output1(N_89) ,
      .X_output(N_90)    );
    Simon_encryption_block_0Round_block  myRound_block7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_94),
      .x_input(N_95),
      .k_i(N_112),
      .X_output1(N_84) ,
      .X_output(N_85)    );
    Simon_encryption_block_0Round_block  myRound_block6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_70),
      .x_input(N_71),
      .k_i(N_78),
      .X_output1(N_83) ,
      .X_output(N_82)    );
    Simon_encryption_block_0Round_block  myRound_block5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_64),
      .x_input(N_65),
      .k_i(N_77),
      .X_output1(N_53) ,
      .X_output(N_54)    );
    Simon_encryption_block_0Round_block  myRound_block4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_58),
      .x_input(N_59),
      .k_i(N_76),
      .X_output1(N_48) ,
      .X_output(N_49)    );
    Simon_encryption_block_0Round_block  myRound_block31 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_373),
      .x_input(N_374),
      .k_i(N_381),
      .X_output1(N_412) ,
      .X_output(N_413)    );
    Simon_encryption_block_0Round_block  myRound_block30 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_367),
      .x_input(N_368),
      .k_i(N_380),
      .X_output1(N_356) ,
      .X_output(N_357)    );
    Simon_encryption_block_0Round_block  myRound_block3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_34),
      .x_input(N_35),
      .k_i(N_42),
      .X_output1(N_47) ,
      .X_output(N_46)    );
    Simon_encryption_block_0Round_block  myRound_block29 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_361),
      .x_input(N_362),
      .k_i(N_379),
      .X_output1(N_351) ,
      .X_output(N_352)    );
    Simon_encryption_block_0Round_block  myRound_block28 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_336),
      .x_input(N_337),
      .k_i(N_344),
      .X_output1(N_350) ,
      .X_output(N_349)    );
    Simon_encryption_block_0Round_block  myRound_block27 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_330),
      .x_input(N_331),
      .k_i(N_343),
      .X_output1(N_319) ,
      .X_output(N_320)    );
    Simon_encryption_block_0Round_block  myRound_block26 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_324),
      .x_input(N_325),
      .k_i(N_342),
      .X_output1(N_314) ,
      .X_output(N_315)    );
    Simon_encryption_block_0Round_block  myRound_block25 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_300),
      .x_input(N_301),
      .k_i(N_306),
      .X_output1(N_313) ,
      .X_output(N_312)    );
    Simon_encryption_block_0Round_block  myRound_block24 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_286),
      .x_input(N_287),
      .k_i(N_294),
      .X_output1(N_295) ,
      .X_output(N_296)    );
    Simon_encryption_block_0Round_block  myRound_block23 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_280),
      .x_input(N_281),
      .k_i(N_293),
      .X_output1(N_269) ,
      .X_output(N_270)    );
    Simon_encryption_block_0Round_block  myRound_block22 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_274),
      .x_input(N_275),
      .k_i(N_292),
      .X_output1(N_264) ,
      .X_output(N_265)    );
    Simon_encryption_block_0Round_block  myRound_block21 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_250),
      .x_input(N_251),
      .k_i(N_258),
      .X_output1(N_263) ,
      .X_output(N_262)    );
    Simon_encryption_block_0Round_block  myRound_block20 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_244),
      .x_input(N_245),
      .k_i(N_257),
      .X_output1(N_233) ,
      .X_output(N_234)    );
    Simon_encryption_block_0Round_block  myRound_block2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_28),
      .x_input(N_29),
      .k_i(N_41),
      .X_output1(N_17) ,
      .X_output(N_18)    );
    Simon_encryption_block_0Round_block  myRound_block19 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_238),
      .x_input(N_239),
      .k_i(N_256),
      .X_output1(N_228) ,
      .X_output(N_229)    );
    Simon_encryption_block_0Round_block  myRound_block18 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_214),
      .x_input(N_215),
      .k_i(N_222),
      .X_output1(N_227) ,
      .X_output(N_226)    );
    Simon_encryption_block_0Round_block  myRound_block17 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_208),
      .x_input(N_209),
      .k_i(N_221),
      .X_output1(N_197) ,
      .X_output(N_198)    );
    Simon_encryption_block_0Round_block  myRound_block16 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_202),
      .x_input(N_203),
      .k_i(N_220),
      .X_output1(N_192) ,
      .X_output(N_193)    );
    Simon_encryption_block_0Round_block  myRound_block15 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_178),
      .x_input(N_179),
      .k_i(N_186),
      .X_output1(N_191) ,
      .X_output(N_190)    );
    Simon_encryption_block_0Round_block  myRound_block14 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_172),
      .x_input(N_173),
      .k_i(N_185),
      .X_output1(N_161) ,
      .X_output(N_162)    );
    Simon_encryption_block_0Round_block  myRound_block13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_166),
      .x_input(N_167),
      .k_i(N_184),
      .X_output1(N_156) ,
      .X_output(N_157)    );
    Simon_encryption_block_0Round_block  myRound_block12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_142),
      .x_input(N_143),
      .k_i(N_150),
      .X_output1(N_155) ,
      .X_output(N_154)    );
    Simon_encryption_block_0Round_block  myRound_block11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_136),
      .x_input(N_137),
      .k_i(N_149),
      .X_output1(N_125) ,
      .X_output(N_126)    );
    Simon_encryption_block_0Round_block  myRound_block10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_130),
      .x_input(N_131),
      .k_i(N_148),
      .X_output1(N_120) ,
      .X_output(N_121)    );
    Simon_encryption_block_0Round_block  myRound_block1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_22),
      .x_input(N_23),
      .k_i(N_40),
      .X_output1(N_12) ,
      .X_output(N_13)    );
    Simon_encryption_block_0Round_block  myRound_block (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      ._x_input1(N_4),
      .x_input(N_5),
      .k_i(N_6),
      .X_output1(N_11) ,
      .X_output(N_10)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block9 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_114),
      .key_input1(N_109),
      .key_input2(N_110),
      .key_input3(N_111),
      .z(N_392),
      .Key_output(N_132) ,
      .Key_output1(N_115) ,
      .Key_output2(N_116) ,
      .Key_output3(N_117)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block8 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_113),
      .key_input1(N_103),
      .key_input2(N_104),
      .key_input3(N_105),
      .z(N_391),
      .Key_output(N_108) ,
      .Key_output1(N_91) ,
      .Key_output2(N_92) ,
      .Key_output3(N_93)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block7 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_112),
      .key_input1(N_97),
      .key_input2(N_98),
      .key_input3(N_99),
      .z(N_390),
      .Key_output(N_102) ,
      .Key_output1(N_86) ,
      .Key_output2(N_87) ,
      .Key_output3(N_88)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block6 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_78),
      .key_input1(N_73),
      .key_input2(N_74),
      .key_input3(N_75),
      .z(N_389),
      .Key_output(N_96) ,
      .Key_output1(N_79) ,
      .Key_output2(N_80) ,
      .Key_output3(N_81)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block5 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_77),
      .key_input1(N_67),
      .key_input2(N_68),
      .key_input3(N_69),
      .z(N_388),
      .Key_output(N_72) ,
      .Key_output1(N_55) ,
      .Key_output2(N_56) ,
      .Key_output3(N_57)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block4 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_76),
      .key_input1(N_61),
      .key_input2(N_62),
      .key_input3(N_63),
      .z(N_387),
      .Key_output(N_66) ,
      .Key_output1(N_50) ,
      .Key_output2(N_51) ,
      .Key_output3(N_52)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block31 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_381),
      .key_input1(N_376),
      .key_input2(N_377),
      .key_input3(N_378),
      .z(N_409),
      .Key_output(N_414) ,
      .Key_output1(N_415) ,
      .Key_output2(N_416) ,
      .Key_output3(N_417)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block30 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_380),
      .key_input1(N_370),
      .key_input2(N_371),
      .key_input3(N_372),
      .z(N_348),
      .Key_output(N_375) ,
      .Key_output1(N_358) ,
      .Key_output2(N_359) ,
      .Key_output3(N_360)    );
    Simon_encryption_block_0Key_expansion_block2  myKey_expansion_block3 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_42),
      .key_input1(N_37),
      .key_input2(N_38),
      .key_input3(N_39),
      .c(N_386),
      .Key_output(N_60) ,
      .Key_output1(N_43) ,
      .Key_output2(N_44) ,
      .Key_output3(N_45)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block29 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_379),
      .key_input1(N_364),
      .key_input2(N_365),
      .key_input3(N_366),
      .z(N_407),
      .Key_output(N_369) ,
      .Key_output1(N_353) ,
      .Key_output2(N_354) ,
      .Key_output3(N_355)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block28 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_344),
      .key_input1(N_339),
      .key_input2(N_340),
      .key_input3(N_341),
      .z(N_311),
      .Key_output(N_363) ,
      .Key_output1(N_345) ,
      .Key_output2(N_346) ,
      .Key_output3(N_347)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block27 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_343),
      .key_input1(N_333),
      .key_input2(N_334),
      .key_input3(N_335),
      .z(N_310),
      .Key_output(N_338) ,
      .Key_output1(N_321) ,
      .Key_output2(N_322) ,
      .Key_output3(N_323)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block26 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_342),
      .key_input1(N_327),
      .key_input2(N_328),
      .key_input3(N_329),
      .z(N_408),
      .Key_output(N_332) ,
      .Key_output1(N_316) ,
      .Key_output2(N_317) ,
      .Key_output3(N_318)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block25 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_306),
      .key_input1(N_303),
      .key_input2(N_304),
      .key_input3(N_305),
      .z(N_410),
      .Key_output(N_326) ,
      .Key_output1(N_307) ,
      .Key_output2(N_308) ,
      .Key_output3(N_309)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block24 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_294),
      .key_input1(N_289),
      .key_input2(N_290),
      .key_input3(N_291),
      .z(N_411),
      .Key_output(N_302) ,
      .Key_output1(N_297) ,
      .Key_output2(N_298) ,
      .Key_output3(N_299)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block23 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_293),
      .key_input1(N_283),
      .key_input2(N_284),
      .key_input3(N_285),
      .z(N_406),
      .Key_output(N_288) ,
      .Key_output1(N_271) ,
      .Key_output2(N_272) ,
      .Key_output3(N_273)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block22 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_292),
      .key_input1(N_277),
      .key_input2(N_278),
      .key_input3(N_279),
      .z(N_405),
      .Key_output(N_282) ,
      .Key_output1(N_266) ,
      .Key_output2(N_267) ,
      .Key_output3(N_268)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block21 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_258),
      .key_input1(N_253),
      .key_input2(N_254),
      .key_input3(N_255),
      .z(N_404),
      .Key_output(N_276) ,
      .Key_output1(N_259) ,
      .Key_output2(N_260) ,
      .Key_output3(N_261)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block20 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_257),
      .key_input1(N_247),
      .key_input2(N_248),
      .key_input3(N_249),
      .z(N_403),
      .Key_output(N_252) ,
      .Key_output1(N_235) ,
      .Key_output2(N_236) ,
      .Key_output3(N_237)    );
    Simon_encryption_block_0Key_expansion_block2  myKey_expansion_block2 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_41),
      .key_input1(N_31),
      .key_input2(N_32),
      .key_input3(N_33),
      .c(N_385),
      .Key_output(N_36) ,
      .Key_output1(N_19) ,
      .Key_output2(N_20) ,
      .Key_output3(N_21)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block19 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_256),
      .key_input1(N_241),
      .key_input2(N_242),
      .key_input3(N_243),
      .z(N_402),
      .Key_output(N_246) ,
      .Key_output1(N_230) ,
      .Key_output2(N_231) ,
      .Key_output3(N_232)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block18 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_222),
      .key_input1(N_217),
      .key_input2(N_218),
      .key_input3(N_219),
      .z(N_401),
      .Key_output(N_240) ,
      .Key_output1(N_223) ,
      .Key_output2(N_224) ,
      .Key_output3(N_225)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block17 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_221),
      .key_input1(N_211),
      .key_input2(N_212),
      .key_input3(N_213),
      .z(N_400),
      .Key_output(N_216) ,
      .Key_output1(N_199) ,
      .Key_output2(N_200) ,
      .Key_output3(N_201)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block16 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_220),
      .key_input1(N_205),
      .key_input2(N_206),
      .key_input3(N_207),
      .z(N_399),
      .Key_output(N_210) ,
      .Key_output1(N_194) ,
      .Key_output2(N_195) ,
      .Key_output3(N_196)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block15 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_186),
      .key_input1(N_181),
      .key_input2(N_182),
      .key_input3(N_183),
      .z(N_398),
      .Key_output(N_204) ,
      .Key_output1(N_187) ,
      .Key_output2(N_188) ,
      .Key_output3(N_189)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block14 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_185),
      .key_input1(N_175),
      .key_input2(N_176),
      .key_input3(N_177),
      .z(N_397),
      .Key_output(N_180) ,
      .Key_output1(N_163) ,
      .Key_output2(N_164) ,
      .Key_output3(N_165)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block13 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_184),
      .key_input1(N_169),
      .key_input2(N_170),
      .key_input3(N_171),
      .z(N_396),
      .Key_output(N_174) ,
      .Key_output1(N_158) ,
      .Key_output2(N_159) ,
      .Key_output3(N_160)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block12 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_150),
      .key_input1(N_145),
      .key_input2(N_146),
      .key_input3(N_147),
      .z(N_395),
      .Key_output(N_168) ,
      .Key_output1(N_151) ,
      .Key_output2(N_152) ,
      .Key_output3(N_153)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block11 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_149),
      .key_input1(N_139),
      .key_input2(N_140),
      .key_input3(N_141),
      .z(N_394),
      .Key_output(N_144) ,
      .Key_output1(N_127) ,
      .Key_output2(N_128) ,
      .Key_output3(N_129)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block10 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_148),
      .key_input1(N_133),
      .key_input2(N_134),
      .key_input3(N_135),
      .z(N_393),
      .Key_output(N_138) ,
      .Key_output1(N_122) ,
      .Key_output2(N_123) ,
      .Key_output3(N_124)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block1 (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_40),
      .key_input1(N_25),
      .key_input2(N_26),
      .key_input3(N_27),
      .z(N_384),
      .Key_output(N_30) ,
      .Key_output1(N_14) ,
      .Key_output2(N_15) ,
      .Key_output3(N_16)    );
    Simon_encryption_block_0Key_expansion_block  myKey_expansion_block (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .key_input(N_6),
      .key_input1(N_7),
      .key_input2(N_8),
      .key_input3(N_9),
      .z(N_383),
      .Key_output(N_24) ,
      .Key_output1(N_1) ,
      .Key_output2(N_2) ,
      .Key_output3(N_3)    );
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

//@
module pipelined_simon (
  input clk,
  input GlobalReset,
  output [15:0] Port_Out5, // ufix16_En0
  output [15:0] Port_Out4, // ufix16_En0
  output [15:0] Port_Out3, // ufix16_En0
  output [15:0] Port_Out2, // ufix16_En0
  output [15:0] Port_Out1, // ufix16_En0
  output [15:0] Port_Out, // ufix16_En0
  input [15:0] Port_In5, // ufix16_En0
  input [15:0] Port_In4, // ufix16_En0
  input [15:0] Port_In3, // ufix16_En0
  input [15:0] Port_In2, // ufix16_En0
  input [15:0] Port_In1, // ufix16_En0
  input [15:0] Port_In // ufix16_En0
//@
);
//@

wire [15:0] N_1 ;
wire [15:0] N_2 ;
wire [15:0] N_3 ;
wire [15:0] N_4 ;
wire [15:0] N_5 ;
wire [15:0] N_6 ;
wire [0:0] GlobalEnableSignal1 ;
wire [15:0] N_13 ;
wire [15:0] N_14 ;
wire [15:0] N_15 ;
wire [15:0] N_16 ;
wire [15:0] N_17 ;
wire [15:0] N_18 ;
wire GlobalResetSel;
  wire GlobalEnable1;
  assign GlobalEnable1 = 1;
    Simon_encryption_block  mySimon_encryption_block (
      .clk(clk),
      .GlobalEnable1(GlobalEnable1),
      .GlobalReset(GlobalResetSel),
      .x_input1(N_1),
      .x_input(N_2),
      .k_input(N_3),
      .k_input1(N_4),
      .k_input2(N_5),
      .k_input3(N_6),
      .X_output(N_13) ,
      .X_output1(N_14) ,
      .K_output(N_15) ,
      .K_output1(N_16) ,
      .K_output2(N_17) ,
      .K_output3(N_18)    );
  assign GlobalEnableSignal1 = GlobalEnable1;
  generate
  begin: Port_Out5_block
    reg [15:0] med;
    wire [15:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)
  begin: Port_Out5_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_18;
  assign Port_Out5 = med;
  end // Port_Out5_Block
  endgenerate
  generate
  begin: Port_Out4_block
    reg [15:0] med;
    wire [15:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)
  begin: Port_Out4_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_17;
  assign Port_Out4 = med;
  end // Port_Out4_Block
  endgenerate
  generate
  begin: Port_Out3_block
    reg [15:0] med;
    wire [15:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)
  begin: Port_Out3_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_16;
  assign Port_Out3 = med;
  end // Port_Out3_Block
  endgenerate
  generate
  begin: Port_Out2_block
    reg [15:0] med;
    wire [15:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)
  begin: Port_Out2_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_15;
  assign Port_Out2 = med;
  end // Port_Out2_Block
  endgenerate
  generate
  begin: Port_Out1_block
    reg [15:0] med;
    wire [15:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)
  begin: Port_Out1_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_14;
  assign Port_Out1 = med;
  end // Port_Out1_Block
  endgenerate
  generate
  begin: Port_Out_block
    reg [15:0] med;
    wire [15:0] inp_tmp /* synthesis syn_keep = 1 */;
  always @(posedge clk)
  begin: Port_Out_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= inp_tmp;
  end // inProc
  assign inp_tmp = N_13;
  assign Port_Out = med;
  end // Port_Out_Block
  endgenerate
  generate
  begin: Port_In5_block
    wire [15:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [15:0] med;
  always @(posedge clk)
  begin: Port_In5_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In5;
  end // inProc
  assign out_tmp = med;
  assign N_6 = out_tmp;
  end // Port_In5_Block
  endgenerate
  generate
  begin: Port_In4_block
    wire [15:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [15:0] med;
  always @(posedge clk)
  begin: Port_In4_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In4;
  end // inProc
  assign out_tmp = med;
  assign N_5 = out_tmp;
  end // Port_In4_Block
  endgenerate
  generate
  begin: Port_In3_block
    wire [15:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [15:0] med;
  always @(posedge clk)
  begin: Port_In3_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In3;
  end // inProc
  assign out_tmp = med;
  assign N_4 = out_tmp;
  end // Port_In3_Block
  endgenerate
  generate
  begin: Port_In2_block
    wire [15:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [15:0] med;
  always @(posedge clk)
  begin: Port_In2_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In2;
  end // inProc
  assign out_tmp = med;
  assign N_3 = out_tmp;
  end // Port_In2_Block
  endgenerate
  generate
  begin: Port_In1_block
    wire [15:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [15:0] med;
  always @(posedge clk)
  begin: Port_In1_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In1;
  end // inProc
  assign out_tmp = med;
  assign N_2 = out_tmp;
  end // Port_In1_Block
  endgenerate
  generate
  begin: Port_In_block
    wire [15:0] out_tmp /* synthesis syn_keep = 1 */;
    reg [15:0] med;
  always @(posedge clk)
  begin: Port_In_proc
    integer i;
    if(GlobalResetSel==1) 
      med <= 0;
    else if( GlobalEnable1==1)
      med <= Port_In;
  end // inProc
  assign out_tmp = med;
  assign N_1 = out_tmp;
  end // Port_In_Block
  endgenerate
assign GlobalResetSel = GlobalReset;
endmodule

//-----------------------------------------

